"""
VideoBot Pro - Premium System Handler
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Premium –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""

import structlog
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from shared.config.database import get_async_session
from shared.models import User, Payment, PaymentStatus, PaymentMethod, SubscriptionPlan, Currency, EventType
from shared.models.analytics import track_payment_event
from shared.config.settings import settings
from bot.config import bot_config, get_message, MessageType
from bot.utils.user_manager import get_or_create_user, update_user_activity
from bot.keyboards.inline import create_premium_plans_keyboard, create_payment_methods_keyboard

logger = structlog.get_logger(__name__)

router = Router(name="premium")


class PremiumStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è Premium –ø–æ–∫—É–ø–∫–∏"""
    choosing_plan = State()
    choosing_payment_method = State()
    processing_payment = State()


# –¶–µ–Ω—ã –∏ –ø–ª–∞–Ω—ã Premium
PREMIUM_PLANS = {
    SubscriptionPlan.MONTHLY: {
        "name": "–ú–µ—Å—è—á–Ω—ã–π Premium",
        "price_usd": Decimal("3.99"),
        "price_rub": Decimal("399"),
        "duration_days": 30,
        "discount": 0,
        "popular": True
    },
    SubscriptionPlan.QUARTERLY: {
        "name": "–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π Premium", 
        "price_usd": Decimal("9.99"),
        "price_rub": Decimal("999"),
        "duration_days": 90,
        "discount": 16,  # 16% —Å–∫–∏–¥–∫–∞
        "popular": False
    },
    SubscriptionPlan.YEARLY: {
        "name": "–ì–æ–¥–æ–≤–æ–π Premium",
        "price_usd": Decimal("29.99"),
        "price_rub": Decimal("2999"), 
        "duration_days": 365,
        "discount": 37,  # 37% —Å–∫–∏–¥–∫–∞
        "popular": False
    }
}


@router.message(F.text.startswith(("/premium", "üíé")))
async def premium_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ Premium - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–ª–∞–Ω—ã"""
    user_id = message.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await get_or_create_user(
                session=session,
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name
            )
            
            await update_user_activity(session, user, message.message_id)
            await session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å Premium
        if user.is_premium_active:
            await show_premium_status(message, user)
        else:
            await show_premium_plans(message, user, state)
    
    except Exception as e:
        logger.error(f"Error in premium command: {e}", user_id=user_id)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Premium –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


async def show_premium_status(message: Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Premium"""
    days_left = (user.premium_expires_at - datetime.utcnow()).days if user.premium_expires_at else 0
    
    status_text = [
        "üíé <b>Premium –∞–∫—Ç–∏–≤–µ–Ω!</b>",
        "",
        f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.premium_expires_at.strftime('%d.%m.%Y')}",
        f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}",
        f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if user.premium_auto_renew else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}",
        "",
        "üéÅ <b>–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>",
        "‚Ä¢ ‚àû –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        "‚Ä¢ üé¨ 4K –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ",
        "‚Ä¢ üì¶ –ê—Ä—Ö–∏–≤—ã –¥–æ 2GB",
        "‚Ä¢ ‚òÅÔ∏è –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ 30 –¥–Ω–µ–π",
        "‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        "‚Ä¢ üîí –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="premium_stats")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Premium", callback_data="premium_settings")],
        [InlineKeyboardButton(text="üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="premium_referral")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await message.answer("\n".join(status_text), reply_markup=keyboard)


async def show_premium_plans(message: Message, user: User, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã Premium –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    trial_info = ""
    if not user.trial_used and bot_config.trial_enabled:
        trial_info = "\nüéÅ <i>–î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 60 –º–∏–Ω—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</i>"
    
    plans_text = [
        "üíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞ VideoBot Pro</b>",
        "",
        "üöÄ <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>",
        "‚Ä¢ ‚àû –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        "‚Ä¢ üé¨ 4K –∫–∞—á–µ—Å—Ç–≤–æ (–¥–æ 2160p)",
        "‚Ä¢ üì¶ –§–∞–π–ª—ã –¥–æ 500MB",
        "‚Ä¢ ‚òÅÔ∏è –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ 30 –¥–Ω–µ–π", 
        "‚Ä¢ üèÉ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å",
        "‚Ä¢ üîí –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
        "‚Ä¢ üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "",
        "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω:</b>",
        trial_info
    ]
    
    keyboard = create_premium_plans_keyboard(PREMIUM_PLANS)
    
    await message.answer("\n".join(plans_text), reply_markup=keyboard)
    await state.set_state(PremiumStates.choosing_plan)


@router.callback_query(F.data.startswith("premium_plan_"))
async def handle_plan_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ Premium"""
    plan_key = callback.data.replace("premium_plan_", "")
    user_id = callback.from_user.id
    
    if plan_key not in PREMIUM_PLANS:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω", show_alert=True)
        return
    
    plan = PREMIUM_PLANS[plan_key]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    plan_text = [
        f"üíé <b>{plan['name']}</b>",
        "",
        f"üí∞ –¶–µ–Ω–∞: ${plan['price_usd']:.2f} ({plan['price_rub']:.0f}‚ÇΩ)",
        f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {plan['duration_days']} –¥–Ω–µ–π",
    ]
    
    if plan['discount'] > 0:
        plan_text.append(f"üî• –°–∫–∏–¥–∫–∞: {plan['discount']}%")
    
    if plan['popular']:
        plan_text.append("‚≠ê –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–ª–∞–Ω")
    
    plan_text.extend([
        "",
        "üéÅ <b>–í–∫–ª—é—á–µ–Ω–æ –≤ –ø–ª–∞–Ω:</b>",
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        "‚Ä¢ 4K –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ",
        "‚Ä¢ –§–∞–π–ª—ã –¥–æ 500MB",
        "‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ 30 –¥–Ω–µ–π",
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "",
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    ])
    
    keyboard = create_payment_methods_keyboard()
    
    await callback.message.edit_text(
        "\n".join(plan_text),
        reply_markup=keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
    await state.update_data(selected_plan=plan_key)
    await state.set_state(PremiumStates.choosing_payment_method)
    await callback.answer()


@router.callback_query(F.data.startswith("payment_"))
async def handle_payment_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_method = callback.data.replace("payment_", "")
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
    data = await state.get_data()
    plan_key = data.get("selected_plan")
    
    if not plan_key or plan_key not in PREMIUM_PLANS:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
        return
    
    plan = PREMIUM_PLANS[plan_key]
    
    try:
        if payment_method == "telegram":
            await process_telegram_payment(callback, plan_key, plan, state)
        elif payment_method == "stripe":
            await process_stripe_payment(callback, plan_key, plan, state)
        elif payment_method == "crypto":
            await process_crypto_payment(callback, plan_key, plan, state)
        else:
            await callback.answer("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
    
    except Exception as e:
        logger.error(f"Error processing payment method: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


async def process_telegram_payment(callback: CallbackQuery, plan_key: str, plan: Dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Payments"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Telegram Payments
    if not settings.STRIPE_SECRET_KEY:
        await callback.message.edit_text(
            "‚ùå Telegram –ø–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
        )
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = Payment.create_payment(
                user_id=user.id,
                telegram_user_id=user.telegram_id,
                amount=plan["price_usd"],
                subscription_plan=plan_key,
                payment_method=PaymentMethod.TELEGRAM_PAYMENTS,
                currency=Currency.USD,
                source="bot"
            )
            
            session.add(payment)
            await session.commit()
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            await track_payment_event(
                event_type=EventType.PAYMENT_INITIATED,
                user_id=user.id,
                payment_amount=float(plan["price_usd"]),
                payment_method="telegram_payments"
            )
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã
        prices = [LabeledPrice(
            label=plan["name"],
            amount=int(plan["price_usd"] * 100)  # –í –∫–æ–ø–µ–π–∫–∞—Ö
        )]
        
        await callback.message.answer_invoice(
            title=f"Premium –ø–æ–¥–ø–∏—Å–∫–∞ - {plan['name']}",
            description=(
                f"Premium –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {plan['duration_days']} –¥–Ω–µ–π\n"
                "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
                "‚Ä¢ 4K –∫–∞—á–µ—Å—Ç–≤–æ\n"
                "‚Ä¢ –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"
            ),
            payload=f"premium_{payment.payment_id}_{plan_key}",
            provider_token=settings.STRIPE_SECRET_KEY,
            currency="USD",
            prices=prices,
            start_parameter="premium_payment",
            photo_url="https://cdn.videobot.com/premium-logo.jpg",
            photo_width=512,
            photo_height=512
        )
        
        await state.update_data(payment_id=payment.payment_id)
        await state.set_state(PremiumStates.processing_payment)
        
    except Exception as e:
        logger.error(f"Error creating Telegram payment: {e}", user_id=user_id)
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.pre_checkout_query()
async def handle_pre_checkout(pre_checkout_query: PreCheckoutQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
    user_id = pre_checkout_query.from_user.id
    payload = pre_checkout_query.invoice_payload
    
    try:
        # –ü–∞—Ä—Å–∏–º payload
        if not payload.startswith("premium_"):
            await pre_checkout_query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        parts = payload.split("_")
        if len(parts) < 3:
            await pre_checkout_query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        payment_id = parts[1]
        plan_key = parts[2]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ
        async with get_async_session() as session:
            payment = await session.query(Payment).filter(
                Payment.payment_id == payment_id
            ).first()
            
            if not payment:
                await pre_checkout_query.answer(ok=False, error_message="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            if payment.status != PaymentStatus.PENDING:
                await pre_checkout_query.answer(ok=False, error_message="–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                return
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
            payment.mark_as_processing(
                external_payment_id=pre_checkout_query.id,
                provider_response={"pre_checkout_query_id": pre_checkout_query.id}
            )
            await session.commit()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        await pre_checkout_query.answer(ok=True)
        
    except Exception as e:
        logger.error(f"Error in pre-checkout: {e}", user_id=user_id)
        await pre_checkout_query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")


@router.message(F.successful_payment)
async def handle_successful_payment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_info = message.successful_payment
    user_id = message.from_user.id
    payload = payment_info.invoice_payload
    
    try:
        # –ü–∞—Ä—Å–∏–º payload
        parts = payload.split("_")
        payment_id = parts[1]
        plan_key = parts[2]
        plan = PREMIUM_PLANS[plan_key]
        
        async with get_async_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂
            payment = await session.query(Payment).filter(
                Payment.payment_id == payment_id
            ).first()
            
            if not payment:
                await message.answer("–û—à–∏–±–∫–∞: –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.get(User, payment.user_id)
            if not user:
                await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
            payment.complete_payment(
                external_payment_id=payment_info.provider_payment_charge_id,
                fee_amount=Decimal(payment_info.provider_payment_charge_id) * Decimal("0.029"),  # 2.9% –∫–æ–º–∏—Å—Å–∏—è Stripe
                provider_response={
                    "telegram_payment_charge_id": payment_info.telegram_payment_charge_id,
                    "provider_payment_charge_id": payment_info.provider_payment_charge_id,
                    "total_amount": payment_info.total_amount,
                    "currency": payment_info.currency
                }
            )
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º Premium
            user.activate_premium(duration_days=plan["duration_days"])
            
            await session.commit()
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            await track_payment_event(
                event_type=EventType.PAYMENT_COMPLETED,
                user_id=user.id,
                payment_amount=float(payment.amount),
                payment_method="telegram_payments"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        success_text = [
            "üéâ <b>Premium —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>",
            "",
            f"üíé –ü–ª–∞–Ω: {plan['name']}",
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.premium_expires_at.strftime('%d.%m.%Y')}",
            f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: ${payment.amount}",
            "",
            "üéÅ <b>–í–∞—à–∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>",
            "‚Ä¢ ‚àû –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
            "‚Ä¢ üé¨ 4K –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", 
            "‚Ä¢ üì¶ –§–∞–π–ª—ã –¥–æ 500MB",
            "‚Ä¢ ‚òÅÔ∏è –•—Ä–∞–Ω–µ–Ω–∏–µ 30 –¥–Ω–µ–π",
            "‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "",
            "üí° –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!"
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton(text="üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="premium_referral")]
        ])
        
        await message.answer(
            "\n".join(success_text),
            reply_markup=keyboard
        )
        
        await state.clear()
        
        logger.info(
            f"Premium activated successfully",
            user_id=user_id,
            payment_id=payment_id,
            plan=plan_key,
            amount=float(payment.amount)
        )
    
    except Exception as e:
        logger.error(f"Error processing successful payment: {e}", user_id=user_id)
        await message.answer(
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Premium. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


@router.callback_query(F.data == "premium_stats")
async def show_premium_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Premium"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user or not user.is_premium_active:
                await callback.answer("Premium –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = user.stats or {}
            
            stats_text = [
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Premium</b>",
                "",
                f"üíé Premium —Å: {user.premium_started_at.strftime('%d.%m.%Y')}",
                f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.premium_expires_at.strftime('%d.%m.%Y')}",
                "",
                "üìà <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>",
                f"‚Ä¢ –°–∫–∞—á–∞–Ω–æ –≤—Å–µ–≥–æ: {user.downloads_total}",
                f"‚Ä¢ –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: {stats.get('monthly_downloads', 0)}",
                f"‚Ä¢ –û–±—ä–µ–º —Ñ–∞–π–ª–æ–≤: {stats.get('total_size_mb', 0):.1f} MB",
                "",
                "üéØ <b>–ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:</b>"
            ]
            
            platforms = stats.get('platforms', {})
            for platform, count in platforms.items():
                emoji = {"youtube": "üî¥", "tiktok": "üéµ", "instagram": "üì∏"}.get(platform, "üé¨")
                stats_text.append(f"‚Ä¢ {emoji} {platform.title()}: {count}")
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="premium_info")]
            ])
            
            await callback.message.edit_text(
                "\n".join(stats_text),
                reply_markup=keyboard
            )
    
    except Exception as e:
        logger.error(f"Error showing premium stats: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "premium_referral")
async def show_premium_referral(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    user_id = callback.from_user.id
    
    referral_link = f"https://t.me/{callback.bot.username}?start=ref_{user_id}"
    
    referral_text = [
        "üéÅ <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π!</b>",
        "",
        "üí∞ <b>–ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã:</b>",
        "‚Ä¢ 7 –¥–Ω–µ–π Premium –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞",
        "‚Ä¢ –ë–æ–Ω—É—Å—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ Premium –¥—Ä—É–≥–æ–º",
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö",
        "",
        f"üîó <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:</b>",
        f"<code>{referral_link}</code>",
        "",
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user.referrals_count if hasattr(user, 'referrals_count') else 0}"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/share/url?url={referral_link}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="premium_info")]
    ])
    
    await callback.message.edit_text(
        "\n".join(referral_text),
        reply_markup=keyboard
    )
    await callback.answer()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã

async def check_premium_expiry():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö Premium –ø–æ–¥–ø–∏—Å–æ–∫ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)"""
    try:
        async with get_async_session() as session:
            expired_users = await session.query(User).filter(
                User.is_premium == True,
                User.premium_expires_at < datetime.utcnow()
            ).all()
            
            for user in expired_users:
                user.deactivate_premium()
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏
                try:
                    from aiogram import Bot
                    bot = Bot.get_current()
                    await bot.send_message(
                        user.telegram_id,
                        "‚è∞ –í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n\n"
                        "üíé –ü—Ä–æ–¥–ª–∏—Ç—å Premium –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /premium"
                    )
                except Exception:
                    pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            
            await session.commit()
            
            if expired_users:
                logger.info(f"Deactivated {len(expired_users)} expired Premium subscriptions")
    
    except Exception as e:
        logger.error(f"Error checking premium expiry: {e}")


async def process_stripe_payment(callback: CallbackQuery, plan_key: str, plan: Dict, state: FSMContext):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Stripe –ø–ª–∞—Ç–µ–∂–µ–π"""
    await callback.message.edit_text(
        "üí≥ <b>Stripe –ø–ª–∞—Ç–µ–∂–∏</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ Telegram –ø–ª–∞—Ç–µ–∂–∏."
    )


async def process_crypto_payment(callback: CallbackQuery, plan_key: str, plan: Dict, state: FSMContext):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ –ø–ª–∞—Ç–µ–∂–µ–π"""
    await callback.message.edit_text(
        "‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ Telegram –ø–ª–∞—Ç–µ–∂–∏."
    )