"""
VideoBot Pro - Message Builder
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
"""

from typing import Optional, Dict, Any, List
from datetime import datetime, timedelta


def build_welcome_message(
    user_name: str,
    user_type: str,
    is_new: bool = False
) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    Args:
        user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_type: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_new: –ù–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
    Returns:
        –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    """
    if is_new:
        message = f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n"
        message += "üé¨ <b>VideoBot Pro</b> - –ª—É—á—à–∏–π –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ!\n\n"
        message += "üì± <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b>\n"
        message += "‚Ä¢ YouTube Shorts\n"
        message += "‚Ä¢ TikTok\n"
        message += "‚Ä¢ Instagram Reels\n\n"
        message += "üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!"
        
        if user_type == "free":
            message += "\n\nüéÅ –£ –≤–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 60 –º–∏–Ω—É—Ç!"
    else:
        message = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}!\n\n"
        
        if user_type == "premium":
            message += "üíé –í–∞—à Premium —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω\n"
        elif user_type == "trial":
            message += "üî• –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω\n"
        else:
            message += "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
        
        message += "\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
    
    return message


def build_status_message(user_stats: Dict[str, Any]) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
    """
    lines = ["üìä <b>–í–∞—à —Å—Ç–∞—Ç—É—Å</b>\n"]
    
    # –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
    user_type_emoji = {
        "free": "üÜì",
        "trial": "üî•",
        "premium": "üíé",
        "admin": "üëë"
    }
    emoji = user_type_emoji.get(user_stats['user_type'], "üë§")
    lines.append(f"{emoji} –¢–∏–ø: {user_stats['user_type'].title()}")
    
    # –õ–∏–º–∏—Ç—ã
    if user_stats['daily_limit'] < 999:
        lines.append(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_stats['downloads_today']}/{user_stats['daily_limit']}")
    else:
        lines.append(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user_stats['downloads_today']} (–±–µ–∑ –ª–∏–º–∏—Ç–∞)")
    
    lines.append(f"üìä –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ: {user_stats.get('total_downloads', 0)}")
    
    # Trial –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if user_stats.get('trial_active'):
        remaining = user_stats.get('trial_remaining')
        if remaining:
            hours = int(remaining.total_seconds() // 3600)
            minutes = int((remaining.total_seconds() % 3600) // 60)
            lines.append(f"‚è∞ Trial: {hours}—á {minutes}–º")
    
    # Premium –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if user_stats.get('premium_active'):
        expires = user_stats.get('premium_remaining')
        if expires:
            days = expires.days
            lines.append(f"üíé Premium: {days} –¥–Ω–µ–π")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if user_stats.get('is_banned'):
        lines.append("\n‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    elif not user_stats.get('can_download'):
        lines.append("\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç")
    
    return "\n".join(lines)


def build_error_message(
    error_type: str,
    context: Optional[Dict[str, Any]] = None
) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    
    Args:
        error_type: –¢–∏–ø –æ—à–∏–±–∫–∏
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        
    Returns:
        –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
    """
    messages = {
        "invalid_url": "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ YouTube Shorts, TikTok –∏ Instagram Reels.",
        "platform_not_supported": "‚ùå –≠—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YouTube, TikTok –∏–ª–∏ Instagram.",
        "daily_limit_exceeded": "‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–≥—Ä—É–∑–æ–∫ ({limit}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ Premium.",
        "file_too_large": "üì¶ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size}MB",
        "download_failed": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.",
        "subscription_required": "üîí –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.",
        "premium_required": "üíé –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        "banned": "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}",
        "maintenance": "üîß –ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "rate_limit": "‚ö° –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds} —Å–µ–∫—É–Ω–¥.",
        "network_error": "üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "general": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    }
    
    base_message = messages.get(error_type, messages["general"])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å
    if context:
        try:
            base_message = base_message.format(**context)
        except KeyError:
            pass
    
    return base_message


def build_success_message(
    action: str,
    context: Optional[Dict[str, Any]] = None
) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
    
    Args:
        action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç
        
    Returns:
        –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    messages = {
        "download_started": "‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...\nüìπ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\nüîó ID: {video_id}",
        "download_completed": "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìÅ –†–∞–∑–º–µ—Ä: {size}\n‚è± –í—Ä–µ–º—è: {duration}—Å",
        "batch_created": "üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\nüìä –§–∞–π–ª–æ–≤: {count}\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...",
        "trial_activated": "üéâ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n‚è∞ –î–æ—Å—Ç—É–ø–Ω–æ: 60 –º–∏–Ω—É—Ç\nüöÄ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏",
        "premium_activated": "üíé Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires}\n‚ú® –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã",
        "settings_saved": "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
        "subscription_verified": "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã. –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç!"
    }
    
    base_message = messages.get(action, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    if context:
        try:
            base_message = base_message.format(**context)
        except KeyError:
            pass
    
    return base_message


def format_file_size(size_bytes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    
    Args:
        size_bytes: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes / (1024 * 1024):.1f} MB"
    else:
        return f"{size_bytes / (1024 * 1024 * 1024):.2f} GB"


def format_duration(seconds: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    
    Args:
        seconds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if seconds < 60:
        return f"{seconds}—Å"
    elif seconds < 3600:
        minutes = seconds // 60
        secs = seconds % 60
        return f"{minutes}–º {secs}—Å"
    else:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours}—á {minutes}–º"


def build_download_progress_message(
    progress: float,
    speed: Optional[float] = None,
    eta: Optional[int] = None
) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    
    Args:
        progress: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
        speed: –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞–π—Ç–∞—Ö/—Å–µ–∫
        eta: –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        –¢–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    filled = int(progress / 10)
    bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
    
    message = f"üì• –ó–∞–≥—Ä—É–∑–∫–∞: {bar} {progress:.1f}%"
    
    if speed:
        message += f"\n‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {format_file_size(int(speed))}/—Å"
    
    if eta:
        message += f"\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: {format_duration(eta)}"
    
    return message


def build_batch_summary_message(
    total_files: int,
    successful: int,
    failed: int,
    total_size: int,
    total_time: int
) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    
    Args:
        total_files: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        successful: –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        failed: –û—à–∏–±–∫–∏
        total_size: –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä
        total_time: –û–±—â–µ–µ –≤—Ä–µ–º—è
        
    Returns:
        –¢–µ–∫—Å—Ç –∏—Ç–æ–≥–æ–≤
    """
    lines = ["üìä <b>–ò—Ç–æ–≥–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏</b>\n"]
    
    lines.append(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    lines.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
    
    if failed > 0:
        lines.append(f"‚ùå –û—à–∏–±–∫–∏: {failed}")
    
    lines.append(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {format_file_size(total_size)}")
    lines.append(f"‚è± –í—Ä–µ–º—è: {format_duration(total_time)}")
    
    # –°—Ç–∞—Ç—É—Å
    if failed == 0:
        lines.append("\n‚ú® –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    elif successful > 0:
        lines.append(f"\n‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {successful} –∏–∑ {total_files} —Ñ–∞–π–ª–æ–≤")
    else:
        lines.append("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã")
    
    return "\n".join(lines)


def build_subscription_check_message(
    channels: List[Dict[str, Any]],
    subscribed: List[str],
    missing: List[str]
) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    
    Args:
        channels: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        subscribed: –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        missing: –ù–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        
    Returns:
        –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if not missing:
        return "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã!"
    
    lines = ["üì¢ <b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n"]
    
    for channel in channels:
        channel_id = channel.get('channel_id', '')
        channel_name = channel.get('channel_name', '–ö–∞–Ω–∞–ª')
        
        if channel_id in subscribed:
            lines.append(f"‚úÖ {channel_name}")
        else:
            lines.append(f"‚ùå {channel_name}")
    
    lines.append(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(subscribed)}/{len(channels)}")
    lines.append("\nüí° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'")
    
    return "\n".join(lines)


def build_premium_info_message(
    plan_name: str,
    price: float,
    duration_days: int,
    features: List[str]
) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ Premium –ø–ª–∞–Ω–µ
    
    Args:
        plan_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        price: –¶–µ–Ω–∞
        duration_days: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
        features: –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        
    Returns:
        –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    lines = [f"üíé <b>{plan_name}</b>\n"]
    
    lines.append(f"üí∞ –¶–µ–Ω–∞: ${price:.2f}")
    lines.append(f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_days} –¥–Ω–µ–π")
    lines.append(f"üíµ –¶–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å: ${price/duration_days:.2f}")
    
    lines.append("\nüéØ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>")
    for feature in features:
        lines.append(f"‚Ä¢ {feature}")
    
    return "\n".join(lines)


def build_admin_user_info_message(user_data: Dict[str, Any]) -> str:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    
    Args:
        user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    lines = ["üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n"]
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    lines.append(f"üÜî ID: {user_data.get('telegram_id')}")
    lines.append(f"üìù Username: @{user_data.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
    lines.append(f"üë§ –ò–º—è: {user_data.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
    lines.append(f"üìä –¢–∏–ø: {user_data.get('user_type', 'free')}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    lines.append("\nüìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>")
    lines.append(f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    lines.append(f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data.get('last_active', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    lines.append(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: {user_data.get('total_downloads', 0)}")
    lines.append(f"‚Ä¢ –ó–∞–≥—Ä—É–∑–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {user_data.get('downloads_today', 0)}")
    
    # –§–∏–Ω–∞–Ω—Å—ã
    if user_data.get('total_spent', 0) > 0:
        lines.append(f"\nüí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>")
        lines.append(f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${user_data.get('total_spent', 0):.2f}")
        lines.append(f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π: {user_data.get('payments_count', 0)}")
    
    # –°—Ç–∞—Ç—É—Å
    lines.append("\nüîê <b>–°—Ç–∞—Ç—É—Å:</b>")
    if user_data.get('is_banned'):
        lines.append("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        if user_data.get('ban_reason'):
            lines.append(f"–ü—Ä–∏—á–∏–Ω–∞: {user_data['ban_reason']}")
    else:
        lines.append("‚úÖ –ê–∫—Ç–∏–≤–µ–Ω")
    
    if user_data.get('is_premium'):
        lines.append(f"üíé Premium –¥–æ: {user_data.get('premium_expires')}")
    
    return "\n".join(lines)
    