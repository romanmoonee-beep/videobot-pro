#!/usr/bin/env python3
"""
VideoBot Pro - Database Migration Script (Fixed Version)
–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç—ã
try:
    from alembic.config import Config
    from alembic import command
    from sqlalchemy import create_engine, text
    from sqlalchemy.exc import OperationalError
    import asyncpg
except ImportError as e:
    print(f"‚ùå Missing required dependency: {e}")
    print("Please install: pip install alembic asyncpg")
    sys.exit(1)

try:
    from shared.config.settings import settings
    from shared.models import Base
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("Make sure you're in the project root directory")
    sys.exit(1)


def create_database_if_not_exists():
    """–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ë–î
        db_url = settings.get_database_url(async_driver=False)
        admin_url = db_url.replace('/videobot', '/postgres')
        
        engine = create_engine(admin_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ë–î
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1 FROM pg_database WHERE datname = 'videobot'"))
            exists = result.fetchone() is not None
            
            if not exists:
                print("Creating database 'videobot'...")
                conn.execute(text("COMMIT"))
                conn.execute(text("CREATE DATABASE videobot"))
                print("Database 'videobot' created successfully!")
            else:
                print("Database 'videobot' already exists.")
                
        engine.dispose()
        return True
        
    except OperationalError as e:
        print(f"Error creating database: {e}")
        print("Please ensure PostgreSQL is running and accessible.")
        return False
    except Exception as e:
        print(f"Unexpected error: {e}")
        return False


async def create_tables_async():
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    print("Creating tables directly (async)...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        db_url = settings.get_database_url()
        
        # –ü–∞—Ä—Å–∏–º URL –¥–ª—è asyncpg
        if db_url.startswith('postgresql+asyncpg://'):
            db_url = db_url.replace('postgresql+asyncpg://', 'postgresql://')
        
        print(f"Connecting to: {db_url}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(db_url)
        print("‚úÖ Connected to database")
        
        # –ü–æ–ª—É—á–∞–µ–º DDL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        from sqlalchemy import create_engine
        from sqlalchemy.schema import CreateTable
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DDL
        temp_engine = create_engine(settings.get_database_url(async_driver=False))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables_created = []
        for table_name, table in Base.metadata.tables.items():
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CREATE TABLE –∫–æ–º–∞–Ω–¥—É
                create_ddl = str(CreateTable(table).compile(temp_engine))
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                await conn.execute(create_ddl)
                tables_created.append(table_name)
                print(f"‚úÖ Created table: {table_name}")
                
            except asyncpg.exceptions.DuplicateTableError:
                print(f"‚ö†Ô∏è  Table {table_name} already exists, skipping")
            except Exception as e:
                print(f"‚ùå Error creating table {table_name}: {e}")
        
        temp_engine.dispose()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await conn.close()
        print(f"‚úÖ Database setup completed! Created {len(tables_created)} tables.")
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating tables: {e}")
        import traceback
        traceback.print_exc()
        return False


def create_tables_sync():
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    print("Creating tables directly (sync)...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
        db_url = settings.get_database_url(async_driver=False)
        engine = create_engine(db_url, echo=True)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(engine)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
            """))
            tables = [row[0] for row in result.fetchall()]
            
        engine.dispose()
        
        print(f"‚úÖ Database setup completed! Tables: {', '.join(tables)}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating tables: {e}")
        import traceback
        traceback.print_exc()
        return False


def init_alembic():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Alembic"""
    migrations_dir = project_root / "migrations"
    
    if not migrations_dir.exists():
        print("Initializing Alembic...")
        alembic_cfg = Config("alembic.ini")
        command.init(alembic_cfg, "migrations")
        print("Alembic initialized!")


def create_initial_migration():
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
    alembic_cfg = Config("alembic.ini")
    
    versions_dir = project_root / "migrations" / "versions"
    if versions_dir.exists() and any(versions_dir.glob("*.py")):
        print("Migrations already exist. Skipping initial migration creation.")
        return
    
    print("Creating initial migration...")
    command.revision(alembic_cfg, autogenerate=True, message="Initial migration")
    print("Initial migration created!")


def apply_migrations():
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("Applying migrations...")
    alembic_cfg = Config("alembic.ini")
    command.upgrade(alembic_cfg, "head")
    print("Migrations applied successfully!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="VideoBot Pro Database Migration Tool (Fixed)")
    parser.add_argument(
        "--mode", 
        choices=["full", "direct", "sync", "async", "migrate-only"], 
        default="sync",
        help="Migration mode: sync (recommended), async, full, direct, migrate-only"
    )
    
    args = parser.parse_args()
    
    print("üöÄ VideoBot Pro - Database Setup (Fixed)")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–µ–º –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not create_database_if_not_exists():
        print("‚ùå Failed to create database. Exiting.")
        sys.exit(1)
    
    success = False
    
    if args.mode == "sync":
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        success = create_tables_sync()
        
    elif args.mode == "async":
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        success = asyncio.run(create_tables_async())
        
    elif args.mode == "direct":
        # –ü—Ä–æ–±—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –∑–∞—Ç–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        success = create_tables_sync()
        if not success:
            print("Trying async method...")
            success = asyncio.run(create_tables_async())
            
    elif args.mode == "full":
        # –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –º–∏–≥—Ä–∞—Ü–∏—è–º–∏
        try:
            init_alembic()
            create_initial_migration()
            apply_migrations()
            success = True
            print("‚úÖ Database setup completed (full mode)!")
            
        except Exception as e:
            print(f"‚ùå Error during migration setup: {e}")
            print("Trying direct table creation...")
            success = create_tables_sync()
    
    elif args.mode == "migrate-only":
        # –¢–æ–ª—å–∫–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
        try:
            apply_migrations()
            success = True
            print("‚úÖ Migrations applied successfully!")
        except Exception as e:
            print(f"‚ùå Error applying migrations: {e}")
            sys.exit(1)
    
    if success:
        print("\nüìã Next steps:")
        print("1. Configure your .env file with bot token and settings")
        print("2. Run: python -m bot.main")
        print("3. Start using VideoBot Pro!")
    else:
        print("‚ùå Database setup failed. Check the errors above.")
        sys.exit(1)


if __name__ == "__main__":
    main()