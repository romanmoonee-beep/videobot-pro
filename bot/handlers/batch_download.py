"""
VideoBot Pro - Batch Download Handler
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ
"""

import asyncio
import re
import structlog
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from shared.config.database import get_async_session
from shared.models import User, DownloadBatch, DownloadTask, EventType, Platform
from shared.models.analytics import track_download_event
from bot.config import bot_config, get_message, MessageType
from bot.utils.user_manager import get_or_create_user, update_user_activity
from bot.utils.url_extractor import extract_video_urls, validate_url, detect_platform
from bot.utils.subscription_checker import check_required_subscriptions
from bot.keyboards.inline import create_batch_options_keyboard, create_batch_selection_keyboard
from bot.middlewares.rate_limit import rate_limit
from worker.tasks.batch_tasks import process_batch_download

logger = structlog.get_logger(__name__)

router = Router(name="batch_download")


class BatchDownloadStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è batch —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    waiting_for_urls = State()
    selecting_files = State()
    choosing_delivery = State()


@router.message(F.text.regexp(r'https?://'))
@rate_limit(requests_per_minute=10)
async def handle_urls_message(message: Message, state: FSMContext):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å URL
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    user_id = message.from_user.id
    message_text = message.text or message.caption or ""
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        urls = extract_video_urls(message_text)
        
        if not urls:
            await message.answer(get_message(MessageType.ERROR, "invalid_url"))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if len(urls) > bot_config.limits.max_batch_size:
            await message.answer(
                f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º {bot_config.limits.max_batch_size} —Å—Å—ã–ª–æ–∫ –∑–∞ —Ä–∞–∑! "
                f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {len(urls)}."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with get_async_session() as session:
            user = await get_or_create_user(
                session=session,
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞—á–∏–≤–∞—Ç—å
            if not await can_user_download(user, len(urls)):
                await handle_download_restrictions(message, user, len(urls))
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if user.current_user_type in ["free"] and bot_config.required_subs_enabled:
                subscription_status = await check_required_subscriptions(user_id)
                if not subscription_status["all_subscribed"]:
                    await handle_subscription_required(message, subscription_status)
                    return
            
            await update_user_activity(session, user, message.message_id)
            await session.commit()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if len(urls) == 1:
            # –û–¥–Ω–∞ —Å—Å—ã–ª–∫–∞ - —Å—Ä–∞–∑—É —Å–∫–∞—á–∏–≤–∞–µ–º
            await process_single_download(message, urls[0], user)
        elif len(urls) <= 4:
            # 2-4 —Å—Å—ã–ª–∫–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —á–∞—Ç
            await process_small_batch(message, urls, user)
        else:
            # 5+ —Å—Å—ã–ª–æ–∫ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
            await process_large_batch(message, urls, user, state)
    
    except Exception as e:
        logger.error(f"Error processing URLs: {e}", user_id=user_id)
        await message.answer(get_message(MessageType.ERROR, "general"))


async def can_user_download(user: User, urls_count: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞—á–∏–≤–∞—Ç—å"""
    if not user.can_download:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    if not user.can_download_today():
        return False
    
    # –î–ª—è batch –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –ª–∏–º–∏—Ç
    daily_limit = bot_config.get_user_daily_limit(user.current_user_type)
    if daily_limit < 999 and (user.downloads_today + urls_count) > daily_limit:
        return False
    
    return True


async def handle_download_restrictions(message: Message, user: User, urls_count: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    if user.is_banned or user.is_temp_banned:
        ban_message = "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        if user.banned_until:
            ban_message += f"\n–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ: {user.banned_until.strftime('%d.%m.%Y %H:%M')}"
        await message.answer(ban_message)
        return
    
    if not user.can_download_today():
        daily_limit = bot_config.get_user_daily_limit(user.current_user_type)
        await message.answer(
            get_message(
                MessageType.ERROR,
                "daily_limit_exceeded",
                limit=daily_limit
            )
        )
        return
    
    # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ batch'–µ–º
    remaining = bot_config.get_user_daily_limit(user.current_user_type) - user.downloads_today
    await message.answer(
        f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {remaining}\n"
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å: {urls_count}\n\n"
        f"üíé Premium: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!"
    )


async def handle_subscription_required(message: Message, subscription_status: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫"""
    from bot.handlers.subscription_check import show_subscription_check
    await show_subscription_check(message, subscription_status)


async def process_single_download(message: Message, url: str, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º URL
    if not validate_url(url):
        await message.answer(get_message(MessageType.ERROR, "invalid_url"))
        return
    
    platform = detect_platform(url)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer(
        get_message(MessageType.PROCESSING, "analyzing")
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º batch —Å –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
        async with get_async_session() as session:
            batch = await create_download_batch(
                session=session,
                user=user,
                urls=[url],
                delivery_method="individual"
            )
            await session.commit()
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            await track_download_event(
                event_type=EventType.DOWNLOAD_STARTED,
                user_id=user.id,
                platform=platform,
                event_data={"batch_id": batch.id, "urls_count": 1}
            )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
        task = process_batch_download.delay(batch.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_msg.edit_text(
            "‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...\n"
            f"üîó –°—Å—ã–ª–∫–∞: {platform.title()}\n"
            f"üìä Batch ID: {batch.batch_id}"
        )
        
        logger.info(
            f"Single download started",
            user_id=user.telegram_id,
            batch_id=batch.id,
            platform=platform,
            celery_task_id=task.id
        )
    
    except Exception as e:
        logger.error(f"Error starting single download: {e}")
        await processing_msg.edit_text(get_message(MessageType.ERROR, "general"))


async def process_small_batch(message: Message, urls: List[str], user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ batch (2-4 —Å—Å—ã–ª–∫–∏)"""
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
    analysis_msg = await message.answer(
        f"üì• –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(urls)}\n\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
    )
    
    # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    platforms_count = {}
    valid_urls = []
    
    for url in urls:
        if validate_url(url):
            platform = detect_platform(url)
            platforms_count[platform] = platforms_count.get(platform, 0) + 1
            valid_urls.append(url)
    
    if not valid_urls:
        await analysis_msg.edit_text(get_message(MessageType.ERROR, "invalid_url"))
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    preview_lines = [f"üì• –ì–æ—Ç–æ–≤–æ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {len(valid_urls)}/{len(urls)}"]
    for platform, count in platforms_count.items():
        emoji = {"youtube": "üî¥", "tiktok": "üéµ", "instagram": "üì∏"}.get(platform, "üé¨")
        preview_lines.append(f"{emoji} {platform.title()}: {count}")
    
    preview_lines.append(f"\n‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—é –≤ —á–∞—Ç")
    preview_lines.append(f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ~{len(valid_urls) * 15}MB")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨áÔ∏è –ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ", callback_data=f"confirm_small_batch")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_batch")]
    ])
    
    await analysis_msg.edit_text(
        "\n".join(preview_lines),
        reply_markup=keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.bot.session.set(f"batch_urls_{message.from_user.id}", {
        "urls": valid_urls,
        "user_id": user.id,
        "delivery_method": "individual"
    })


async def process_large_batch(message: Message, urls: List[str], user: User, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ batch (5+ —Å—Å—ã–ª–æ–∫)"""
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
    analysis_msg = await message.answer(
        f"üì• –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(urls)}\n\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."
    )
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ URL
    valid_urls = []
    invalid_count = 0
    platforms_stats = {}
    
    for url in urls:
        if validate_url(url):
            platform = detect_platform(url)
            platforms_stats[platform] = platforms_stats.get(platform, 0) + 1
            valid_urls.append({
                "url": url,
                "platform": platform,
                "selected": True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã
            })
        else:
            invalid_count += 1
    
    if not valid_urls:
        await analysis_msg.edit_text(get_message(MessageType.ERROR, "invalid_url"))
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    choice_text = [
        f"üì• –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(valid_urls)}",
        f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö: {invalid_count}" if invalid_count > 0 else "",
        "",
        "ü§î –ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã?",
        "",
        f"üìä –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ~{len(valid_urls) * 20}MB"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    if platforms_stats:
        choice_text.append("\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:")
        for platform, count in platforms_stats.items():
            emoji = {"youtube": "üî¥", "tiktok": "üéµ", "instagram": "üì∏"}.get(platform, "üé¨")
            choice_text.append(f"‚Ä¢ {emoji} {platform.title()}: {count}")
    
    keyboard = create_batch_options_keyboard(len(valid_urls))
    
    await analysis_msg.edit_text(
        "\n".join([line for line in choice_text if line]),
        reply_markup=keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.set_state(BatchDownloadStates.choosing_delivery)
    await state.update_data({
        "urls": valid_urls,
        "user_id": user.id,
        "platforms_stats": platforms_stats,
        "original_message_id": analysis_msg.message_id
    })


@router.callback_query(F.data.startswith("batch_"))
async def handle_batch_callbacks(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–π"""
    action = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id
    
    try:
        if action == "individual":
            await handle_individual_delivery(callback, state)
        elif action == "archive":
            await handle_archive_delivery(callback, state)
        elif action == "selective":
            await handle_selective_delivery(callback, state)
        elif action == "cancel":
            await handle_cancel_batch(callback, state)
        elif action.startswith("confirm"):
            await handle_confirm_batch(callback, state)
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    except Exception as e:
        logger.error(f"Error in batch callback: {e}", user_id=user_id)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def handle_individual_delivery(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É"""
    data = await state.get_data()
    urls_data = data.get("urls", [])
    user_id = data.get("user_id")
    
    await callback.message.edit_text(
        f"üì± <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç –ø–æ –æ–¥–Ω–æ–º—É</b>\n\n"
        f"üìÅ –§–∞–π–ª–æ–≤: {len(urls_data)}\n"
        f"‚ö° –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
        reply_markup=None
    )
    
    # –°–æ–∑–¥–∞–µ–º batch
    await create_and_start_batch(
        callback.message,
        urls_data,
        user_id,
        delivery_method="individual"
    )
    
    await state.clear()
    await callback.answer()


async def handle_archive_delivery(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–æ–º"""
    data = await state.get_data()
    urls_data = data.get("urls", [])
    user_id = data.get("user_id")
    
    await callback.message.edit_text(
        f"üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞</b>\n\n"
        f"üìÅ –§–∞–π–ª–æ–≤: {len(urls_data)}\n"
        f"üåê –î–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ CDN\n"
        f"‚è∞ –î–æ—Å—Ç—É–ø–µ–Ω 24 —á–∞—Å–∞\n\n"
        f"‚ö° –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
        reply_markup=None
    )
    
    # –°–æ–∑–¥–∞–µ–º batch —Å –∞—Ä—Ö–∏–≤–æ–º
    await create_and_start_batch(
        callback.message,
        urls_data,
        user_id,
        delivery_method="archive"
    )
    
    await state.clear()
    await callback.answer("–°–æ–∑–¥–∞—é ZIP –∞—Ä—Ö–∏–≤...")


async def handle_selective_delivery(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–æ—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏"""
    data = await state.get_data()
    urls_data = data.get("urls", [])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    keyboard = create_batch_selection_keyboard(urls_data)
    
    selection_text = [
        f"‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã ({sum(1 for u in urls_data if u['selected'])}/{len(urls_data)})</b>",
        "",
        "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ:"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    for i, url_data in enumerate(urls_data[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        status = "‚úÖ" if url_data["selected"] else "‚ùå"
        platform = url_data["platform"].title()
        emoji = {"Youtube": "üî¥", "Tiktok": "üéµ", "Instagram": "üì∏"}.get(platform, "üé¨")
        selection_text.append(f"{status} {i}. {emoji} {platform}")
    
    if len(urls_data) > 10:
        selection_text.append(f"... –∏ –µ—â–µ {len(urls_data) - 10}")
    
    await callback.message.edit_text(
        "\n".join(selection_text),
        reply_markup=keyboard
    )
    
    await state.set_state(BatchDownloadStates.selecting_files)
    await callback.answer()


async def handle_cancel_batch(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ batch –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )
    
    await state.clear()
    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


async def create_download_batch(session, user: User, urls: List[str], 
                               delivery_method: str = "individual") -> DownloadBatch:
    """–°–æ–∑–¥–∞–Ω–∏–µ batch –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    from uuid import uuid4
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π batch_id
    batch_id = f"batch_{uuid4().hex[:12]}"
    
    # –°–æ–∑–¥–∞–µ–º batch
    batch = DownloadBatch(
        user_id=user.id,
        telegram_user_id=user.telegram_id,
        batch_id=batch_id,
        urls=urls,
        total_urls=len(urls),
        delivery_method=delivery_method,
        send_to_chat=(delivery_method == "individual"),
        create_archive=(delivery_method == "archive"),
        user_message_id=None,  # –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        priority=10 if user.current_user_type == "admin" else 5
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    retention_hours = bot_config.get_user_limits(user.current_user_type)
    if hasattr(retention_hours, '__getitem__'):
        hours = 24  # default fallback
    else:
        hours = retention_hours
    batch.set_expiration(hours)
    
    session.add(batch)
    await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URL
    for i, url in enumerate(urls):
        task = DownloadTask.create_from_url(
            url=url,
            user_id=user.id,
            telegram_user_id=user.telegram_id,
            batch_id=batch.id,
            order_in_batch=i,
            priority=batch.priority
        )
        session.add(task)
    
    return batch


async def create_and_start_batch(message: Message, urls_data: List[Dict], 
                                user_id: int, delivery_method: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ batch –∑–∞–¥–∞—á–∏"""
    try:
        async with get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.get(User, user_id)
            if not user:
                await message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ URL
            urls = [item["url"] if isinstance(item, dict) else item for item in urls_data]
            
            # –°–æ–∑–¥–∞–µ–º batch
            batch = await create_download_batch(
                session=session,
                user=user,
                urls=urls,
                delivery_method=delivery_method
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.increment_downloads(len(urls))
            
            await session.commit()
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            await track_download_event(
                event_type=EventType.BATCH_CREATED,
                user_id=user.id,
                platform="mixed",
                value=len(urls),
                event_data={
                    "batch_id": batch.id,
                    "delivery_method": delivery_method
                }
            )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        task = process_batch_download.delay(batch.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        progress_text = [
            f"‚úÖ <b>Batch —Å–æ–∑–¥–∞–Ω</b>",
            f"üìã ID: {batch.batch_id}",
            f"üìÅ –§–∞–π–ª–æ–≤: {len(urls)}",
            f"üöÄ –ú–µ—Ç–æ–¥: {delivery_method}",
            "",
            f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...",
            f"üìä –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏"
        ]
        
        await message.edit_text("\n".join(progress_text))
        
        logger.info(
            f"Batch created and started",
            user_id=user.telegram_id,
            batch_id=batch.id,
            urls_count=len(urls),
            delivery_method=delivery_method,
            celery_task_id=task.id
        )
    
    except Exception as e:
        logger.error(f"Error creating batch: {e}")
        await message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )