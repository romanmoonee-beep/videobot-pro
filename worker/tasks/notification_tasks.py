"""
VideoBot Pro - Notification Tasks (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–ó–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import structlog
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from celery import current_task
from sqlalchemy import text

from worker.celery_app import celery_app
from worker.tasks.base import async_task_wrapper

logger = structlog.get_logger(__name__)

@celery_app.task(bind=True, name="notifications.send_download_completion")
def send_download_completion_notification(self, task_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    """
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            return loop.run_until_complete(_send_download_notification_async(task_id))
        finally:
            loop.close()
    except Exception as e:
        logger.error(f"Error sending download notification: {e}")
        raise

async def _send_download_notification_async(task_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ"""
    try:
        from shared.config.database import get_async_session
        
        async with get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            task_result = await session.execute(
                text("""
                SELECT dt.*, u.telegram_id, u.notification_settings
                FROM download_tasks dt
                JOIN users u ON dt.user_id = u.id
                WHERE dt.id = :task_id
                """),
                {'task_id': task_id}
            )
            task_data = task_result.fetchone()
            
            if not task_data:
                logger.warning(f"Download task {task_id} not found")
                return {"error": "Task not found"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_settings = getattr(task_data, 'notification_settings', {}) or {}
            if not notification_settings.get('download_complete', True):
                return {"skipped": "User disabled notifications"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if getattr(task_data, 'status', None) == 'completed':
                message = await _format_success_message(task_data)
            else:
                message = await _format_error_message(task_data)
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            logger.info(f"Would send notification to user {task_data.telegram_id}: {message}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await session.execute(
                text("UPDATE download_tasks SET notification_sent = true WHERE id = :task_id"),
                {'task_id': task_id}
            )
            await session.commit()
            
            return {"sent": True, "user_id": task_data.telegram_id}
                
    except Exception as e:
        logger.error(f"Error in download notification: {e}")
        raise

async def _format_success_message(task_data) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ"""
    message_parts = [
        "‚úÖ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>",
        ""
    ]
    
    video_title = getattr(task_data, 'video_title', None)
    if video_title:
        title = video_title[:50] + "..." if len(video_title) > 50 else video_title
        message_parts.append(f"üìù <b>{title}</b>")
    
    platform = getattr(task_data, 'platform', None)
    if platform:
        platform_emoji = {"youtube": "üî¥", "tiktok": "‚ö´", "instagram": "üü£"}.get(platform, "üé¨")
        message_parts.append(f"{platform_emoji} –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.title()}")
    
    cdn_url = getattr(task_data, 'cdn_url', None)
    if cdn_url:
        message_parts.extend([
            "",
            "üì• –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!"
        ])
    
    return "\n".join(message_parts)

async def _format_error_message(task_data) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    message_parts = [
        "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</b>",
        ""
    ]
    
    platform = getattr(task_data, 'platform', None)
    if platform:
        platform_emoji = {"youtube": "üî¥", "tiktok": "‚ö´", "instagram": "üü£"}.get(platform, "üé¨")
        message_parts.append(f"{platform_emoji} –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.title()}")
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    error_msg = _get_user_friendly_error(getattr(task_data, 'error_message', None) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    message_parts.extend([
        f"üí¨ {error_msg}",
        "",
        "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>",
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
        "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
        "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
    ])
    
    return "\n".join(message_parts)

def _get_user_friendly_error(error_message: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤ –ø–æ–Ω—è—Ç–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not error_message:
        return "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
        
    error_lower = error_message.lower()
    
    if 'video unavailable' in error_lower or 'private' in error_lower:
        return "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ"
    elif 'age restricted' in error_lower:
        return "–í–∏–¥–µ–æ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
    elif 'geo blocked' in error_lower:
        return "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ"
    elif 'network' in error_lower or 'timeout' in error_lower:
        return "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"
    elif 'file too large' in error_lower:
        return "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"
    elif 'format not available' in error_lower:
        return "–ù—É–∂–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    else:
        return "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"

@celery_app.task(bind=True, name="notifications.send_batch_completion")
def send_batch_completion_notification(self, batch_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ batch –∑–∞–≥—Ä—É–∑–∫–∏
    
    Args:
        batch_id: ID batch'–∞
    """
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            return loop.run_until_complete(_send_batch_notification_async(batch_id))
        finally:
            loop.close()
    except Exception as e:
        logger.error(f"Error sending batch notification: {e}")
        raise

async def _send_batch_notification_async(batch_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ batch"""
    try:
        from shared.config.database import get_async_session
        
        async with get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ batch
            batch_result = await session.execute(
                text("""
                SELECT db.*, u.telegram_id, u.notification_settings
                FROM download_batches db
                JOIN users u ON db.user_id = u.id
                WHERE db.id = :batch_id
                """),
                {'batch_id': batch_id}
            )
            batch_data = batch_result.fetchone()
            
            if not batch_data:
                logger.warning(f"Download batch {batch_id} not found")
                return {"error": "Batch not found"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notification_settings = getattr(batch_data, 'notification_settings', {}) or {}
            if not notification_settings.get('download_complete', True):
                return {"skipped": "User disabled notifications"}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á –≤ batch
            tasks_stats = await session.execute(
                text("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed,
                    COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed
                FROM download_tasks 
                WHERE batch_id = :batch_id
                """),
                {'batch_id': batch_id}
            )
            stats = tasks_stats.fetchone()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await _format_batch_message(batch_data, stats)
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            logger.info(f"Would send batch notification to user {batch_data.telegram_id}: {message}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await session.execute(
                text("UPDATE download_batches SET notification_sent = true WHERE id = :batch_id"),
                {'batch_id': batch_id}
            )
            await session.commit()
            
            return {"sent": True, "user_id": batch_data.telegram_id}
                
    except Exception as e:
        logger.error(f"Error in batch notification: {e}")
        raise

async def _format_batch_message(batch_data, stats) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ batch"""
    total = getattr(stats, 'total', 0)
    completed = getattr(stats, 'completed', 0)
    failed = getattr(stats, 'failed', 0)
    
    success_rate = (completed / total * 100) if total > 0 else 0
    
    message_parts = [
        "üéâ <b>–ì—Ä—É–ø–ø–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>",
        "",
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {completed}/{total} —Ñ–∞–π–ª–æ–≤",
        f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%"
    ]
    
    if failed > 0:
        message_parts.append(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
    
    archive_url = getattr(batch_data, 'archive_url', None)
    if archive_url:
        message_parts.extend([
            "",
            "üì¶ –§–∞–π–ª—ã —É–ø–∞–∫–æ–≤–∞–Ω—ã –≤ –∞—Ä—Ö–∏–≤"
        ])
    
    return "\n".join(message_parts)

@celery_app.task(bind=True, name="notifications.send_premium_expiry_warning")
def send_premium_expiry_warning(self, user_id: int, days_remaining: int):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ Premium
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        days_remaining: –î–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    """
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            return loop.run_until_complete(_send_premium_warning_async(user_id, days_remaining))
        finally:
            loop.close()
    except Exception as e:
        logger.error(f"Error sending premium warning: {e}")
        raise

async def _send_premium_warning_async(user_id: int, days_remaining: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ Premium"""
    try:
        from shared.config.database import get_async_session
        
        async with get_async_session() as session:
            user_result = await session.execute(
                text("SELECT * FROM users WHERE id = :user_id"),
                {'user_id': user_id}
            )
            user = user_result.fetchone()
            
            if not user or not getattr(user, 'is_premium', False):
                return {"error": "User not found or not premium"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notification_settings = getattr(user, 'notification_settings', {}) or {}
            if not notification_settings.get('premium_expiry', True):
                return {"skipped": "User disabled notifications"}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if days_remaining > 1:
                message = f"""
‚è∞ <b>Premium —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!</b>

üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_remaining}

üíé <b>–ß—Ç–æ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ:</b>
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
‚Ä¢ 4K –∫–∞—á–µ—Å—Ç–≤–æ
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ 30 –¥–Ω–µ–π
"""
            else:
                message = """
üö® <b>Premium –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!</b>

‚è∞ Premium –¥–æ—Å—Ç—É–ø –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.

üíé <b>–ß—Ç–æ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ:</b>
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
‚Ä¢ 4K –∫–∞—á–µ—Å—Ç–≤–æ
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ 30 –¥–Ω–µ–π
"""
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            logger.info(f"Would send premium warning to user {user.telegram_id}: {message}")
            
            return {"sent": True, "user_id": user.telegram_id}
                
    except Exception as e:
        logger.error(f"Error in premium warning: {e}")
        raise

@celery_app.task(bind=True, name="notifications.send_broadcast")
def send_broadcast_message(self, broadcast_id: int, user_ids: List[int] = None, test_mode: bool = False):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    
    Args:
        broadcast_id: ID —Ä–∞—Å—Å—ã–ª–∫–∏
        user_ids: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (None = –≤—Å–µ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É)
        test_mode: –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)
    """
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            return loop.run_until_complete(_send_broadcast_async(broadcast_id, user_ids, test_mode))
        finally:
            loop.close()
    except Exception as e:
        logger.error(f"Error sending broadcast: {e}")
        raise

async def _send_broadcast_async(broadcast_id: int, user_ids: List[int], test_mode: bool):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        from shared.config.database import get_async_session
        
        async with get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            broadcast_result = await session.execute(
                text("SELECT * FROM broadcast_messages WHERE id = :broadcast_id"),
                {'broadcast_id': broadcast_id}
            )
            broadcast = broadcast_result.fetchone()
            
            if not broadcast:
                return {"error": "Broadcast not found"}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if test_mode:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
                target_users = [123456789]  # Example admin ID
            elif user_ids:
                target_users = user_ids
            else:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ñ–∏–ª—å—Ç—Ä—É —Ä–∞—Å—Å—ã–ª–∫–∏
                target_users = await _get_broadcast_target_users(session, broadcast)
            
            if not target_users:
                return {"error": "No target users found"}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
            await session.execute(
                text("""
                UPDATE broadcast_messages 
                SET status = 'sending', started_at = :now, total_recipients = :total
                WHERE id = :broadcast_id
                """),
                {
                    'now': datetime.utcnow(),
                    'total': len(target_users),
                    'broadcast_id': broadcast_id
                }
            )
            await session.commit()
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            sent_count = len(target_users)
            failed_count = 0
            blocked_count = 0
            
            logger.info(f"Would send broadcast to {sent_count} users")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
            await session.execute(
                text("""
                UPDATE broadcast_messages 
                SET status = 'completed', completed_at = :now,
                    sent_count = :sent, failed_count = :failed, blocked_count = :blocked
                WHERE id = :broadcast_id
                """),
                {
                    'now': datetime.utcnow(),
                    'sent': sent_count,
                    'failed': failed_count,
                    'blocked': blocked_count,
                    'broadcast_id': broadcast_id
                }
            )
            await session.commit()
            
            return {
                "broadcast_id": broadcast_id,
                "total_recipients": len(target_users),
                "sent": sent_count,
                "failed": failed_count,
                "blocked": blocked_count,
                "success_rate": (sent_count / len(target_users) * 100) if target_users else 0
            }
            
    except Exception as e:
        logger.error(f"Error in broadcast sending: {e}")
        raise

async def _get_broadcast_target_users(session, broadcast) -> List[int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        result = await session.execute(text("""
            SELECT telegram_id FROM users 
            WHERE is_deleted = false AND is_banned = false
            LIMIT 100
        """))
        
        return [row[0] for row in result.fetchall()]
    except Exception as e:
        logger.error(f"Error getting broadcast targets: {e}")
        return []

@celery_app.task(bind=True, name="notifications.check_premium_expiry")
def check_premium_expiry_notifications(self):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ Premium"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            return loop.run_until_complete(_check_premium_expiry_async())
        finally:
            loop.close()
    except Exception as e:
        logger.error(f"Error checking premium expiry: {e}")
        raise

async def _check_premium_expiry_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è Premium"""
    try:
        from shared.config.database import get_async_session
        
        async with get_async_session() as session:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º Premium (7, 3, 1 –¥–µ–Ω—å)
            warning_days = [7, 3, 1]
            notifications_sent = 0
            
            for days in warning_days:
                target_date = datetime.utcnow() + timedelta(days=days)
                
                users_result = await session.execute(
                    text("""
                    SELECT id, telegram_id, premium_expires_at 
                    FROM users 
                    WHERE is_premium = true 
                    AND DATE(premium_expires_at) = :target_date
                    """),
                    {'target_date': target_date.date()}
                )
                
                users = users_result.fetchall()
                
                for user in users:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    send_premium_expiry_warning.delay(user.id, days)
                    notifications_sent += 1
            
            return {"notifications_scheduled": notifications_sent}
            
    except Exception as e:
        logger.error(f"Error in premium expiry check: {e}")
        raise