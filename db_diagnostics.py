#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö VideoBot Pro
"""

import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

try:
    from shared.config.settings import settings
    from shared.models import Base
    from sqlalchemy import create_engine, text, inspect
    import asyncpg
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    sys.exit(1)


def check_database_sync():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    print("üîç Checking database (sync)...")
    
    try:
        db_url = settings.get_database_url(async_driver=False)
        print(f"Database URL: {db_url}")
        
        engine = create_engine(db_url)
        
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            version = conn.execute(text("SELECT version()")).fetchone()[0]
            print(f"‚úÖ Connected to: {version[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            tables = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """)).fetchall()
            
            print(f"üìä Existing tables: {len(tables)}")
            for table in tables:
                print(f"  - {table[0]}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ
            print(f"üìã Expected tables from models: {len(Base.metadata.tables)}")
            for table_name in Base.metadata.tables.keys():
                print(f"  - {table_name}")
        
        engine.dispose()
        return True
        
    except Exception as e:
        print(f"‚ùå Database check failed: {e}")
        return False


async def check_database_async():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    print("üîç Checking database (async)...")
    
    try:
        db_url = settings.get_database_url()
        if db_url.startswith('postgresql+asyncpg://'):
            db_url = db_url.replace('postgresql+asyncpg://', 'postgresql://')
        
        print(f"Database URL: {db_url}")
        
        conn = await asyncpg.connect(db_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        version = await conn.fetchval("SELECT version()")
        print(f"‚úÖ Connected to: {version[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        tables = await conn.fetch("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        """)
        
        print(f"üìä Existing tables: {len(tables)}")
        for table in tables:
            print(f"  - {table['table_name']}")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Async database check failed: {e}")
        return False


def create_tables_manual():
    """–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print("üõ†Ô∏è Creating tables manually...")
    
    try:
        db_url = settings.get_database_url(async_driver=False)
        engine = create_engine(db_url, echo=False)  # –û—Ç–∫–ª—é—á–∞–µ–º echo –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        
        print("üìã Tables to create:")
        for table_name, table in Base.metadata.tables.items():
            print(f"  - {table_name}: {len(table.columns)} columns")
        
        print("\nüî® Creating tables...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        for table_name, table in Base.metadata.tables.items():
            try:
                table.create(engine, checkfirst=True)
                print(f"‚úÖ Created: {table_name}")
            except Exception as e:
                print(f"‚ùå Failed to create {table_name}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with engine.connect() as conn:
            tables = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """)).fetchall()
            
            print(f"\nüìä Result: {len(tables)} tables created")
            for table in tables:
                print(f"  ‚úÖ {table[0]}")
        
        engine.dispose()
        return True
        
    except Exception as e:
        print(f"‚ùå Manual table creation failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def show_model_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö"""
    print("üìã Model Information:")
    print(f"Total models: {len(Base.metadata.tables)}")
    
    for table_name, table in Base.metadata.tables.items():
        print(f"\nüîπ {table_name}:")
        for column in table.columns:
            print(f"  - {column.name}: {column.type}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ VideoBot Pro - Database Diagnostic")
    print("=" * 50)
    
    # 1. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö
    show_model_info()
    
    print("\n" + "=" * 50)
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    sync_ok = check_database_sync()
    
    print("\n" + "=" * 50)
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    async_ok = await check_database_async()
    
    print("\n" + "=" * 50)
    
    # 4. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤—Ä—É—á–Ω—É—é
    if sync_ok:
        success = create_tables_manual()
        if success:
            print("\n‚úÖ Database setup completed successfully!")
        else:
            print("\n‚ùå Database setup failed!")
    else:
        print("\n‚ùå Cannot create tables - database connection failed!")


if __name__ == "__main__":
    asyncio.run(main())