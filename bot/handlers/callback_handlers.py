"""
VideoBot Pro - Callback Handlers
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""

import structlog
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from shared.config.database import get_async_session
from shared.models import User
from bot.config import bot_config, get_message, MessageType
from bot.utils.user_manager import get_or_create_user, update_user_activity

logger = structlog.get_logger(__name__)

router = Router(name="callback_handlers")


@router.callback_query(F.data == "back_main")
async def handle_back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    user_id = callback.from_user.id
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        async with get_async_session() as session:
            user = await get_or_create_user(
                session=session,
                telegram_id=user_id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name
            )
            await update_user_activity(session, user)
            await session.commit()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(callback.message, user, edit=True)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in back to main: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é", show_alert=True)


@router.callback_query(F.data == "status")
async def handle_status_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            status_text = bot_config.format_user_status(user)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            daily_limit = bot_config.get_user_daily_limit(user.current_user_type)
            file_limit = bot_config.get_user_file_limit(user.current_user_type)
            
            detailed_status = [
                f"üë§ {user.display_name}",
                f"üìä {status_text}",
                "",
                "üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
                f"‚Ä¢ –°–∫–∞—á–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {user.downloads_today}/{daily_limit if daily_limit < 999 else '‚àû'}",
                f"‚Ä¢ –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ: {user.downloads_total}",
                f"‚Ä¢ –õ–∏–º–∏—Ç —Ñ–∞–π–ª–∞: {file_limit}MB",
                f"‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}",
            ]
            
            if user.is_premium_active:
                detailed_status.append(f"üíé Premium –¥–æ: {user.premium_expires_at.strftime('%d.%m.%Y')}")
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
            ])
            
            await callback.message.edit_text(
                "\n".join(detailed_status),
                reply_markup=keyboard
            )
            await callback.answer()
    
    except Exception as e:
        logger.error(f"Error showing status: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(F.data == "help")
async def handle_help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    help_text = get_message(MessageType.HELP, "main")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –§–æ—Ä–º–∞—Ç—ã", callback_data="help_formats")],
        [InlineKeyboardButton(text="üíé Premium", callback_data="premium_benefits")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(
        help_text,
        reply_markup=keyboard,
        disable_web_page_preview=True
    )
    await callback.answer()


@router.callback_query(F.data == "help_formats")
async def handle_help_formats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    formats_text = get_message(MessageType.HELP, "formats")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–º–æ—â–∏", callback_data="help")]
    ])
    
    await callback.message.edit_text(
        formats_text,
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "premium_benefits")
async def handle_premium_benefits(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium"""
    benefits_text = [
        "üíé –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏",
        "",
        "üöÄ –ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:",
        "‚Ä¢ ‚àû –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        "‚Ä¢ üé¨ 4K –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–¥–æ 2160p)",
        "‚Ä¢ üì¶ –§–∞–π–ª—ã –¥–æ 500MB",
        "‚Ä¢ ‚òÅÔ∏è –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ 30 –¥–Ω–µ–π",
        "‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å",
        "‚Ä¢ üîì –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
        "‚Ä¢ üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "‚Ä¢ üé® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
        "",
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç $3.99/–º–µ—Å—è—Ü",
        "üéÅ –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü —Å–æ —Å–∫–∏–¥–∫–æ–π!",
        "",
        "üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º:",
        "Free: 10 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π/–¥–µ–Ω—å, 720p, 50MB",
        "Premium: ‚àû —Å–∫–∞—á–∏–≤–∞–Ω–∏–π, 4K, 500MB"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="buy_premium")],
        [InlineKeyboardButton(text="üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="trial")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="help")]
    ])
    
    await callback.message.edit_text(
        "\n".join(benefits_text),
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "buy_premium")
async def handle_buy_premium(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –ø–æ–∫—É–ø–∫–µ Premium"""
    await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é Premium...")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ premium handler
    from bot.handlers.premium import show_premium_plans
    from aiogram.fsm.context import FSMContext
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state = FSMContext.get_current()
    
    user_id = callback.from_user.id
    async with get_async_session() as session:
        user = await get_or_create_user(
            session=session,
            telegram_id=user_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name
        )
        await session.commit()
    
    await show_premium_plans(callback.message, user, state)


@router.callback_query(F.data == "trial")
async def handle_trial_callback(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É"""
    await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ trial handler
    from bot.handlers.trial_system import handle_trial_request
    from aiogram.fsm.context import FSMContext
    
    state = FSMContext.get_current()
    
    user_id = callback.from_user.id
    async with get_async_session() as session:
        user = await get_or_create_user(
            session=session,
            telegram_id=user_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name
        )
        await session.commit()
    
    await handle_trial_request(callback.message, user, state)


@router.callback_query(F.data == "detailed_stats")
async def handle_detailed_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = user.stats or {}
            
            stats_text = [
                "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "",
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.display_name}",
                f"üÜî ID: {user.telegram_id}",
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}",
                f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_active_at.strftime('%d.%m.%Y %H:%M') if user.last_active_at else '–ù–∏–∫–æ–≥–¥–∞'}",
                "",
                "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π:",
                f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {user.downloads_today}",
                f"‚Ä¢ –í—Å–µ–≥–æ: {user.downloads_total}",
                f"‚Ä¢ –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: {stats.get('monthly_downloads', 0)}",
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {stats.get('avg_file_size_mb', 0):.1f} MB",
            ]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            if stats.get('platforms'):
                stats_text.append("")
                stats_text.append("üéØ –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:")
                for platform, count in stats['platforms'].items():
                    emoji = {"youtube": "üî¥", "tiktok": "üéµ", "instagram": "üì∏"}.get(platform, "üé¨")
                    stats_text.append(f"‚Ä¢ {emoji} {platform.title()}: {count}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
            if user.current_user_type == "premium":
                stats_text.extend([
                    "",
                    "üíé Premium –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω —Å: {user.premium_started_at.strftime('%d.%m.%Y') if user.premium_started_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                    f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.premium_expires_at.strftime('%d.%m.%Y')}",
                    f"‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if user.premium_auto_renew else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}"
                ])
            elif user.trial_used:
                stats_text.extend([
                    "",
                    "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:",
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {user.trial_started_at.strftime('%d.%m.%Y') if user.trial_started_at else '–î–∞'}",
                    f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats.get('trial_downloads', 0)} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π"
                ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç—É—Å—É", callback_data="status")]
            ])
            
            await callback.message.edit_text(
                "\n".join(stats_text),
                reply_markup=keyboard
            )
            await callback.answer()
    
    except Exception as e:
        logger.error(f"Error showing detailed stats: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "export_data")
async def handle_export_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON/CSV


async def show_main_menu(message, user: User, edit: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —Ç–∏–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if bot_config.is_admin(user.telegram_id):
        keyboard_config = bot_config.keyboards["main_menu"]["admin"]
    elif user.is_premium_active:
        keyboard_config = bot_config.keyboards["main_menu"]["premium"]
    else:
        keyboard_config = bot_config.keyboards["main_menu"]["free"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_rows = []
    for row in keyboard_config:
        button_row = []
        for button in row:
            button_row.append(
                InlineKeyboardButton(
                    text=button["text"], 
                    callback_data=button["callback"]
                )
            )
        keyboard_rows.append(button_row)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = get_message(
        MessageType.WELCOME,
        "returning_user",
        downloads_today=user.downloads_today,
        daily_limit=bot_config.get_user_daily_limit(user.current_user_type),
        total_downloads=user.downloads_total,
        user_type=bot_config.format_user_status(user)
    )
    
    if edit:
        await message.edit_text(welcome_text, reply_markup=keyboard)
    else:
        await message.answer(welcome_text, reply_markup=keyboard)


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å callback

def create_back_button(callback_data: str = "back_main") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ])


def create_confirmation_keyboard(confirm_data: str, cancel_data: str = "cancel") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=confirm_data),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=cancel_data)
        ]
    ])


@router.callback_query(F.data == "cancel")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")