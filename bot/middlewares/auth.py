"""
VideoBot Pro - Authentication Middleware
–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import structlog
from typing import Any, Awaitable, Callable, Dict, Optional
from datetime import datetime

from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, Update, User as TelegramUser

from sqlalchemy import text

from shared.config.database import get_async_session
from shared.models import User, EventType
from shared.models.analytics import track_user_event
from bot.config import bot_config
from bot.utils.user_manager import get_or_create_user, update_user_activity

logger = structlog.get_logger(__name__)

class AuthMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(
        self,
        auto_create_users: bool = True,
        update_user_info: bool = True
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware
        
        Args:
            auto_create_users: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            update_user_info: –û–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        self.auto_create_users = auto_create_users
        self.update_user_info = update_user_info
        
        # –ö–µ—à –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._user_cache = {}
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
    
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_user = self._extract_telegram_user(event)
        
        if not telegram_user:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        try:
            user = await self._get_or_create_user(telegram_user)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö middleware
            data['user'] = user
            data['telegram_user'] = telegram_user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if user and user.is_banned:
                await self._handle_banned_user(event, user)
                return None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if user and isinstance(event, (Message, CallbackQuery)):
                await self._update_user_activity(event, user)
            
        except Exception as e:
            logger.error(f"Error in auth middleware: {e}", user_id=telegram_user.id)
            # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É handler
        return await handler(event, data)
    
    def _extract_telegram_user(self, event: Update) -> Optional[TelegramUser]:
        """–ò–∑–≤–ª–µ—á—å Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
        if isinstance(event, Message):
            return event.from_user
        elif isinstance(event, CallbackQuery):
            return event.from_user
        elif hasattr(event, 'inline_query') and event.inline_query:
            return event.inline_query.from_user
        elif hasattr(event, 'chosen_inline_result') and event.chosen_inline_result:
            return event.chosen_inline_result.from_user
        elif hasattr(event, 'pre_checkout_query') and event.pre_checkout_query:
            return event.pre_checkout_query.from_user
        elif hasattr(event, 'shipping_query') and event.shipping_query:
            return event.shipping_query.from_user
        
        return None
    
    async def _get_or_create_user(self, telegram_user: TelegramUser) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = telegram_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cache_key = f"user_{user_id}"
        if cache_key in self._user_cache:
            cached_user, cached_time = self._user_cache[cache_key]
            if (datetime.utcnow() - cached_time).total_seconds() < self._cache_ttl:
                return cached_user
        
        try:
            async with get_async_session() as session:
                if self.auto_create_users:
                    user = await get_or_create_user(
                        session=session,
                        telegram_id=user_id,
                        username=telegram_user.username,
                        first_name=telegram_user.first_name,
                        last_name=telegram_user.last_name,
                        language_code=telegram_user.language_code
                    )
                    await session.commit()
                else:
                    # –¢–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    result = await session.execute(
                        text("SELECT * FROM users WHERE telegram_id = :telegram_id"),
                        {'telegram_id': user_id}
                    )
                    user = result.first()
                
                # –ö–µ—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user:
                    self._user_cache[cache_key] = (user, datetime.utcnow())
                
                return user
        
        except Exception as e:
            logger.error(f"Error getting/creating user: {e}", user_id=user_id)
            return None
    
    async def _handle_banned_user(self, event: Update, user: User):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        ban_message = "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        
        if user.ban_reason:
            ban_message += f"\n–ü—Ä–∏—á–∏–Ω–∞: {user.ban_reason}"
        
        if user.banned_until:
            ban_message += f"\n–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ: {user.banned_until.strftime('%d.%m.%Y %H:%M')}"
        
        if user.banned_until and datetime.utcnow() > user.banned_until:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ
            try:
                async with get_async_session() as session:
                    db_user = await session.get(User, user.id)
                    if db_user:
                        db_user.unban_user()
                        await session.commit()
                        logger.info(f"Auto-unbanned user", user_id=user.telegram_id)
                        return  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            except Exception as e:
                logger.error(f"Error auto-unbanning user: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        try:
            if isinstance(event, Message):
                await event.answer(ban_message)
            elif isinstance(event, CallbackQuery):
                await event.answer(ban_message, show_alert=True)
        except Exception as e:
            logger.error(f"Error sending ban message: {e}")
    
    async def _update_user_activity(self, event: Update, user: User):
        """–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            message_id = None
            if isinstance(event, Message):
                message_id = event.message_id
            elif isinstance(event, CallbackQuery) and event.message:
                message_id = event.message.message_id
            
            async with get_async_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∫–æ–ø–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
                fresh_user = await session.get(User, user.id)
                if fresh_user:
                    await update_user_activity(session, fresh_user, message_id)
                    await session.commit()
        
        except Exception as e:
            logger.error(f"Error updating user activity: {e}", user_id=user.telegram_id)
    
    def clear_cache(self, user_id: Optional[int] = None):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if user_id:
            cache_key = f"user_{user_id}"
            self._user_cache.pop(cache_key, None)
        else:
            self._user_cache.clear()
    
    def get_cached_user(self, user_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–µ—à–∞"""
        cache_key = f"user_{user_id}"
        if cache_key in self._user_cache:
            cached_user, cached_time = self._user_cache[cache_key]
            if (datetime.utcnow() - cached_time).total_seconds() < self._cache_ttl:
                return cached_user
        return None

class RequireAuthMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, allow_anonymous: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware
        
        Args:
            allow_anonymous: –†–∞–∑—Ä–µ—à–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        """
        self.allow_anonymous = allow_anonymous
    
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        user = data.get('user')
        
        if not user and not self.allow_anonymous:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
            await self._handle_unauthenticated(event)
            return None
        
        return await handler(event, data)
    
    async def _handle_unauthenticated(self, event: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        message = "üîê –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        
        try:
            if isinstance(event, Message):
                await event.answer(message)
            elif isinstance(event, CallbackQuery):
                await event.answer(message, show_alert=True)
        except Exception as e:
            logger.error(f"Error sending auth required message: {e}")

class UserTypeMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, required_types: list):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware
        
        Args:
            required_types: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        self.required_types = required_types
    
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        user = data.get('user')
        
        if not user:
            return await handler(event, data)
        
        if user.current_user_type not in self.required_types:
            await self._handle_insufficient_permissions(event, user)
            return None
        
        return await handler(event, data)
    
    async def _handle_insufficient_permissions(self, event: Update, user: User):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤"""
        message = f"üö´ –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å: {', '.join(self.required_types)}"
        
        try:
            if isinstance(event, Message):
                await event.answer(message)
            elif isinstance(event, CallbackQuery):
                await event.answer(message, show_alert=True)
        except Exception as e:
            logger.error(f"Error sending permission message: {e}")

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

def require_auth(allow_anonymous: bool = False):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        allow_anonymous: –†–∞–∑—Ä–µ—à–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    """
    def decorator(func):
        func._require_auth = True
        func._allow_anonymous = allow_anonymous
        return func
    return decorator

def require_user_type(*user_types):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_types: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    def decorator(func):
        func._required_user_types = user_types
        return func
    return decorator

def premium_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö Premium"""
    return require_user_type('premium', 'admin')(func)

def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return require_user_type('admin')(func)

# –£—Ç–∏–ª–∏—Ç—ã

async def get_current_user(data: Dict[str, Any]) -> Optional[User]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö middleware"""
    return data.get('user')

async def get_telegram_user(data: Dict[str, Any]) -> Optional[TelegramUser]:
    """–ü–æ–ª—É—á–∏—Ç—å Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö middleware"""
    return data.get('telegram_user')

def is_authenticated(data: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    return data.get('user') is not None

def has_user_type(data: Dict[str, Any], *user_types) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = data.get('user')
    if not user:
        return False
    return user.current_user_type in user_types

def is_premium(data: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Premium"""
    return has_user_type(data, 'premium', 'admin')

def is_admin(data: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return has_user_type(data, 'admin')