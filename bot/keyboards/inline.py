"""
VideoBot Pro - Inline Keyboards
Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞
"""

from typing import List, Dict, Optional, Any
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def create_main_menu_keyboard(user_type: str, is_admin: bool = False) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_type: –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (free, trial, premium, admin)
        is_admin: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    keyboard = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö
    keyboard.append([
        InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="download"),
        InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")
    ])
    
    # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_type == "free":
        keyboard.append([
            InlineKeyboardButton(text="üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="trial"),
            InlineKeyboardButton(text="üíé Premium", callback_data="buy_premium")
        ])
    elif user_type == "trial":
        keyboard.append([
            InlineKeyboardButton(text="‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏", callback_data="trial_status"),
            InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="buy_premium")
        ])
    elif user_type == "premium":
        keyboard.append([
            InlineKeyboardButton(text="üíé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Premium", callback_data="premium_settings"),
            InlineKeyboardButton(text="üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="referral")
        ])
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    keyboard.append([
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    ])
    
    # –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞
    if is_admin:
        keyboard.append([
            InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_trial_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="activate_trial")],
        [InlineKeyboardButton(text="üíé –°—Ä–∞–∑—É –∫—É–ø–∏—Ç—å Premium", callback_data="buy_premium")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])


def create_batch_options_keyboard(files_count: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è batch –∑–∞–≥—Ä—É–∑–∫–∏
    
    Args:
        files_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
    """
    keyboard = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
    if files_count <= 4:
        # –î–ª—è –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —á–∞—Ç
        keyboard.append([
            InlineKeyboardButton(
                text=f"üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç ({files_count} —Ñ–∞–π–ª–æ–≤)",
                callback_data="batch_individual"
            )
        ])
    else:
        # –î–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ - –≤—ã–±–æ—Ä
        keyboard.extend([
            [InlineKeyboardButton(
                text="üì± –í —á–∞—Ç –ø–æ –æ–¥–Ω–æ–º—É",
                callback_data="batch_individual"
            )],
            [InlineKeyboardButton(
                text="üì¶ –ê—Ä—Ö–∏–≤–æ–º —á–µ—Ä–µ–∑ CDN",
                callback_data="batch_archive"
            )],
            [InlineKeyboardButton(
                text="üéõÔ∏è –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã",
                callback_data="batch_selective"
            )]
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="batch_cancel")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_batch_selection_keyboard(urls_data: List[Dict]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    
    Args:
        urls_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–π–ª–∞—Ö
    """
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10)
    for i, url_data in enumerate(urls_data[:10]):
        status = "‚úÖ" if url_data.get("selected", True) else "‚ùå"
        platform = url_data.get("platform", "Unknown")
        
        keyboard.append([
            InlineKeyboardButton(
                text=f"{status} {i+1}. {platform}",
                callback_data=f"toggle_file_{i}"
            )
        ])
    
    # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [
            InlineKeyboardButton(text="‚úÖ –í—Å–µ", callback_data="select_all"),
            InlineKeyboardButton(text="‚ùå –°–Ω—è—Ç—å –≤—Å–µ", callback_data="deselect_all")
        ],
        [
            InlineKeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="download_selected"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="batch_options")
        ]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_premium_plans_keyboard(plans: Dict[str, Dict]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–ª–∞–Ω–∞–º–∏ Premium –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        plans: –°–ª–æ–≤–∞—Ä—å —Å –ø–ª–∞–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    keyboard = []
    
    for plan_id, plan_data in plans.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        text = f"{plan_data['name']} - ${plan_data['price_usd']}"
        if plan_data.get('discount'):
            text += f" (-{plan_data['discount']}%)"
        if plan_data.get('popular'):
            text = f"‚≠ê {text}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=text,
                callback_data=f"premium_plan_{plan_id}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_payment_methods_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ Telegram Payments", callback_data="payment_telegram")],
        [InlineKeyboardButton(text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (Stripe)", callback_data="payment_stripe")],
        [InlineKeyboardButton(text="ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="payment_crypto")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="premium_plans")]
    ])


def create_subscription_keyboard(
    channels: List[Dict[str, str]], 
    subscribed_channels: List[str]
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    
    Args:
        channels: –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        subscribed_channels: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    for channel in channels:
        channel_id = channel.get("channel_id", "")
        channel_name = channel.get("channel_name", "–ö–∞–Ω–∞–ª")
        channel_url = channel.get("url", f"https://t.me/{channel_id.replace('@', '')}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if channel_id in subscribed_channels:
            status = "‚úÖ"
        else:
            status = "‚ùå"
        
        keyboard.append([
            InlineKeyboardButton(
                text=f"{status} {channel_name}",
                url=channel_url
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.extend([
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data="check_subscriptions")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="recheck_subscriptions")],
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="buy_premium")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_settings_keyboard(user_settings: Dict[str, Any]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_settings: –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    quality = user_settings.get("quality_mode", "auto")
    notifications = user_settings.get("notifications", True)
    language = user_settings.get("language", "ru")
    
    keyboard = [
        [InlineKeyboardButton(
            text=f"üé¨ –ö–∞—á–µ—Å—Ç–≤–æ: {quality}",
            callback_data="settings_quality"
        )],
        [InlineKeyboardButton(
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª' if notifications else '–í—ã–∫–ª'}",
            callback_data="settings_notifications"
        )],
        [InlineKeyboardButton(
            text=f"üåç –Ø–∑—ã–∫: {language.upper()}",
            callback_data="settings_language"
        )],
        [InlineKeyboardButton(
            text="üì¶ –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤",
            callback_data="settings_delivery"
        )],
        [InlineKeyboardButton(
            text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å",
            callback_data="settings_privacy"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_quality_selector_keyboard(
    available_qualities: List[str],
    current_quality: Optional[str] = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
    
    Args:
        available_qualities: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤
        current_quality: –¢–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    """
    keyboard = []
    
    quality_labels = {
        "2160p": "üî• 4K (2160p)",
        "1080p": "üé¨ Full HD (1080p)",
        "720p": "üì∫ HD (720p)",
        "480p": "üì± SD (480p)",
        "360p": "üìû Low (360p)",
        "audio": "üéµ –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ"
    }
    
    for quality in available_qualities:
        label = quality_labels.get(quality, quality)
        if quality == current_quality:
            label = f"‚úÖ {label}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=label,
                callback_data=f"select_quality_{quality}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_confirmation_keyboard(
    confirm_text: str = "‚úÖ –î–∞",
    cancel_text: str = "‚ùå –ù–µ—Ç",
    confirm_data: str = "confirm",
    cancel_data: str = "cancel"
) -> InlineKeyboardMarkup:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    
    Args:
        confirm_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        cancel_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        confirm_data: Callback data –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        cancel_data: Callback data –¥–ª—è –æ—Ç–º–µ–Ω—ã
    """
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text=confirm_text, callback_data=confirm_data),
        InlineKeyboardButton(text=cancel_text, callback_data=cancel_data)
    ]])


def create_back_keyboard(callback_data: str = "back_main") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    
    Args:
        callback_data: Callback data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    """
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)
    ]])