"""
VideoBot Pro - Subscription Check Handler
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
"""

import asyncio
import structlog
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.enums import ChatMemberStatus

from shared.config.database import get_async_session
from shared.models import User, RequiredChannel, EventType
from shared.models.analytics import track_user_event
from bot.config import bot_config, get_message, MessageType
from bot.utils.user_manager import update_user_activity

logger = structlog.get_logger(__name__)

router = Router(name="subscription_check")


class SubscriptionChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self._cache = {}  # –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
    
    async def check_user_subscriptions(self, user_id: int, force_check: bool = False) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:
            {
                "all_subscribed": bool,
                "subscribed_channels": List[str],
                "missing_channels": List[Dict],
                "error_channels": List[Dict],
                "check_timestamp": datetime
            }
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        cache_key = f"sub_check_{user_id}"
        if not force_check and cache_key in self._cache:
            cached_result = self._cache[cache_key]
            if datetime.utcnow() - cached_result["check_timestamp"] < timedelta(seconds=self._cache_ttl):
                return cached_result
        
        try:
            async with get_async_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await session.get(User, user_id)
                if not user:
                    return {"error": "User not found"}
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                channels = RequiredChannel.get_active_channels_for_user_type(
                    session, user.current_user_type
                )
                
                if not channels:
                    # –ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                    result = {
                        "all_subscribed": True,
                        "subscribed_channels": [],
                        "missing_channels": [],
                        "error_channels": [],
                        "check_timestamp": datetime.utcnow()
                    }
                    self._cache[cache_key] = result
                    return result
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
                subscribed = []
                missing = []
                errors = []
                
                for channel in channels:
                    try:
                        is_subscribed = await self._check_channel_subscription(
                            user_id, channel.channel_id
                        )
                        
                        if is_subscribed:
                            subscribed.append(channel.channel_id)
                        else:
                            missing.append({
                                "channel_id": channel.channel_id,
                                "channel_name": channel.channel_name,
                                "telegram_url": channel.telegram_url,
                                "invite_link": channel.invite_link
                            })
                    
                    except Exception as e:
                        logger.error(
                            f"Error checking subscription to {channel.channel_id}: {e}",
                            user_id=user_id
                        )
                        errors.append({
                            "channel_id": channel.channel_id,
                            "channel_name": channel.channel_name,
                            "error": str(e)
                        })
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = {
                    "all_subscribed": len(missing) == 0 and len(errors) == 0,
                    "subscribed_channels": subscribed,
                    "missing_channels": missing,
                    "error_channels": errors,
                    "check_timestamp": datetime.utcnow()
                }
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.subscribed_channels = subscribed
                user.last_subscription_check = result["check_timestamp"]
                user.subscription_check_passed = result["all_subscribed"]
                
                await session.commit()
                
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._cache[cache_key] = result
                
                # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                event_type = EventType.SUBSCRIPTION_CHECKED if result["all_subscribed"] else EventType.SUBSCRIPTION_FAILED
                await track_user_event(
                    event_type=event_type,
                    user_id=user.id,
                    telegram_user_id=user_id,
                    event_data={
                        "channels_checked": len(channels),
                        "subscribed_count": len(subscribed),
                        "missing_count": len(missing),
                        "error_count": len(errors)
                    }
                )
                
                return result
        
        except Exception as e:
            logger.error(f"Error in subscription check: {e}", user_id=user_id)
            return {"error": str(e)}
    
    async def _check_channel_subscription(self, user_id: int, channel_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
        try:
            member = await self.bot.get_chat_member(channel_id, user_id)
            
            # –°—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö –∫—Ä–æ–º–µ left –∏ kicked
            subscribed_statuses = [
                ChatMemberStatus.CREATOR,
                ChatMemberStatus.ADMINISTRATOR, 
                ChatMemberStatus.MEMBER,
                ChatMemberStatus.RESTRICTED  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ, –Ω–æ –≤—Å–µ –µ—â–µ –≤ –∫–∞–Ω–∞–ª–µ
            ]
            
            return member.status in subscribed_statuses
        
        except TelegramBadRequest as e:
            if "chat not found" in str(e).lower():
                logger.warning(f"Channel not found: {channel_id}")
                return False  # –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            elif "user not found" in str(e).lower():
                return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            else:
                raise
        
        except TelegramForbiddenError:
            # –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
            logger.warning(f"Bot has no access to channel: {channel_id}")
            return False
        
        except Exception as e:
            logger.error(f"Unexpected error checking subscription: {e}")
            raise
    
    def clear_cache(self, user_id: int = None):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        if user_id:
            cache_key = f"sub_check_{user_id}"
            self._cache.pop(cache_key, None)
        else:
            self._cache.clear()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫–∞
subscription_checker: Optional[SubscriptionChecker] = None


def init_subscription_checker(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    global subscription_checker
    subscription_checker = SubscriptionChecker(bot)


async def check_required_subscriptions(user_id: int, force_check: bool = False) -> Dict:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    if not subscription_checker:
        return {"error": "Subscription checker not initialized"}
    
    return await subscription_checker.check_user_subscriptions(user_id, force_check)


async def show_subscription_check(message: Message, subscription_status: Dict = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º
    if not subscription_status:
        subscription_status = await check_required_subscriptions(user_id)
    
    if subscription_status.get("error"):
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if subscription_status["all_subscribed"]:
        await message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–Ω–∞–ª–∞–º–∏
    missing_channels = subscription_status["missing_channels"]
    
    channels_text = []
    keyboard_buttons = []
    
    for i, channel in enumerate(missing_channels):
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        status = "üî¥ –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
        
        channels_text.append(
            f"{status} <b>{channel['channel_name']}</b>\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: –º–Ω–æ–≥–æ\n"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if channel.get("invite_link"):
            button_url = channel["invite_link"]
        else:
            button_url = channel["telegram_url"]
        
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=f"üì± {channel['channel_name']}", 
                url=button_url
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard_buttons.extend([
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data="check_subscriptions")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="recheck_subscriptions")],
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="buy_premium")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    main_text = [
        "üîí <b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã</b>",
        "",
        "üì¢ <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>",
        "",
        *channels_text,
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(subscription_status['subscribed_channels'])}/{len(missing_channels) + len(subscription_status['subscribed_channels'])} –∫–∞–Ω–∞–ª–æ–≤",
        "",
        "üí° <i>Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –æ—Ç —ç—Ç–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</i>"
    ]
    
    await message.answer(
        "\n".join(main_text),
        reply_markup=keyboard,
        disable_web_page_preview=True
    )


@router.callback_query(F.data == "check_subscriptions")
async def handle_subscription_check(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    user_id = callback.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫–∏...", show_alert=False)
    
    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        subscription_status = await check_required_subscriptions(user_id, force_check=True)
        
        if subscription_status.get("error"):
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return
        
        if subscription_status["all_subscribed"]:
            # –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã
            await callback.message.edit_text(
                "üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã</b>\n\n"
                + "\n".join([f"‚úÖ {ch}" for ch in subscription_status["subscribed_channels"]]) +
                "\n\nüéÅ –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
                "‚Ä¢ 10 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å\n"
                "‚Ä¢ HD –∫–∞—á–µ—Å—Ç–≤–æ (–¥–æ 720p)\n"
                "‚Ä¢ –§–∞–π–ª—ã –¥–æ 50MB\n\n"
                "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: 0/10"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with get_async_session() as session:
                user = await session.get(User, user_id)
                if user:
                    await update_user_activity(session, user)
                    await session.commit()
        
        else:
            # –ï—â–µ –µ—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            missing_count = len(subscription_status["missing_channels"])
            subscribed_count = len(subscription_status["subscribed_channels"])
            
            await callback.message.edit_text(
                f"‚ö†Ô∏è <b>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: {missing_count} –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω—ã: {subscribed_count}\n"
                f"‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã: {missing_count}\n\n"
                "üîÑ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑."
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            await asyncio.sleep(2)
            await show_subscription_check(callback.message, subscription_status)
    
    except Exception as e:
        logger.error(f"Error in subscription check callback: {e}", user_id=user_id)
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


@router.callback_query(F.data == "recheck_subscriptions")
async def handle_subscription_recheck(callback: CallbackQuery):
    """–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    user_id = callback.from_user.id
    
    await callback.answer("–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–Ω–æ–≤–æ...", show_alert=False)
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω–æ–≤–æ
    if subscription_checker:
        subscription_checker.clear_cache(user_id)
    
    subscription_status = await check_required_subscriptions(user_id, force_check=True)
    
    if subscription_status.get("error"):
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ", show_alert=True)
        return
    
    if subscription_status["all_subscribed"]:
        await callback.message.edit_text(
            "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            "–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n\n"
            "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!"
        )
    else:
        await show_subscription_check(callback.message, subscription_status)


async def periodic_subscription_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    if subscription_checker:
        subscription_checker.clear_cache()
        logger.info("Subscription cache cleared")


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π

async def is_user_subscribed_to_required_channels(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
    if not bot_config.required_subs_enabled:
        return True
    
    result = await check_required_subscriptions(user_id)
    return result.get("all_subscribed", False)


async def get_user_subscription_status(user_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        return await check_required_subscriptions(user_id)
    except Exception as e:
        logger.error(f"Error getting subscription status: {e}", user_id=user_id)
        return None


async def force_subscription_recheck(user_id: int) -> bool:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        if subscription_checker:
            subscription_checker.clear_cache(user_id)
        
        result = await check_required_subscriptions(user_id, force_check=True)
        return result.get("all_subscribed", False)
    except Exception as e:
        logger.error(f"Error in force recheck: {e}", user_id=user_id)
        return False