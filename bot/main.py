#!/usr/bin/env python3
"""
VideoBot Pro - Main Bot Entry Point
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
"""

import asyncio
import logging
import signal
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

import structlog
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from shared.config.settings import settings
from shared.config.database import init_database, close_database
from shared.config.redis import init_redis, close_redis

# –ò–º–ø–æ—Ä—Ç—ã –±–æ—Ç–∞
from bot.config import bot_config
from bot.handlers import setup_handlers
from bot.middlewares import setup_middlewares
from bot.services import initialize_services, cleanup_services

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format=settings.LOG_FORMAT,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('videobot.log') if not settings.DEBUG else logging.NullHandler()
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)


class BotApplication:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.web_app = None
        self.runner = None
        self.site = None
        self._shutdown_event = asyncio.Event()
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ Starting VideoBot Pro v%s", settings.APP_VERSION)
        
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä Initializing database...")
            await init_database()
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
            logger.info("üîÑ Initializing Redis...")
            await init_redis()
            
            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
            logger.info("ü§ñ Initializing Telegram bot...")
            self.bot = Bot(
                token=bot_config.bot_token,
                default=DefaultBotProperties(
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
            )
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            self.dp = Dispatcher()
            
            # 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
            logger.info("‚öôÔ∏è Setting up middlewares...")
            setup_middlewares(self.dp)
            
            # 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            logger.info("üìã Setting up handlers...")
            setup_handlers(self.dp)
            
            # 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            logger.info("üîß Initializing services...")
            await initialize_services(self.bot)
            
            # 8. –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
            bot_info = await self.bot.get_me()
            logger.info("‚úÖ Bot initialized successfully: @%s (%s)", bot_info.username, bot_info.full_name)
            
        except Exception as e:
            logger.error("‚ùå Failed to initialize bot: %s", e)
            raise
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("üîÑ Starting polling mode...")
        
        try:
            await self.dp.start_polling(
                self.bot,
                allowed_updates=self.dp.resolve_used_update_types(),
                drop_pending_updates=True
            )
        except Exception as e:
            logger.error("‚ùå Polling error: %s", e)
            raise
    
    async def start_webhook(self):
        """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        if not settings.WEBHOOK_URL:
            raise ValueError("WEBHOOK_URL is required for webhook mode")
        
        logger.info("üåê Starting webhook mode...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        webhook_url = f"{settings.WEBHOOK_URL}{settings.WEBHOOK_PATH}"
        await self.bot.set_webhook(
            url=webhook_url,
            secret_token=settings.WEBHOOK_SECRET,
            drop_pending_updates=True
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.web_app = web.Application()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook handler
        SimpleRequestHandler(
            dispatcher=self.dp,
            bot=self.bot,
            secret_token=settings.WEBHOOK_SECRET
        ).register(self.web_app, path=settings.WEBHOOK_PATH)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ health check endpoint
        async def health_check(request):
            return web.json_response({"status": "ok", "bot": "VideoBot Pro"})
        
        self.web_app.router.add_get("/health", health_check)
        
        # –ó–∞–ø—É—Å–∫ web —Å–µ—Ä–≤–µ—Ä–∞
        self.runner = web.AppRunner(self.web_app)
        await self.runner.setup()
        
        self.site = web.TCPSite(
            self.runner, 
            host="0.0.0.0", 
            port=8000
        )
        await self.site.start()
        
        logger.info("‚úÖ Webhook started on port 8000")
        logger.info("üì° Webhook URL: %s", webhook_url)
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë Shutting down VideoBot Pro...")
        
        try:
            # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
            if self.site:
                await self.site.stop()
            if self.runner:
                await self.runner.cleanup()
            
            # 2. –£–¥–∞–ª–µ–Ω–∏–µ webhook
            if self.bot:
                await self.bot.delete_webhook(drop_pending_updates=True)
                await self.bot.session.close()
            
            # 3. –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            await cleanup_services()
            
            # 4. –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            await close_redis()
            await close_database()
            
            logger.info("‚úÖ Shutdown completed successfully")
            
        except Exception as e:
            logger.error("‚ùå Error during shutdown: %s", e)
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            logger.info("üì® Received signal %s", signum)
            self._shutdown_event.set()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = BotApplication()
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        app.setup_signal_handlers()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await app.initialize()
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
        if settings.WEBHOOK_URL and not settings.DEBUG:
            # Webhook —Ä–µ–∂–∏–º –¥–ª—è production
            await app.start_webhook()
            logger.info("üéØ VideoBot Pro is running in WEBHOOK mode")
        else:
            # Polling —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            logger.info("üéØ VideoBot Pro is running in POLLING mode")
            
            # –ó–∞–ø—É—Å–∫ polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            polling_task = asyncio.create_task(app.start_polling())
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await app._shutdown_event.wait()
            
            # –û—Ç–º–µ–Ω–∞ polling
            polling_task.cancel()
            try:
                await polling_task
            except asyncio.CancelledError:
                pass
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Received keyboard interrupt")
    except Exception as e:
        logger.error("üí• Critical error: %s", e, exc_info=True)
        sys.exit(1)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await app.shutdown()


def run():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã VideoBot Pro stopped by user")
    except Exception as e:
        print(f"üí• Failed to start VideoBot Pro: {e}")
        sys.exit(1)


if __name__ == "__main__":
    run()