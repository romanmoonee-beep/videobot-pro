"""
VideoBot Pro - Notification Service
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import structlog
from typing import Dict, List, Optional, Any, Union
from datetime import datetime, timedelta
from enum import Enum
import asyncio

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from shared.config.database import get_async_session
from shared.models import User, DownloadTask, DownloadBatch, BroadcastMessage, EventType
from shared.models.analytics import track_system_event
from shared.config.settings import settings
from bot.config import bot_config
from bot.utils.message_builder import (
    build_success_message,
    build_error_message,
    format_file_size,
    format_duration
)

logger = structlog.get_logger(__name__)

class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    DOWNLOAD_COMPLETED = "download_completed"
    DOWNLOAD_FAILED = "download_failed"
    BATCH_COMPLETED = "batch_completed"
    BATCH_FAILED = "batch_failed"
    PREMIUM_EXPIRED = "premium_expired"
    TRIAL_EXPIRED = "trial_expired"
    SYSTEM_MAINTENANCE = "system_maintenance"
    BROADCAST = "broadcast"

class NotificationPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    LOW = 1
    NORMAL = 2
    HIGH = 3
    URGENT = 4

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        """
        self.bot = bot
        self.max_retries = 3
        self.retry_delays = [1, 5, 15]  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        self.rate_limit_delay = 1  # —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è flood
    
    async def notify_download_completed(
        self,
        user: User,
        task: DownloadTask,
        file_info: Optional[Dict] = None
    ) -> bool:
        """
        –£–≤–µ–¥–æ–º–∏—Ç—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            task: –ó–∞–¥–∞—á–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            file_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self._should_send_notification(user, NotificationType.DOWNLOAD_COMPLETED):
            return False
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = [
                "‚úÖ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>",
                "",
                f"üé¨ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {task.platform.title() if task.platform else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
            ]
            
            if task.title:
                message_text.append(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title[:50]}...")
            
            if task.duration_seconds:
                message_text.append(f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(task.duration_seconds)}")
            
            if task.file_size_bytes:
                message_text.append(f"üìä –†–∞–∑–º–µ—Ä: {format_file_size(task.file_size_bytes)}")
            
            if task.quality:
                message_text.append(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {task.quality}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CDN —Å—Å—ã–ª–∫–µ
            keyboard = None
            if task.cdn_url:
                message_text.extend([
                    "",
                    f"üîó –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
                ])
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                        url=task.cdn_url
                    )
                ]])
            
            text = "\n".join(message_text)
            
            return await self._send_notification(
                user_id=user.telegram_id,
                text=text,
                keyboard=keyboard,
                notification_type=NotificationType.DOWNLOAD_COMPLETED
            )
            
        except Exception as e:
            logger.error(f"Error sending download completed notification: {e}")
            return False
    
    async def notify_download_failed(
        self,
        user: User,
        task: DownloadTask,
        error_message: str
    ) -> bool:
        """
        –£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            task: –ó–∞–¥–∞—á–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        if not self._should_send_notification(user, NotificationType.DOWNLOAD_FAILED):
            return False
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_friendly_error = self._get_user_friendly_error(error_message)
            
            message_text = [
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</b>",
                "",
                f"üîó URL: {task.url[:50]}...",
                f"üé¨ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {task.platform.title() if task.platform else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                "",
                f"üí¨ –ü—Ä–∏—á–∏–Ω–∞: {user_friendly_error}"
            ]
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ—à–µ–Ω–∏—é
            suggestions = self._get_error_suggestions(error_message)
            if suggestions:
                message_text.extend(["", "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>"])
                message_text.extend([f"‚Ä¢ {suggestion}" for suggestion in suggestions])
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                        callback_data=f"retry_task_{task.id}"
                    ),
                    InlineKeyboardButton(
                        text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                        callback_data="support"
                    )
                ]
            ])
            
            text = "\n".join(message_text)
            
            return await self._send_notification(
                user_id=user.telegram_id,
                text=text,
                keyboard=keyboard,
                notification_type=NotificationType.DOWNLOAD_FAILED,
                priority=NotificationPriority.HIGH
            )
            
        except Exception as e:
            logger.error(f"Error sending download failed notification: {e}")
            return False
    
    async def notify_batch_completed(
        self,
        user: User,
        batch: DownloadBatch,
        completed_count: int,
        failed_count: int,
        total_size_mb: float = 0
    ) -> bool:
        """
        –£–≤–µ–¥–æ–º–∏—Ç—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ batch –∑–∞–≥—Ä—É–∑–∫–∏
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            batch: Batch –∑–∞–≥—Ä—É–∑–∫–∏
            completed_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            failed_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
            total_size_mb: –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –≤ –ú–ë
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        if not self._should_send_notification(user, NotificationType.BATCH_COMPLETED):
            return False
        
        try:
            total_files = batch.total_urls
            success_rate = (completed_count / total_files) * 100 if total_files > 0 else 0
            
            message_text = [
                "üéâ <b>–ì—Ä—É–ø–ø–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>",
                "",
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {completed_count}/{total_files} —Ñ–∞–π–ª–æ–≤",
                f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%"
            ]
            
            if failed_count > 0:
                message_text.append(f"‚ùå –û—à–∏–±–æ–∫: {failed_count}")
            
            if total_size_mb > 0:
                message_text.append(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.1f} MB")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Å–æ–±–µ –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_info = self._get_delivery_info(batch)
            if delivery_info:
                message_text.extend(["", delivery_info])
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
            keyboard_buttons = []
            
            if batch.archive_url:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text="üì¶ –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤",
                        url=batch.archive_url
                    )
                ])
            
            if failed_count > 0:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ",
                        callback_data=f"retry_batch_{batch.id}"
                    )
                ])
            
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data=f"batch_stats_{batch.id}"
                )
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None
            
            text = "\n".join(message_text)
            
            return await self._send_notification(
                user_id=user.telegram_id,
                text=text,
                keyboard=keyboard,
                notification_type=NotificationType.BATCH_COMPLETED
            )
            
        except Exception as e:
            logger.error(f"Error sending batch completed notification: {e}")
            return False
    
    async def notify_premium_expiring(
        self,
        user: User,
        days_remaining: int
    ) -> bool:
        """
        –£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ Premium
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            days_remaining: –î–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        if not self._should_send_notification(user, NotificationType.PREMIUM_EXPIRED):
            return False
        
        try:
            if days_remaining > 1:
                message_text = [
                    "‚è∞ <b>Premium —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!</b>",
                    "",
                    f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_remaining}",
                    f"üìÜ –ò—Å—Ç–µ–∫–∞–µ—Ç: {user.premium_expires_at.strftime('%d.%m.%Y')}",
                ]
            else:
                message_text = [
                    "üö® <b>Premium –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!</b>",
                    "",
                    "‚è∞ Premium –¥–æ—Å—Ç—É–ø –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.",
                ]
            
            message_text.extend([
                "",
                "üíé <b>–ß—Ç–æ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ:</b>",
                "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
                "‚Ä¢ 4K –∫–∞—á–µ—Å—Ç–≤–æ",
                "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                "‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ 30 –¥–Ω–µ–π",
                "",
                f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if user.premium_auto_renew else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}"
            ])
            
            keyboard_buttons = [
                [InlineKeyboardButton(
                    text="üíé –ü—Ä–æ–¥–ª–∏—Ç—å Premium",
                    callback_data="renew_premium"
                )]
            ]
            
            if not user.premium_auto_renew:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        text="üîÑ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ",
                        callback_data="enable_auto_renew"
                    )
                ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            text = "\n".join(message_text)
            
            return await self._send_notification(
                user_id=user.telegram_id,
                text=text,
                keyboard=keyboard,
                notification_type=NotificationType.PREMIUM_EXPIRED,
                priority=NotificationPriority.HIGH
            )
            
        except Exception as e:
            logger.error(f"Error sending premium expiring notification: {e}")
            return False
    
    async def notify_trial_expiring(
        self,
        user: User,
        minutes_remaining: int
    ) -> bool:
        """
        –£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            minutes_remaining: –ú–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        if not self._should_send_notification(user, NotificationType.TRIAL_EXPIRED):
            return False
        
        try:
            message_text = [
                "‚è∞ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!</b>",
                "",
                f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {minutes_remaining} –º–∏–Ω—É—Ç",
                "",
                "üéØ <b>–£—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>",
                "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏",
                "‚Ä¢ HD –∫–∞—á–µ—Å—Ç–≤–æ–º",
                "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π",
                "",
                "üíé <b>–ü–æ–ª—É—á–∏—Ç–µ Premium —Å–æ —Å–∫–∏–¥–∫–æ–π 20%!</b>"
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üíé –ö—É–ø–∏—Ç—å Premium (-20%)",
                    callback_data="buy_premium_trial_discount"
                )],
                [InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
                    callback_data="trial_stats"
                )]
            ])
            
            text = "\n".join(message_text)
            
            return await self._send_notification(
                user_id=user.telegram_id,
                text=text,
                keyboard=keyboard,
                notification_type=NotificationType.TRIAL_EXPIRED,
                priority=NotificationPriority.HIGH
            )
            
        except Exception as e:
            logger.error(f"Error sending trial expiring notification: {e}")
            return False
    
    async def send_broadcast(
        self,
        broadcast: BroadcastMessage,
        test_mode: bool = False
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
        
        Args:
            broadcast: –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            test_mode: –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            target_users = await self._get_broadcast_targets(broadcast, test_mode)
            
            stats = {
                'total_targets': len(target_users),
                'sent': 0,
                'failed': 0,
                'blocked': 0,
                'errors': []
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            for user_id in target_users:
                try:
                    success = await self._send_notification(
                        user_id=user_id,
                        text=broadcast.message_text,
                        parse_mode=broadcast.parse_mode,
                        keyboard=self._parse_broadcast_keyboard(broadcast.inline_buttons),
                        notification_type=NotificationType.BROADCAST
                    )
                    
                    if success:
                        stats['sent'] += 1
                    else:
                        stats['failed'] += 1
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(self.rate_limit_delay)
                    
                except TelegramForbiddenError:
                    stats['blocked'] += 1
                except Exception as e:
                    stats['failed'] += 1
                    stats['errors'].append(str(e))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
            async with get_async_session() as session:
                db_broadcast = await session.get(BroadcastMessage, broadcast.id)
                if db_broadcast:
                    db_broadcast.mark_as_completed(
                        sent_count=stats['sent'],
                        failed_count=stats['failed'],
                        blocked_count=stats['blocked']
                    )
                    await session.commit()
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            await track_system_event(
                event_type=EventType.BROADCAST_COMPLETED,
                event_data={
                    'broadcast_id': broadcast.id,
                    'target_type': broadcast.target_type,
                    **stats
                }
            )
            
            logger.info(
                "Broadcast completed",
                broadcast_id=broadcast.id,
                **stats
            )
            
            return stats
            
        except Exception as e:
            logger.error(f"Error sending broadcast: {e}")
            return {'error': str(e)}
    
    async def _send_notification(
        self,
        user_id: int,
        text: str,
        keyboard: Optional[InlineKeyboardMarkup] = None,
        parse_mode: str = "HTML",
        notification_type: NotificationType = NotificationType.SYSTEM_MAINTENANCE,
        priority: NotificationPriority = NotificationPriority.NORMAL
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        for attempt in range(self.max_retries):
            try:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode=parse_mode,
                    disable_web_page_preview=True
                )
                
                logger.debug(
                    "Notification sent",
                    user_id=user_id,
                    type=notification_type.value,
                    attempt=attempt + 1
                )
                
                return True
                
            except TelegramForbiddenError:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                await self._mark_user_as_blocked(user_id)
                logger.info(f"User {user_id} blocked the bot")
                return False
                
            except TelegramBadRequest as e:
                # –ù–µ–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
                logger.warning(f"Bad request sending notification: {e}")
                return False
                
            except Exception as e:
                logger.warning(
                    f"Error sending notification (attempt {attempt + 1}): {e}",
                    user_id=user_id
                )
                
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delays[attempt])
                else:
                    logger.error(f"Failed to send notification after {self.max_retries} attempts")
                    return False
        
        return False
    
    def _should_send_notification(self, user: User, notification_type: NotificationType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.is_banned or user.is_bot_blocked:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        notification_settings = user.notification_settings or {}
        
        if not notification_settings.get('enabled', True):
            return False
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        type_settings = {
            NotificationType.DOWNLOAD_COMPLETED: notification_settings.get('download_complete', True),
            NotificationType.DOWNLOAD_FAILED: notification_settings.get('download_complete', True),
            NotificationType.BATCH_COMPLETED: notification_settings.get('download_complete', True),
            NotificationType.PREMIUM_EXPIRED: notification_settings.get('premium_expiry', True),
            NotificationType.TRIAL_EXPIRED: notification_settings.get('trial_expiry', True),
            NotificationType.SYSTEM_MAINTENANCE: notification_settings.get('system_updates', True),
            NotificationType.BROADCAST: notification_settings.get('broadcasts', True),
        }
        
        return type_settings.get(notification_type, True)
    
    def _get_user_friendly_error(self, error_message: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ –ø–æ–Ω—è—Ç–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        error_lower = error_message.lower()
        
        if 'video unavailable' in error_lower or 'private' in error_lower:
            return "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ"
        elif 'age restricted' in error_lower:
            return "–í–∏–¥–µ–æ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
        elif 'geo blocked' in error_lower or 'not available in your country' in error_lower:
            return "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–µ"
        elif 'network' in error_lower or 'connection' in error_lower:
            return "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"
        elif 'timeout' in error_lower:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        elif 'file too large' in error_lower:
            return "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"
        elif 'format not available' in error_lower:
            return "–ù—É–∂–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        else:
            return "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
    
    def _get_error_suggestions(self, error_message: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ—à–µ–Ω–∏—é –æ—à–∏–±–∫–∏"""
        error_lower = error_message.lower()
        suggestions = []
        
        if 'video unavailable' in error_lower:
            suggestions.extend([
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ –∂–µ –≤–∏–¥–µ–æ"
            ])
        elif 'network' in error_lower:
            suggestions.extend([
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
            ])
        elif 'file too large' in error_lower:
            suggestions.extend([
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–Ω–∏–∂–µ",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ Premium –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"
            ])
        else:
            suggestions.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–∑–∂–µ")
        
        return suggestions
    
    def _get_delivery_info(self, batch: DownloadBatch) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–µ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        if batch.create_archive and batch.archive_url:
            expires_hours = 24 if batch.user.current_user_type == "free" else 30 * 24
            return f"üì¶ –§–∞–π–ª—ã —É–ø–∞–∫–æ–≤–∞–Ω—ã –≤ –∞—Ä—Ö–∏–≤ (–¥–æ—Å—Ç—É–ø–µ–Ω {expires_hours}—á)"
        elif batch.send_to_chat:
            return "üì± –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç –ø–æ –æ–¥–Ω–æ–º—É"
        else:
            return None
    
    async def _get_broadcast_targets(
        self,
        broadcast: BroadcastMessage,
        test_mode: bool = False
    ) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            async with get_async_session() as session:
                if test_mode:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                    query = """
                        SELECT telegram_id FROM users 
                        WHERE telegram_id = ANY(:admin_ids)
                        AND is_bot_blocked = false
                    """
                    params = {'admin_ids': bot_config.admin_ids}
                else:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
                    query = "SELECT telegram_id FROM users WHERE is_bot_blocked = false"
                    params = {}
                    
                    if broadcast.target_type == "premium_users":
                        query += " AND is_premium = true"
                    elif broadcast.target_type == "free_users":
                        query += " AND is_premium = false"
                    elif broadcast.target_type == "trial_users":
                        query += " AND user_type = 'trial'"
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
                    if broadcast.target_filters:
                        filters = broadcast.target_filters
                        
                        if 'last_active_days' in filters:
                            query += " AND last_active_at > NOW() - INTERVAL :days DAY"
                            params['days'] = filters['last_active_days']
                        
                        if 'registration_days' in filters:
                            query += " AND created_at > NOW() - INTERVAL :reg_days DAY"
                            params['reg_days'] = filters['registration_days']
                
                result = await session.execute(query, params)
                user_ids = [row[0] for row in result.fetchall()]
                
                return user_ids
                
        except Exception as e:
            logger.error(f"Error getting broadcast targets: {e}")
            return []
    
    def _parse_broadcast_keyboard(self, buttons_data: Optional[Dict]) -> Optional[InlineKeyboardMarkup]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not buttons_data:
            return None
        
        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            
            for row in buttons_data.get('inline_keyboard', []):
                button_row = []
                for button in row:
                    if 'url' in button:
                        button_row.append(InlineKeyboardButton(
                            text=button['text'],
                            url=button['url']
                        ))
                    elif 'callback_data' in button:
                        button_row.append(InlineKeyboardButton(
                            text=button['text'],
                            callback_data=button['callback_data']
                        ))
                
                if button_row:
                    keyboard.inline_keyboard.append(button_row)
            
            return keyboard if keyboard.inline_keyboard else None
            
        except Exception as e:
            logger.error(f"Error parsing broadcast keyboard: {e}")
            return None
    
    async def _mark_user_as_blocked(self, user_id: int):
        """–û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"""
        try:
            async with get_async_session() as session:
                user = await session.get(User, user_id)
                if user:
                    user.is_bot_blocked = True
                    user.bot_blocked_at = datetime.utcnow()
                    await session.commit()
        except Exception as e:
            logger.error(f"Error marking user as blocked: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
def create_notification_service(bot: Bot) -> NotificationService:
    """–°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return NotificationService(bot)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞)
notification_service: Optional[NotificationService] = None