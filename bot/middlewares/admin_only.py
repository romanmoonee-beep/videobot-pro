"""
VideoBot Pro - Admin Only Middleware
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""

import structlog
from typing import Any, Awaitable, Callable, Dict
from functools import wraps

from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, Update

from bot.config import bot_config

logger = structlog.get_logger(__name__)


class AdminOnlyMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    
    def __init__(self, auto_respond: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware
        
        Args:
            auto_respond: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        """
        self.auto_respond = auto_respond
    
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ handlers –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ admin_only
        handler_obj = data.get('handler')
        if handler_obj and not getattr(handler_obj.callback, '_admin_only', False):
            return await handler(event, data)
        
        user_id = self._get_user_id(event)
        
        if not user_id:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if not bot_config.is_admin(user_id):
            logger.warning(f"Unauthorized admin access attempt", user_id=user_id)
            
            if self.auto_respond:
                await self._handle_unauthorized_access(event)
            
            return None
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É handler
        return await handler(event, data)
    
    def _get_user_id(self, event: Update) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
        if isinstance(event, Message):
            return event.from_user.id if event.from_user else None
        elif isinstance(event, CallbackQuery):
            return event.from_user.id if event.from_user else None
        return None
    
    async def _handle_unauthorized_access(self, event: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        if isinstance(event, Message):
            try:
                await event.answer(
                    "üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
                )
            except Exception:
                pass
        elif isinstance(event, CallbackQuery):
            try:
                await event.answer(
                    "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                    show_alert=True
                )
            except Exception:
                pass


def admin_only(auto_respond: bool = True):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ handler —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    
    Args:
        auto_respond: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
    """
    def decorator(func):
        # –ü–æ–º–µ—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ —Ç—Ä–µ–±—É—é—â—É—é –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
        func._admin_only = True
        func._admin_auto_respond = auto_respond
        
        @wraps(func)
        async def wrapper(message_or_callback, *args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º user_id
            if hasattr(message_or_callback, 'from_user'):
                user_id = message_or_callback.from_user.id
            else:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
            if not bot_config.is_admin(user_id):
                logger.warning(
                    f"Unauthorized admin access attempt in {func.__name__}",
                    user_id=user_id
                )
                
                if auto_respond:
                    if hasattr(message_or_callback, 'answer'):
                        if isinstance(message_or_callback, CallbackQuery):
                            await message_or_callback.answer(
                                "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
                                show_alert=True
                            )
                        else:
                            await message_or_callback.answer(
                                "üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
                            )
                
                return None
            
            logger.info(f"Admin access granted", user_id=user_id, function=func.__name__)
            return await func(message_or_callback, *args, **kwargs)
        
        return wrapper
    return decorator


def owner_only():
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
    """
    def decorator(func):
        @wraps(func)
        async def wrapper(message_or_callback, *args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º user_id
            if hasattr(message_or_callback, 'from_user'):
                user_id = message_or_callback.from_user.id
            else:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü (–ø–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω –≤ —Å–ø–∏—Å–∫–µ)
            if not bot_config.admin_ids or user_id != bot_config.admin_ids[0]:
                logger.warning(
                    f"Unauthorized owner access attempt in {func.__name__}",
                    user_id=user_id
                )
                
                if hasattr(message_or_callback, 'answer'):
                    if isinstance(message_or_callback, CallbackQuery):
                        await message_or_callback.answer(
                            "üîí –¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞",
                            show_alert=True
                        )
                    else:
                        await message_or_callback.answer(
                            "üîí –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞."
                        )
                
                return None
            
            logger.info(f"Owner access granted", user_id=user_id, function=func.__name__)
            return await func(message_or_callback, *args, **kwargs)
        
        return wrapper
    return decorator