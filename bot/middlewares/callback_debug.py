"""
VideoBot Pro - Debug Callback Middleware
Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback'–æ–≤
"""

import structlog
from typing import Any, Awaitable, Callable, Dict, List
from collections import defaultdict, Counter
from datetime import datetime, timedelta

from aiogram import BaseMiddleware
from aiogram.types import CallbackQuery, Update

logger = structlog.get_logger(__name__)


class CallbackDebugMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è debug callback'–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware"""
        self.unhandled_callbacks = Counter()
        self.callback_stats = defaultdict(int)
        self.last_reset = datetime.utcnow()
    
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]], 
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"""
        
        if not isinstance(event, CallbackQuery):
            return await handler(event, data)
        
        callback_data = event.data
        user_id = event.from_user.id if event.from_user else None
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Å–µ callback'–∏
        self.callback_stats[callback_data] += 1
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º handler
            result = await handler(event, data)
            
            # –ï—Å–ª–∏ handler –≤–µ—Ä–Ω—É–ª None, –≤–æ–∑–º–æ–∂–Ω–æ callback –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if result is None:
                self.unhandled_callbacks[callback_data] += 1
                
                logger.warning(
                    f"Potentially unhandled callback: {callback_data}",
                    user_id=user_id,
                    count=self.unhandled_callbacks[callback_data]
                )
                
                # –ï—Å–ª–∏ callback –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ä–∞–∑, –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
                if self.unhandled_callbacks[callback_data] >= 5:
                    logger.error(
                        f"CRITICAL: Callback '{callback_data}' unhandled {self.unhandled_callbacks[callback_data]} times!",
                        user_id=user_id
                    )
            
            return result
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ callback'–∞—Ö
            logger.error(
                f"Error processing callback '{callback_data}': {e}",
                user_id=user_id,
                error_type=type(e).__name__
            )
            raise
    
    def get_debug_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É debug'–∞"""
        return {
            'total_callbacks': sum(self.callback_stats.values()),
            'unique_callbacks': len(self.callback_stats),
            'unhandled_count': sum(self.unhandled_callbacks.values()),
            'unhandled_unique': len(self.unhandled_callbacks),
            'top_callbacks': self.callback_stats.most_common(10),
            'top_unhandled': self.unhandled_callbacks.most_common(10),
            'last_reset': self.last_reset.isoformat()
        }
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.unhandled_callbacks.clear()
        self.callback_stats.clear()
        self.last_reset = datetime.utcnow()
        logger.info("Debug stats reset")
    
    def get_recommendations(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
        recommendations = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ callback'–∏
        top_unhandled = self.unhandled_callbacks.most_common(5)
        
        for callback, count in top_unhandled:
            if count >= 3:
                recommendations.append(
                    f"üî¥ CRITICAL: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è '{callback}' (–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω {count} —Ä–∞–∑)"
                )
            elif count >= 2:
                recommendations.append(
                    f"üü° WARNING: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è '{callback}' (–Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω {count} —Ä–∞–∑)"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        prefixes = defaultdict(int)
        for callback in self.unhandled_callbacks:
            if '_' in callback:
                prefix = callback.split('_')[0] + '_'
                prefixes[prefix] += 1
        
        for prefix, count in prefixes.items():
            if count >= 2:
                recommendations.append(
                    f"üí° SUGGEST: –°–æ–∑–¥–∞—Ç—å prefix handler –¥–ª—è '{prefix}*' ({count} —Ä–∞–∑–Ω—ã—Ö callback'–æ–≤)"
                )
        
        return recommendations


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä middleware
debug_middleware = CallbackDebugMiddleware()


def get_callback_debug_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ callback'–∞—Ö"""
    stats = debug_middleware.get_debug_stats()
    recommendations = debug_middleware.get_recommendations()
    
    return {
        **stats,
        'recommendations': recommendations,
        'health_score': calculate_callback_health_score(stats)
    }


def calculate_callback_health_score(stats: Dict[str, Any]) -> Dict[str, Any]:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å '–∑–¥–æ—Ä–æ–≤—å–µ' callback —Å–∏—Å—Ç–µ–º—ã"""
    
    total = stats['total_callbacks']
    unhandled = stats['unhandled_count']
    
    if total == 0:
        return {'score': 100, 'status': 'No callbacks processed'}
    
    success_rate = ((total - unhandled) / total) * 100
    
    if success_rate >= 95:
        status = 'EXCELLENT'
        color = 'üü¢'
    elif success_rate >= 90:
        status = 'GOOD'
        color = 'üü°'
    elif success_rate >= 80:
        status = 'WARNING'
        color = 'üü†'
    else:
        status = 'CRITICAL'
        color = 'üî¥'
    
    return {
        'score': round(success_rate, 1),
        'status': f"{color} {status}",
        'total_processed': total,
        'successful': total - unhandled,
        'failed': unhandled
    }


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è debug callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def debug_callback(callback_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è debug callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    def decorator(func):
        async def wrapper(callback, *args, **kwargs):
            logger.debug(f"Processing callback: {callback_name}", user_id=callback.from_user.id)
            
            try:
                result = await func(callback, *args, **kwargs)
                logger.debug(f"Callback {callback_name} processed successfully")
                return result
            except Exception as e:
                logger.error(f"Error in callback {callback_name}: {e}")
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
                raise
        
        return wrapper
    return decorator