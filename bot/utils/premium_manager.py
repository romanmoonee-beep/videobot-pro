"""
VideoBot Pro - Premium Manager
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Premium –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
"""

import structlog
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Optional, Dict, Any

from sqlalchemy.ext.asyncio import AsyncSession
from shared.models import User, UserType, Payment, PaymentStatus, EventType
from shared.models.analytics import track_payment_event, track_user_event
from bot.config import bot_config

logger = structlog.get_logger(__name__)


async def activate_premium(
    session: AsyncSession,
    user: User,
    duration_days: int,
    payment_id: Optional[str] = None
) -> Dict[str, Any]:
    """
    –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Premium –ø–æ–¥–ø–∏—Å–∫—É
    
    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        duration_days: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
        payment_id: ID –ø–ª–∞—Ç–µ–∂–∞
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    """
    try:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º premium
        user.activate_premium(duration_days)
        
        await session.flush()
        
        # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        await track_user_event(
            event_type=EventType.PREMIUM_ACTIVATED,
            user_id=user.id,
            telegram_user_id=user.telegram_id,
            user_type=UserType.PREMIUM,
            event_data={
                'duration_days': duration_days,
                'payment_id': payment_id
            }
        )
        
        logger.info(
            f"Premium activated",
            user_id=user.telegram_id,
            duration_days=duration_days,
            payment_id=payment_id
        )
        
        return {
            'success': True,
            'expires_at': user.premium_expires_at,
            'duration_days': duration_days,
            'message': f'Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration_days} –¥–Ω–µ–π!'
        }
    
    except Exception as e:
        logger.error(f"Error activating premium: {e}", user_id=user.telegram_id)
        return {
            'success': False,
            'error': 'activation_failed',
            'message': '–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Premium'
        }


async def check_premium_status(user: User) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Premium –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
    """
    if not user.is_premium and not user.is_premium_expired:
        return {
            'status': 'never_had',
            'can_purchase': True,
            'message': 'Premium –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
        }
    
    if user.is_premium_active:
        remaining = user.premium_expires_at - datetime.utcnow() if user.premium_expires_at else None
        return {
            'status': 'active',
            'expires_at': user.premium_expires_at,
            'auto_renew': user.premium_auto_renew,
            'remaining_days': remaining.days if remaining else 0,
            'message': 'Premium –∞–∫—Ç–∏–≤–µ–Ω'
        }
    
    return {
        'status': 'expired',
        'expired_at': user.premium_expires_at,
        'can_renew': True,
        'message': 'Premium –∏—Å—Ç–µ–∫'
    }


async def process_premium_payment(
    session: AsyncSession,
    user: User,
    payment: Payment
) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –∑–∞ Premium
    
    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payment: –û–±—ä–µ–∫—Ç –ø–ª–∞—Ç–µ–∂–∞
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        if payment.status != PaymentStatus.COMPLETED:
            return {
                'success': False,
                'error': 'payment_not_completed',
                'message': '–ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –ø–ª–∞–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
        duration_days = {
            'monthly': 30,
            'quarterly': 90,
            'yearly': 365
        }.get(payment.subscription_plan, 30)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º premium
        result = await activate_premium(
            session=session,
            user=user,
            duration_days=duration_days,
            payment_id=payment.payment_id
        )
        
        if result['success']:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
            payment.mark_as_applied()
            await session.flush()
            
            # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            await track_payment_event(
                event_type=EventType.PAYMENT_COMPLETED,
                user_id=user.id,
                payment_amount=float(payment.amount),
                payment_method=payment.payment_method
            )
        
        return result
    
    except Exception as e:
        logger.error(f"Error processing payment: {e}", user_id=user.telegram_id)
        return {
            'success': False,
            'error': 'processing_failed',
            'message': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞'
        }


async def cancel_premium_subscription(
    session: AsyncSession,
    user: User
) -> Dict[str, Any]:
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ Premium –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã
    """
    try:
        if not user.is_premium_active:
            return {
                'success': False,
                'error': 'no_active_subscription',
                'message': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏'
            }
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
        user.premium_auto_renew = False
        await session.flush()
        
        # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        await track_user_event(
            event_type=EventType.PREMIUM_CANCELLED,
            user_id=user.id,
            telegram_user_id=user.telegram_id
        )
        
        logger.info(f"Premium auto-renew cancelled", user_id=user.telegram_id)
        
        return {
            'success': True,
            'expires_at': user.premium_expires_at,
            'message': '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ'
        }
    
    except Exception as e:
        logger.error(f"Error cancelling subscription: {e}", user_id=user.telegram_id)
        return {
            'success': False,
            'error': 'cancellation_failed',
            'message': '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏'
        }


async def check_and_expire_premium(session: AsyncSession) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ Premium –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º premium
        result = await session.execute(
            """
            UPDATE users 
            SET user_type = 'free', is_premium = false
            WHERE is_premium = true
            AND premium_expires_at < NOW()
            AND premium_auto_renew = false
            RETURNING id, telegram_id
            """
        )
        
        expired = result.fetchall()
        count = len(expired)
        
        if count > 0:
            await session.commit()
            
            # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            for user_id, telegram_id in expired:
                await track_user_event(
                    event_type=EventType.PREMIUM_EXPIRED,
                    user_id=user_id,
                    telegram_user_id=telegram_id
                )
            
            logger.info(f"Expired {count} premium subscriptions")
        
        return count
    
    except Exception as e:
        logger.error(f"Error checking premium expiry: {e}")
        return 0


async def send_premium_reminder(
    bot,
    user: User,
    days_remaining: int
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ Premium
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        days_remaining: –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
        
    Returns:
        True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    try:
        message = f"""
üíé <b>–í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!</b>

–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_remaining}

{'üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ' if user.premium_auto_renew else '‚ö†Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ'}

–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:
- –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
- 4K –∫–∞—á–µ—Å—Ç–≤–æ
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /premium –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
"""
        
        await bot.send_message(
            chat_id=user.telegram_id,
            text=message,
            parse_mode='HTML'
        )
        
        return True
    
    except Exception as e:
        logger.error(f"Error sending premium reminder: {e}", user_id=user.telegram_id)
        return False