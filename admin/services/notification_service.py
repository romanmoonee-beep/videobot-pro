"""
VideoBot Pro - Notification Service
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
"""

from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from enum import Enum
import structlog
import asyncio

from shared.services.database import get_db_session
from shared.models import AdminUser, AnalyticsEvent
from ..config import admin_settings

logger = structlog.get_logger(__name__)

class NotificationType(str, Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    SYSTEM_ALERT = "system_alert"
    USER_ACTION = "user_action"
    PAYMENT_ISSUE = "payment_issue"
    DOWNLOAD_ERROR = "download_error"
    SECURITY_EVENT = "security_event"
    PERFORMANCE_WARNING = "performance_warning"
    BROADCAST_STATUS = "broadcast_status"
    MAINTENANCE = "maintenance"

class NotificationPriority(str, Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class NotificationChannel(str, Enum):
    """–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    EMAIL = "email"
    TELEGRAM = "telegram"
    WEBHOOK = "webhook"
    IN_APP = "in_app"

class NotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    def __init__(self):
        self.rate_limits = {}  # –î–ª—è rate limiting —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
    async def send_notification(
        self,
        notification_type: NotificationType,
        title: str,
        message: str,
        priority: NotificationPriority = NotificationPriority.MEDIUM,
        channels: List[NotificationChannel] = None,
        recipients: List[int] = None,  # admin_ids
        data: Dict[str, Any] = None
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        
        try:
            if channels is None:
                channels = [NotificationChannel.TELEGRAM, NotificationChannel.IN_APP]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            if recipients is None:
                recipients = await self._get_notification_recipients(notification_type, priority)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
            if not await self._check_rate_limit(notification_type, priority):
                logger.warning(f"Notification rate limited", type=notification_type)
                return {"success": False, "reason": "rate_limited"}
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = {
                "id": f"notif_{datetime.utcnow().timestamp()}",
                "type": notification_type.value,
                "title": title,
                "message": message,
                "priority": priority.value,
                "timestamp": datetime.utcnow().isoformat(),
                "data": data or {}
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º
            results = {}
            for channel in channels:
                try:
                    if channel == NotificationChannel.TELEGRAM:
                        results["telegram"] = await self._send_telegram_notification(
                            notification, recipients
                        )
                    elif channel == NotificationChannel.EMAIL:
                        results["email"] = await self._send_email_notification(
                            notification, recipients
                        )
                    elif channel == NotificationChannel.WEBHOOK:
                        results["webhook"] = await self._send_webhook_notification(
                            notification
                        )
                    elif channel == NotificationChannel.IN_APP:
                        results["in_app"] = await self._send_in_app_notification(
                            notification, recipients
                        )
                        
                except Exception as e:
                    logger.error(f"Failed to send {channel} notification: {e}")
                    results[channel.value] = {"success": False, "error": str(e)}
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            logger.info(
                "Notification sent",
                type=notification_type.value,
                priority=priority.value,
                channels=[c.value for c in channels],
                recipients_count=len(recipients),
                results=results
            )
            
            return {
                "success": True,
                "notification_id": notification["id"],
                "channels": results,
                "recipients_count": len(recipients)
            }
            
        except Exception as e:
            logger.error(f"Failed to send notification: {e}")
            return {"success": False, "error": str(e)}
    
    async def send_system_alert(
        self,
        alert_type: str,
        message: str,
        severity: str = "medium",
        details: Dict[str, Any] = None
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–ª–µ—Ä—Ç"""
        
        priority_map = {
            "low": NotificationPriority.LOW,
            "medium": NotificationPriority.MEDIUM,
            "high": NotificationPriority.HIGH,
            "critical": NotificationPriority.CRITICAL
        }
        
        priority = priority_map.get(severity, NotificationPriority.MEDIUM)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = f"üö® System Alert: {alert_type}"
        if severity == "critical":
            title = f"üî• CRITICAL: {alert_type}"
        elif severity == "high":
            title = f"‚ö†Ô∏è HIGH: {alert_type}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        channels = [NotificationChannel.IN_APP]
        if severity in ["high", "critical"]:
            channels.extend([NotificationChannel.TELEGRAM, NotificationChannel.EMAIL])
        
        return await self.send_notification(
            notification_type=NotificationType.SYSTEM_ALERT,
            title=title,
            message=message,
            priority=priority,
            channels=channels,
            data={
                "alert_type": alert_type,
                "severity": severity,
                "details": details or {}
            }
        )
    
    async def send_user_action_alert(
        self,
        action: str,
        user_id: int,
        admin_id: int,
        details: Dict[str, Any] = None
    ) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        
        critical_actions = ["user_deleted", "mass_ban", "data_export"]
        priority = NotificationPriority.HIGH if action in critical_actions else NotificationPriority.MEDIUM
        
        async with get_db_session() as session:
            admin = await session.get(AdminUser, admin_id)
            admin_username = admin.username if admin else f"Admin {admin_id}"
        
        action_names = {
            "user_banned": "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "user_unbanned": "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "user_deleted": "—É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "premium_granted": "–≤—ã–¥–∞–ª Premium",
            "premium_revoked": "–æ—Ç–æ–∑–≤–∞–ª Premium",
            "mass_ban": "–º–∞—Å—Å–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
            "data_export": "—ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        }
        
        action_text = action_names.get(action, action)
        
        return await self.send_notification(
            notification_type=NotificationType.USER_ACTION,
            title=f"üë§ User Action: {action}",
            message=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_username} {action_text} (User ID: {user_id})",
            priority=priority,
            data={
                "action": action,
                "user_id": user_id,
                "admin_id": admin_id,
                "admin_username": admin_username,
                "details": details or {}
            }
        )
    
    async def send_payment_alert(
        self,
        alert_type: str,
        payment_id: int,
        amount: float,
        currency: str,
        details: Dict[str, Any] = None
    ) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
        
        title_map = {
            "fraud_detected": "üîç –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂",
            "refund_requested": "üí∞ –ó–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—Ç–∞",
            "payment_failed": "‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞",
            "chargeback": "‚ö° Chargeback",
            "high_amount": "üíé –ö—Ä—É–ø–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
        }
        
        title = title_map.get(alert_type, f"üí≥ Payment Alert: {alert_type}")
        message = f"Payment ID: {payment_id}, Amount: {amount} {currency}"
        
        priority = NotificationPriority.HIGH if alert_type in ["fraud_detected", "chargeback"] else NotificationPriority.MEDIUM
        
        return await self.send_notification(
            notification_type=NotificationType.PAYMENT_ISSUE,
            title=title,
            message=message,
            priority=priority,
            data={
                "alert_type": alert_type,
                "payment_id": payment_id,
                "amount": amount,
                "currency": currency,
                "details": details or {}
            }
        )
    
    async def send_performance_warning(
        self,
        metric: str,
        current_value: float,
        threshold: float,
        details: Dict[str, Any] = None
    ) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é"""
        
        severity = "critical" if current_value > threshold * 1.5 else "high"
        priority = NotificationPriority.CRITICAL if severity == "critical" else NotificationPriority.HIGH
        
        metric_names = {
            "cpu_usage": "CPU Usage",
            "memory_usage": "Memory Usage", 
            "disk_usage": "Disk Usage",
            "response_time": "Response Time",
            "error_rate": "Error Rate",
            "queue_length": "Queue Length"
        }
        
        metric_name = metric_names.get(metric, metric)
        
        return await self.send_notification(
            notification_type=NotificationType.PERFORMANCE_WARNING,
            title=f"üìä Performance Warning: {metric_name}",
            message=f"{metric_name}: {current_value:.2f} (threshold: {threshold:.2f})",
            priority=priority,
            data={
                "metric": metric,
                "current_value": current_value,
                "threshold": threshold,
                "severity": severity,
                "details": details or {}
            }
        )
    
    async def send_broadcast_notification(
        self,
        broadcast_id: int,
        status: str,
        details: Dict[str, Any] = None
    ) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        
        status_icons = {
            "started": "üöÄ",
            "completed": "‚úÖ", 
            "failed": "‚ùå",
            "paused": "‚è∏Ô∏è",
            "cancelled": "üõë"
        }
        
        icon = status_icons.get(status, "üì¢")
        priority = NotificationPriority.HIGH if status == "failed" else NotificationPriority.MEDIUM
        
        return await self.send_notification(
            notification_type=NotificationType.BROADCAST_STATUS,
            title=f"{icon} Broadcast {status.title()}",
            message=f"Broadcast ID: {broadcast_id} - Status: {status}",
            priority=priority,
            data={
                "broadcast_id": broadcast_id,
                "status": status,
                "details": details or {}
            }
        )
    
    async def send_security_alert(
        self,
        event_type: str,
        description: str,
        ip_address: str = None,
        user_id: int = None,
        details: Dict[str, Any] = None
    ) -> Dict[str, Any]:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        
        return await self.send_notification(
            notification_type=NotificationType.SECURITY_EVENT,
            title=f"üîê Security Alert: {event_type}",
            message=f"{description}" + (f" (IP: {ip_address})" if ip_address else ""),
            priority=NotificationPriority.HIGH,
            channels=[NotificationChannel.TELEGRAM, NotificationChannel.EMAIL, NotificationChannel.IN_APP],
            data={
                "event_type": event_type,
                "description": description,
                "ip_address": ip_address,
                "user_id": user_id,
                "details": details or {}
            }
        )
    
    async def _get_notification_recipients(
        self,
        notification_type: NotificationType,
        priority: NotificationPriority
    ) -> List[int]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        
        try:
            async with get_db_session() as session:
                # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
                query = session.query(AdminUser).filter(
                    AdminUser.is_active == True
                )
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                if priority == NotificationPriority.CRITICAL:
                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
                    query = query.filter(
                        AdminUser.role.in_(["super_admin", "admin", "moderator"])
                    )
                elif priority == NotificationPriority.HIGH:
                    # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–¥–º–∏–Ω–∞–º –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
                    query = query.filter(
                        AdminUser.role.in_(["super_admin", "admin", "moderator"])
                    )
                elif notification_type in [NotificationType.SYSTEM_ALERT, NotificationType.SECURITY_EVENT]:
                    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏ security –∞–ª–µ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
                    query = query.filter(
                        AdminUser.role.in_(["super_admin", "admin"])
                    )
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º
                    pass
                
                admins = await query.all()
                return [admin.id for admin in admins]
                
        except Exception as e:
            logger.error(f"Failed to get notification recipients: {e}")
            return []
    
    async def _check_rate_limit(
        self,
        notification_type: NotificationType,
        priority: NotificationPriority
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limiting –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        if priority == NotificationPriority.CRITICAL:
            return True
        
        current_time = datetime.utcnow()
        rate_key = f"{notification_type.value}:{priority.value}"
        
        # –õ–∏–º–∏—Ç—ã –ø–æ —Ç–∏–ø–∞–º (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Å)
        limits = {
            f"{NotificationType.SYSTEM_ALERT.value}:high": 10,
            f"{NotificationType.SYSTEM_ALERT.value}:medium": 20,
            f"{NotificationType.PERFORMANCE_WARNING.value}:high": 5,
            f"{NotificationType.USER_ACTION.value}:medium": 50,
            f"{NotificationType.PAYMENT_ISSUE.value}:high": 10
        }
        
        limit = limits.get(rate_key, 30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –≤ —á–∞—Å
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
        if rate_key not in self.rate_limits:
            self.rate_limits[rate_key] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ —á–∞—Å–∞)
        hour_ago = current_time - timedelta(hours=1)
        self.rate_limits[rate_key] = [
            timestamp for timestamp in self.rate_limits[rate_key]
            if timestamp > hour_ago
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.rate_limits[rate_key]) >= limit:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        self.rate_limits[rate_key].append(current_time)
        return True
    
    async def _send_telegram_notification(
        self,
        notification: Dict[str, Any],
        recipients: List[int]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        
        if not admin_settings.TELEGRAM_NOTIFICATIONS:
            return {"success": False, "reason": "telegram_disabled"}
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            message = f"*{notification['title']}*\n\n{notification['message']}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if notification.get('data'):
                message += f"\n\n_Time: {notification['timestamp']}_"
            
            # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot API
            # –ù–∞–ø—Ä–∏–º–µ—Ä:
            # await telegram_bot.send_message_to_admins(message, recipients)
            
            logger.info(f"Telegram notification sent", recipients_count=len(recipients))
            
            return {
                "success": True,
                "recipients_count": len(recipients),
                "method": "telegram"
            }
            
        except Exception as e:
            logger.error(f"Failed to send Telegram notification: {e}")
            return {"success": False, "error": str(e)}
    
    async def _send_email_notification(
        self,
        notification: Dict[str, Any],
        recipients: List[int]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ email"""
        
        if not admin_settings.EMAIL_NOTIFICATIONS:
            return {"success": False, "reason": "email_disabled"}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º email –∞–¥—Ä–µ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            async with get_db_session() as session:
                admins = await session.query(AdminUser).filter(
                    AdminUser.id.in_(recipients),
                    AdminUser.email.isnot(None)
                ).all()
                
                email_addresses = [admin.email for admin in admins if admin.email]
            
            if not email_addresses:
                return {"success": False, "reason": "no_email_addresses"}
            
            # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ email
            # await email_service.send_notification_email(
            #     subject=notification['title'],
            #     body=notification['message'],
            #     recipients=email_addresses
            # )
            
            logger.info(f"Email notification sent", recipients_count=len(email_addresses))
            
            return {
                "success": True,
                "recipients_count": len(email_addresses),
                "method": "email"
            }
            
        except Exception as e:
            logger.error(f"Failed to send email notification: {e}")
            return {"success": False, "error": str(e)}
    
    async def _send_webhook_notification(
        self,
        notification: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webhook"""
        
        if not admin_settings.WEBHOOK_NOTIFICATIONS or not admin_settings.WEBHOOK_URL:
            return {"success": False, "reason": "webhook_disabled"}
        
        try:
            import aiohttp
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è webhook
            payload = {
                "event": "admin_notification",
                "notification": notification,
                "timestamp": notification["timestamp"],
                "source": "videobot_pro_admin"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    admin_settings.WEBHOOK_URL,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    
                    if response.status == 200:
                        logger.info("Webhook notification sent successfully")
                        return {"success": True, "method": "webhook"}
                    else:
                        logger.error(f"Webhook failed with status {response.status}")
                        return {"success": False, "error": f"HTTP {response.status}"}
            
        except Exception as e:
            logger.error(f"Failed to send webhook notification: {e}")
            return {"success": False, "error": str(e)}
    
    async def _send_in_app_notification(
        self,
        notification: Dict[str, Any],
        recipients: List[int]
    ) -> Dict[str, Any]:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        
        try:
            # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            
            logger.info(
                "In-app notification created",
                notification_id=notification["id"],
                recipients_count=len(recipients)
            )
            
            return {
                "success": True,
                "recipients_count": len(recipients),
                "method": "in_app"
            }
            
        except Exception as e:
            logger.error(f"Failed to create in-app notification: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_notification_settings(self, admin_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        
        try:
            async with get_db_session() as session:
                admin = await session.get(AdminUser, admin_id)
                
                if not admin:
                    return {"error": "Admin not found"}
                
                # TODO: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –º–æ–¥–µ–ª–∏ AdminUser
                # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                settings = {
                    "email_notifications": True,
                    "telegram_notifications": True,
                    "in_app_notifications": True,
                    "webhook_notifications": False,
                    "notification_types": {
                        NotificationType.SYSTEM_ALERT.value: {
                            "enabled": True,
                            "channels": ["telegram", "email", "in_app"]
                        },
                        NotificationType.USER_ACTION.value: {
                            "enabled": True,
                            "channels": ["in_app"]
                        },
                        NotificationType.PAYMENT_ISSUE.value: {
                            "enabled": True,
                            "channels": ["telegram", "in_app"]
                        },
                        NotificationType.SECURITY_EVENT.value: {
                            "enabled": True,
                            "channels": ["telegram", "email", "in_app"]
                        },
                        NotificationType.PERFORMANCE_WARNING.value: {
                            "enabled": True,
                            "channels": ["telegram", "in_app"]
                        }
                    },
                    "quiet_hours": {
                        "enabled": False,
                        "start_time": "22:00",
                        "end_time": "08:00",
                        "timezone": "UTC"
                    }
                }
                
                return settings
                
        except Exception as e:
            logger.error(f"Failed to get notification settings for admin {admin_id}: {e}")
            return {"error": str(e)}
    
    async def update_notification_settings(
        self,
        admin_id: int,
        settings: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        
        try:
            async with get_db_session() as session:
                admin = await session.get(AdminUser, admin_id)
                
                if not admin:
                    return {"error": "Admin not found"}
                
                # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–æ–¥–µ–ª—å AdminUser
                # admin.notification_settings = settings
                # await session.commit()
                
                logger.info(f"Notification settings updated for admin {admin_id}")
                
                return {"success": True, "message": "Settings updated"}
                
        except Exception as e:
            logger.error(f"Failed to update notification settings for admin {admin_id}: {e}")
            return {"error": str(e)}
    
    async def get_notification_history(
        self,
        admin_id: int = None,
        days: int = 7,
        notification_type: NotificationType = None,
        priority: NotificationPriority = None
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        try:
            # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            
            history = [
                {
                    "id": "notif_1",
                    "type": NotificationType.SYSTEM_ALERT.value,
                    "title": "High CPU Usage",
                    "message": "CPU usage: 85% (threshold: 80%)",
                    "priority": NotificationPriority.HIGH.value,
                    "timestamp": (datetime.utcnow() - timedelta(hours=2)).isoformat(),
                    "channels_sent": ["telegram", "in_app"],
                    "recipients_count": 3,
                    "status": "delivered"
                },
                {
                    "id": "notif_2", 
                    "type": NotificationType.USER_ACTION.value,
                    "title": "User Action: user_banned",
                    "message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä admin1 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (User ID: 12345)",
                    "priority": NotificationPriority.MEDIUM.value,
                    "timestamp": (datetime.utcnow() - timedelta(hours=5)).isoformat(),
                    "channels_sent": ["in_app"],
                    "recipients_count": 5,
                    "status": "delivered"
                }
            ]
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            if notification_type:
                history = [h for h in history if h["type"] == notification_type.value]
            
            if priority:
                history = [h for h in history if h["priority"] == priority.value]
            
            return history
            
        except Exception as e:
            logger.error(f"Failed to get notification history: {e}")
            return []
    
    async def test_notification_channels(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        test_notification = {
            "id": f"test_{datetime.utcnow().timestamp()}",
            "type": NotificationType.SYSTEM_ALERT.value,
            "title": "üß™ Test Notification",
            "message": "This is a test notification to verify all channels are working properly.",
            "priority": NotificationPriority.LOW.value,
            "timestamp": datetime.utcnow().isoformat(),
            "data": {"test": True}
        }
        
        results = {}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        channels = [
            NotificationChannel.TELEGRAM,
            NotificationChannel.EMAIL,
            NotificationChannel.WEBHOOK,
            NotificationChannel.IN_APP
        ]
        
        test_recipients = [1]  # ID –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        
        for channel in channels:
            try:
                if channel == NotificationChannel.TELEGRAM:
                    result = await self._send_telegram_notification(test_notification, test_recipients)
                elif channel == NotificationChannel.EMAIL:
                    result = await self._send_email_notification(test_notification, test_recipients)
                elif channel == NotificationChannel.WEBHOOK:
                    result = await self._send_webhook_notification(test_notification)
                elif channel == NotificationChannel.IN_APP:
                    result = await self._send_in_app_notification(test_notification, test_recipients)
                
                results[channel.value] = result
                
            except Exception as e:
                results[channel.value] = {"success": False, "error": str(e)}
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        all_successful = all(result.get("success", False) for result in results.values())
        
        return {
            "overall_success": all_successful,
            "channels": results,
            "test_timestamp": datetime.utcnow().isoformat()
        }
    
    async def send_daily_summary(self) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
            today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
            
            async with get_db_session() as session:
                # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                new_users = await session.query(User).filter(
                    User.created_at >= today,
                    User.is_deleted == False
                ).count()
                
                # –°–∫–∞—á–∏–≤–∞–Ω–∏—è
                downloads_today = await session.query(DownloadTask).filter(
                    DownloadTask.created_at >= today
                ).count()
                
                # –£—Å–ø–µ—à–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                successful_downloads = await session.query(DownloadTask).filter(
                    DownloadTask.created_at >= today,
                    DownloadTask.status == "completed"
                ).count()
                
                # –ü–ª–∞—Ç–µ–∂–∏
                payments_today = await session.query(Payment).filter(
                    Payment.created_at >= today,
                    Payment.status == "completed"
                ).count()
                
                # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
                revenue_today = await session.query(
                    func.sum(Payment.amount)
                ).filter(
                    Payment.created_at >= today,
                    Payment.status == "completed"
                ).scalar() or 0
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            summary = f"""üìä **Daily Summary - {today.strftime('%Y-%m-%d')}**

üë• **Users**: {new_users} new registrations
üì• **Downloads**: {downloads_today} total, {successful_downloads} successful
üí∞ **Revenue**: ${revenue_today:.2f} from {payments_today} payments

Success rate: {(successful_downloads/downloads_today*100) if downloads_today > 0 else 0:.1f}%
"""
            
            return await self.send_notification(
                notification_type=NotificationType.SYSTEM_ALERT,
                title="üìä Daily Summary",
                message=summary,
                priority=NotificationPriority.LOW,
                channels=[NotificationChannel.TELEGRAM, NotificationChannel.IN_APP],
                data={
                    "summary_type": "daily",
                    "date": today.isoformat(),
                    "metrics": {
                        "new_users": new_users,
                        "downloads_total": downloads_today,
                        "downloads_successful": successful_downloads,
                        "payments_count": payments_today,
                        "revenue": float(revenue_today)
                    }
                }
            )
            
        except Exception as e:
            logger.error(f"Failed to send daily summary: {e}")
            return {"success": False, "error": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()

# –ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def notify_system_alert(alert_type: str, message: str, severity: str = "medium"):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    return await notification_service.send_system_alert(alert_type, message, severity)

async def notify_user_action(action: str, user_id: int, admin_id: int, details: Dict[str, Any] = None):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    return await notification_service.send_user_action_alert(action, user_id, admin_id, details)

async def notify_payment_issue(alert_type: str, payment_id: int, amount: float, currency: str):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ø–ª–∞—Ç–µ–∂–æ–º"""
    return await notification_service.send_payment_alert(alert_type, payment_id, amount, currency)

async def notify_performance_warning(metric: str, current_value: float, threshold: float):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return await notification_service.send_performance_warning(metric, current_value, threshold)

async def notify_security_event(event_type: str, description: str, ip_address: str = None):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    return await notification_service.send_security_alert(event_type, description, ip_address)