"""
VideoBot Pro - Admin Commands Handler
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""

import structlog
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command

from sqlalchemy import text

from shared.config.database import get_async_session, DatabaseHealthCheck
from shared.models import User, DownloadBatch, Payment, RequiredChannel, BroadcastMessage, EventType
from shared.models.analytics import track_user_event
from shared.config.settings import settings
from bot.config import bot_config, is_admin
from bot.utils.user_manager import get_or_create_user
from bot.middlewares.admin_only import admin_only

logger = structlog.get_logger(__name__)

router = Router(name="admin_commands")


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    waiting_broadcast_text = State()
    waiting_user_search = State()
    waiting_channel_add = State()
    editing_settings = State()


@router.message(Command("admin"))
@admin_only()
async def admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with get_async_session() as session:
            # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            total_users = await session.execute(text("SELECT COUNT(*) FROM users WHERE is_deleted = false"))
            active_users = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE last_active_at > NOW() - INTERVAL '24 hours'")
            )
            premium_users = await session.execute(text("SELECT COUNT(*) FROM users WHERE is_premium = true"))
            
            # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            downloads_today = await session.execute(
                text("SELECT COUNT(*) FROM download_tasks WHERE DATE(created_at) = CURRENT_DATE")
            )
            revenue_today = await session.execute(
                text("SELECT COALESCE(SUM(amount), 0) FROM payments WHERE DATE(completed_at) = CURRENT_DATE AND status = 'completed'")
            )
        
        admin_text = [
            "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å VideoBot Pro",
            "",
            "üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users.scalar()}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_users.scalar()}", 
            f"‚Ä¢ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users.scalar()}",
            f"‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {downloads_today.scalar()}",
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è: ${revenue_today.scalar():.2f}",
            "",
            f"ü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {settings.APP_VERSION}",
            f"‚öôÔ∏è –†–µ–∂–∏–º: {settings.ENVIRONMENT}"
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"), 
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ],
            [
                InlineKeyboardButton(text="üìã –ö–∞–Ω–∞–ª—ã", callback_data="admin_channels"),
                InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="admin_finance")
            ],
            [
                InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system"),
                InlineKeyboardButton(text="üìù –õ–æ–≥–∏", callback_data="admin_logs")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
        
        await message.answer("\n".join(admin_text), reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin panel: {e}", user_id=user_id)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")


@router.message(Command("stats"))
@admin_only()
async def admin_stats_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    await show_detailed_stats(message)


@router.callback_query(F.data == "admin_stats")
async def handle_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await show_detailed_stats(callback.message, edit=True)
    await callback.answer()


async def show_detailed_stats(message: Message, edit: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        async with get_async_session() as session:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            total_users = await session.execute(text("SELECT COUNT(*) FROM users WHERE is_deleted = false"))
            active_24h = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE last_active_at > NOW() - INTERVAL '24 hours'")
            )
            active_7d = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE last_active_at > NOW() - INTERVAL '7 days'")
            )
            new_today = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE DATE(created_at) = CURRENT_DATE")
            )
            
            # Premium –∏ Trial
            premium_active = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE is_premium = true AND premium_expires_at > NOW()")
            )
            trial_active = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE user_type = 'trial' AND trial_expires_at > NOW()")
            )
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏—è
            downloads_today = await session.execute(
                text("SELECT COUNT(*) FROM download_tasks WHERE DATE(created_at) = CURRENT_DATE")
            )
            downloads_week = await session.execute(
                text("SELECT COUNT(*) FROM download_tasks WHERE created_at > NOW() - INTERVAL '7 days'")
            )
            success_rate = await session.execute(
                text("""SELECT ROUND(
                    COUNT(CASE WHEN status = 'completed' THEN 1 END) * 100.0 / COUNT(*), 2
                ) FROM download_tasks WHERE created_at > NOW() - INTERVAL '24 hours'""")
            )
            
            # –ü–ª–∞—Ç–µ–∂–∏
            revenue_today = await session.execute(
                text("SELECT COALESCE(SUM(amount), 0) FROM payments WHERE DATE(completed_at) = CURRENT_DATE AND status = 'completed'")
            )
            revenue_week = await session.execute(
                text("SELECT COALESCE(SUM(amount), 0) FROM payments WHERE completed_at > NOW() - INTERVAL '7 days' AND status = 'completed'")
            )
            payments_today = await session.execute(
                text("SELECT COUNT(*) FROM payments WHERE DATE(created_at) = CURRENT_DATE")
            )
            
            # –°–∏—Å—Ç–µ–º–∞
            db_health = await DatabaseHealthCheck.check_connection()
            
        stats_text = [
            "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
            "",
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users.scalar():,}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_24h.scalar():,}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_7d.scalar():,}",
            f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today.scalar():,}",
            f"‚Ä¢ Premium: {premium_active.scalar():,}",
            f"‚Ä¢ Trial –∞–∫—Ç–∏–≤–Ω—ã—Ö: {trial_active.scalar():,}",
            "",
            "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏—è:",
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {downloads_today.scalar():,}",
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {downloads_week.scalar():,}",
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate.scalar() or 0}%",
            "",
            "üí∞ –§–∏–Ω–∞–Ω—Å—ã:",
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è: ${revenue_today.scalar():.2f}",
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: ${revenue_week.scalar():.2f}",
            f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π —Å–µ–≥–æ–¥–Ω—è: {payments_today.scalar():,}",
            "",
            "üîß –°–∏—Å—Ç–µ–º–∞:",
            f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_health['status']}",
            f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ë–î: {db_health.get('response_time_ms', 0):.1f}ms"
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="admin_charts"),
                InlineKeyboardButton(text="üìã –û—Ç—á–µ—Ç—ã", callback_data="admin_reports")
            ],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        
        if edit:
            await message.edit_text("\n".join(stats_text), reply_markup=keyboard)
        else:
            await message.answer("\n".join(stats_text), reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error showing admin stats: {e}")
        error_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        if edit:
            await message.edit_text(error_text)
        else:
            await message.answer(error_text)


@router.callback_query(F.data == "admin_users")
async def handle_admin_users(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    users_text = [
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        "",
        "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        "‚Ä¢ –ü–æ Telegram ID",
        "‚Ä¢ –ü–æ username",
        "‚Ä¢ –ü–æ –∏–º–µ–Ω–∏",
        "",
        "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ @username –¥–ª—è –ø–æ–∏—Å–∫–∞"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_top_users"),
            InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ", callback_data="admin_new_users")
        ],
        [
            InlineKeyboardButton(text="üíé Premium", callback_data="admin_premium_users"),
            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_banned_users")
        ],
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text("\n".join(users_text), reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_user_search)
    await callback.answer()


@router.message(AdminStates.waiting_user_search)
@admin_only()
async def handle_user_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    search_query = message.text.strip()
    
    try:
        async with get_async_session() as session:
            user = None
            
            # –ü–æ–∏—Å–∫ –ø–æ Telegram ID
            if search_query.isdigit():
                telegram_id = int(search_query)
                user = await session.query(User).filter(User.telegram_id == telegram_id).first()
            
            # –ü–æ–∏—Å–∫ –ø–æ username
            elif search_query.startswith("@"):
                username = search_query[1:]
                result = await session.execute(
                    text("SELECT * FROM users WHERE username = :username"),
                    {'username': username}
                )
                user = result.first()
            
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
            else:
                user = await session.query(User).filter(
                    User.first_name.ilike(f"%{search_query}%")
                ).first()
            
            if not user:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            await show_user_details(message, user)
            await state.clear()
    
    except Exception as e:
        logger.error(f"Error in user search: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await state.clear()


async def show_user_details(message: Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    async with get_async_session() as session:
        downloads_count = (await session.execute)(
            text("SELECT COUNT(*) FROM download_tasks WHERE user_id = :user_id"),
            {"user_id": user.id}
        )
        payments_sum = await session.execute(
            text("SELECT COALESCE(SUM(amount), 0) FROM payments WHERE user_id = :user_id AND status = 'completed'"),
            {"user_id": user.id}
        )
    
    status_emoji = {
        "free": "üÜì",
        "trial": "üî•", 
        "premium": "üíé",
        "admin": "üëë"
    }.get(user.current_user_type, "‚ùì")
    
    user_text = [
        f"üë§ {user.display_name}",
        "",
        f"üÜî ID: {user.telegram_id}",
        f"üë§ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
        f"üîñ –¢–∏–ø: {status_emoji} {user.current_user_type}",
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}",
        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_active_at.strftime('%d.%m.%Y %H:%M') if user.last_active_at else '–Ω–∏–∫–æ–≥–¥–∞'}",
        "",
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
        f"‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π –≤—Å–µ–≥–æ: {downloads_count.scalar():,}",
        f"‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user.downloads_today}",
        f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${payments_sum.scalar():.2f}",
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.referrals_count}",
        "",
        f"üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user.is_banned else '–ê–∫—Ç–∏–≤–µ–Ω'}",
        f"üéÅ Trial: {'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if user.trial_used else '–î–æ—Å—Ç—É–ø–µ–Ω'}"
    ]
    
    if user.is_premium_active:
        user_text.append(f"üíé Premium –¥–æ: {user.premium_expires_at.strftime('%d.%m.%Y')}")
    
    if user.is_trial_active:
        remaining = user.trial_expires_at - datetime.utcnow()
        hours = int(remaining.total_seconds() // 3600)
        user_text.append(f"üî• Trial: –æ—Å—Ç–∞–ª–æ—Å—å {hours}—á")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíé –í—ã–¥–∞—Ç—å Premium", callback_data=f"admin_grant_premium_{user.id}"),
            InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Trial", callback_data=f"admin_grant_trial_{user.id}")
        ],
        [
            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if not user.is_banned else "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", 
                               callback_data=f"admin_ban_{user.id}" if not user.is_banned else f"admin_unban_{user.id}"),
            InlineKeyboardButton(text="üìß –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"admin_message_{user.id}")
        ],
        [
            InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_user_stats_{user.id}"),
            InlineKeyboardButton(text="üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data=f"admin_user_payments_{user.id}")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
    ])
    
    await message.answer("\n".join(user_text), reply_markup=keyboard)


@router.callback_query(F.data.startswith("admin_grant_premium_"))
async def handle_grant_premium(callback: CallbackQuery):
    """–í—ã–¥–∞—á–∞ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[-1])
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –í—ã–¥–∞–µ–º Premium –Ω–∞ 30 –¥–Ω–µ–π
            user.activate_premium(duration_days=30)
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await callback.bot.send_message(
                    user.telegram_id,
                    "üéâ –í–∞–º –≤—ã–¥–∞–Ω Premium –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π!\n\n"
                    "üíé –í—Å–µ Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã."
                )
            except Exception:
                pass
            
            await callback.answer("Premium –≤—ã–¥–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π", show_alert=True)
            await show_user_details(callback.message, user)
            
            logger.info(
                f"Premium granted by admin",
                admin_id=callback.from_user.id,
                target_user_id=user.telegram_id,
                duration_days=30
            )
    
    except Exception as e:
        logger.error(f"Error granting premium: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ Premium", show_alert=True)


@router.callback_query(F.data.startswith("admin_ban_"))
async def handle_ban_user(callback: CallbackQuery):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[-1])
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            user.ban_user("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            await session.commit()
            
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            await show_user_details(callback.message, user)
            
            logger.info(
                f"User banned by admin",
                admin_id=callback.from_user.id,
                target_user_id=user.telegram_id
            )
    
    except Exception as e:
        logger.error(f"Error banning user: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ", show_alert=True)


@router.callback_query(F.data == "admin_broadcast")
async def handle_admin_broadcast(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    broadcast_text = [
        "üì¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏",
        "",
        "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
        "",
        "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:",
        "‚Ä¢ HTML —Ä–∞–∑–º–µ—Ç–∫–∞",
        "‚Ä¢ –≠–º–æ–¥–∑–∏",
        "‚Ä¢ –°—Å—ã–ª–∫–∏",
        "",
        "üéØ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text("\n".join(broadcast_text), reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_broadcast_text)
    await callback.answer()


@router.message(AdminStates.waiting_broadcast_text)
@admin_only()
async def handle_broadcast_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    text = message.text or message.caption
    
    if not text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    preview_text = [
        "üì¢ –ü—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏:",
        "",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        text,
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        "",
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all"),
            InlineKeyboardButton(text="üÜì –¢–æ–ª—å–∫–æ Free", callback_data="broadcast_free")
        ],
        [
            InlineKeyboardButton(text="üíé –¢–æ–ª—å–∫–æ Premium", callback_data="broadcast_premium"),
            InlineKeyboardButton(text="üî• –¢–æ–ª—å–∫–æ Trial", callback_data="broadcast_trial")
        ],
        [
            InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–º –∑–∞ 7 –¥–Ω–µ–π", callback_data="broadcast_active"),
            InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–º –∑–∞ 3 –¥–Ω—è", callback_data="broadcast_new")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ])
    
    await message.answer("\n".join(preview_text), reply_markup=keyboard)
    await state.update_data(broadcast_text=text)


@router.callback_query(F.data.startswith("broadcast_"))
async def handle_broadcast_send(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    target_audience = callback.data.replace("broadcast_", "")
    data = await state.get_data()
    broadcast_text = data.get("broadcast_text")
    
    if not broadcast_text:
        await callback.answer("–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞
            admin = await get_or_create_user(
                session=session,
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            target_mapping = {
                "all": "all_users",
                "free": "free_users", 
                "premium": "premium_users",
                "trial": "trial_users",
                "active": "custom",
                "new": "custom"
            }
            
            target_type = target_mapping.get(target_audience, "all_users")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            broadcast = BroadcastMessage.create_broadcast(
                title=f"–ê–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞ {datetime.now().strftime('%d.%m %H:%M')}",
                message_text=broadcast_text,
                target_type=target_type,
                created_by_admin_id=admin.id
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            if target_audience == "active":
                broadcast.target_filters = {
                    "last_active_days": 7
                }
            elif target_audience == "new":
                broadcast.target_filters = {
                    "registration_days": 3
                }
            
            session.add(broadcast)
            await session.commit()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            from worker.tasks.notification_tasks import send_broadcast_message
            task = send_broadcast_message.delay(broadcast.id)
            
            await callback.message.edit_text(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
                f"üìã ID: {broadcast.id}\n"
                f"üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {target_audience}\n"
                f"‚ö° Task ID: {task.id}\n\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"
            )
            
            logger.info(
                f"Broadcast started by admin",
                admin_id=callback.from_user.id,
                broadcast_id=broadcast.id,
                target_audience=target_audience,
                task_id=task.id
            )
    
    except Exception as e:
        logger.error(f"Error starting broadcast: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
    
    await state.clear()
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")


@router.callback_query(F.data == "admin_system")
async def handle_admin_system(callback: CallbackQuery):
    """–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        db_health = await DatabaseHealthCheck.check_connection()
        
        system_text = [
            "üîß –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            "",
            f"ü§ñ –í–µ—Ä—Å–∏—è: {settings.APP_VERSION}",
            f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.ENVIRONMENT}",
            f"üîß Debug: {'–í–∫–ª—é—á–µ–Ω' if settings.DEBUG else '–û—Ç–∫–ª—é—á–µ–Ω'}",
            "",
            "üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:",
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {db_health['status']}",
            f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {db_health.get('response_time_ms', 0):.1f}ms",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {db_health.get('active_connections', 0)}",
            "",
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            f"‚Ä¢ Trial: {'–í–∫–ª—é—á–µ–Ω' if settings.TRIAL_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω'}",
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.REQUIRED_SUBS_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}",
            f"‚Ä¢ Premium: {'–í–∫–ª—é—á–µ–Ω' if settings.PREMIUM_SYSTEM_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω'}",
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="admin_restart"),
                InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", callback_data="admin_clear_cache")
            ],
            [
                InlineKeyboardButton(text="üìä Health Check", callback_data="admin_health"),
                InlineKeyboardButton(text="‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="admin_performance")
            ],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        
        await callback.message.edit_text("\n".join(system_text), reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing system info: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)
    
    await callback.answer()


@router.message(Command("maintenance"))
@admin_only()
async def maintenance_mode(message: Message):
    """–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    maintenance_text = [
        "üîß –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
        "",
        "‚ö†Ô∏è –í —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:",
        "‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞",
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è", 
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö",
        "",
        "üí° –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω" # TODO: –†–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîß –í–∫–ª—é—á–∏—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data="maintenance_on")],
        [InlineKeyboardButton(text="‚úÖ –û—Ç–∫–ª—é—á–∏—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data="maintenance_off")]
    ])
    
    await message.answer("\n".join(maintenance_text), reply_markup=keyboard)