"""
VideoBot Pro - Subscription Check Middleware
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
"""

import structlog
from typing import Any, Awaitable, Callable, Dict, Optional
from datetime import datetime, timedelta

from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, Update, InlineKeyboardMarkup, InlineKeyboardButton

from shared.config.database import get_async_session
from shared.models import User
from bot.config import bot_config
from bot.utils.subscription_checker import SubscriptionChecker

logger = structlog.get_logger(__name__)


class SubscriptionCheckMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
    
    def __init__(
        self,
        checker: Optional[SubscriptionChecker] = None,
        check_interval: int = 300,  # 5 –º–∏–Ω—É—Ç
        exempt_commands: Optional[list] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware
        
        Args:
            checker: –≠–∫–∑–µ–º–ø–ª—è—Ä SubscriptionChecker
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            exempt_commands: –ö–æ–º–∞–Ω–¥—ã, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        self.checker = checker
        self.check_interval = check_interval
        self.exempt_commands = exempt_commands or ['/start', '/help', '/premium']
        self._last_check = {}
    
    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not isinstance(event, Message):
            return await handler(event, data)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è
        if not bot_config.required_subs_enabled:
            return await handler(event, data)
        
        user_id = event.from_user.id if event.from_user else None
        if not user_id:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω–æ–π
        if event.text and any(event.text.startswith(cmd) for cmd in self.exempt_commands):
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not await self._should_check_subscription(user_id):
            return await handler(event, data)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
        is_subscribed = await self._check_user_subscriptions(user_id)
        
        if not is_subscribed:
            await self._handle_missing_subscriptions(event)
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self._last_check[user_id] = datetime.utcnow()
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É handler
        return await handler(event, data)
    
    async def _should_check_subscription(self, user_id: int) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        if bot_config.is_admin(user_id):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            
            if not user:
                return True
            
            # Premium –∏ admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã
            if user.current_user_type in ['premium', 'admin']:
                return False
            
            # Trial –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–æ–∂–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã
            if user.current_user_type == 'trial' and not bot_config.trial_requires_subscription:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if user_id in self._last_check:
            last_check = self._last_check[user_id]
            if datetime.utcnow() - last_check < timedelta(seconds=self.check_interval):
                return False
        
        return True
    
    async def _check_user_subscriptions(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        """
        if not self.checker:
            return True
        
        try:
            async with get_async_session() as session:
                result = await self.checker.check_user_subscriptions(
                    user_id=user_id,
                    session=session,
                    force_check=False
                )
                
                return result.get('all_subscribed', False)
        
        except Exception as e:
            logger.error(f"Error checking subscriptions: {e}", user_id=user_id)
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return True
    
    async def _handle_missing_subscriptions(self, event: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏",
                    callback_data="check_subscriptions"
                )],
                [InlineKeyboardButton(
                    text="üíé –ö—É–ø–∏—Ç—å Premium (–±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫)",
                    callback_data="buy_premium"
                )]
            ])
            
            await event.answer(
                "üîí <b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.\n"
                "–≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É!\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫.",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"Error sending subscription message: {e}")


class SkipSubscriptionCheck:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    def __init__(self, middleware: SubscriptionCheckMiddleware, user_id: int):
        self.middleware = middleware
        self.user_id = user_id
        self.original_value = None
    
    def __enter__(self):
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        self.original_value = self.middleware._last_check.get(self.user_id)
        self.middleware._last_check[self.user_id] = datetime.utcnow()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if self.original_value:
            self.middleware._last_check[self.user_id] = self.original_value
        else:
            self.middleware._last_check.pop(self.user_id, None)