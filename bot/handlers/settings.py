"""
VideoBot Pro - User Settings Handler
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import structlog
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command

from shared.config.database import get_async_session
from shared.models import User
from bot.config import bot_config
from bot.utils.user_manager import get_or_create_user, update_user_activity

logger = structlog.get_logger(__name__)

router = Router(name="settings")


class SettingsStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    editing_language = State()
    editing_quality = State()
    editing_notifications = State()


@router.message(Command("settings"))
async def settings_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = message.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await get_or_create_user(
                session=session,
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name
            )
            
            await update_user_activity(session, user, message.message_id)
            await session.commit()
        
        await show_main_settings(message, user)
        
    except Exception as e:
        logger.error(f"Error in settings command: {e}", user_id=user_id)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data == "settings")
async def handle_settings_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await get_or_create_user(
                session=session,
                telegram_id=user_id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name
            )
            await session.commit()
        
        await show_main_settings(callback.message, user, edit=True)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in settings callback: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


async def show_main_settings(message: Message, user: User, edit: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    current_language = user.ui_language or "ru"
    language_name = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English"}.get(current_language, "–†—É—Å—Å–∫–∏–π")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    download_prefs = user.download_preferences or {}
    quality_mode = download_prefs.get("quality_mode", "auto")
    quality_display = {
        "auto": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ",
        "manual": "–†—É—á–Ω–æ–µ",
        "max": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ"
    }.get(quality_mode, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_prefs = user.notification_settings or {}
    notifications_enabled = notification_prefs.get("enabled", True)
    
    settings_text = [
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "",
        "üì± –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        f"‚Ä¢ üåê –Ø–∑—ã–∫: {language_name}",
        f"‚Ä¢ üé¨ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {quality_display}",
        f"‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if notifications_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}",
        "",
        "üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    ]
    
    keyboard_rows = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    keyboard_rows.extend([
        [InlineKeyboardButton(text="üåê –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", callback_data="settings_language")],
        [InlineKeyboardButton(text="üé¨ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", callback_data="settings_quality")],
        [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")]
    ])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    keyboard_rows.append([InlineKeyboardButton(text="üì¶ –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤", callback_data="settings_delivery")])
    
    # Premium –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if user.current_user_type in ["premium", "admin"]:
        keyboard_rows.extend([
            [InlineKeyboardButton(text="üé® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="settings_personalization")],
            [InlineKeyboardButton(text="üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_advanced")]
        ])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    keyboard_rows.extend([
        [InlineKeyboardButton(text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="settings_privacy")],
        [InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="settings_export")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    text = "\n".join(settings_text)
    
    if edit:
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "settings_language")
async def handle_language_settings(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            current_language = user.ui_language or "ru"

            language_text = [
                "üåê –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                "",
                f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: { {'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English'}.get(current_language, '–†—É—Å—Å–∫–∏–π')}",
                "",
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:"
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'‚úÖ' if current_language == 'ru' else 'üîò'} –†—É—Å—Å–∫–∏–π",
                    callback_data="set_language_ru"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ' if current_language == 'en' else 'üîò'} English", 
                    callback_data="set_language_en"
                )],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")]
            ])
            
            await callback.message.edit_text("\n".join(language_text), reply_markup=keyboard)
            await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in language settings: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è–∑—ã–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("set_language_"))
async def handle_set_language(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞"""
    user_id = callback.from_user.id
    language = callback.data.split("_")[-1]
    
    if language not in ["ru", "en"]:
        await callback.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫", show_alert=True)
        return
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            user.ui_language = language
            await session.commit()
            
            language_name = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English"}[language]
            await callback.answer(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {language_name}", show_alert=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            await show_main_settings(callback.message, user, edit=True)
            
            logger.info(f"Language changed", user_id=user_id, language=language)
    
    except Exception as e:
        logger.error(f"Error setting language: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞", show_alert=True)


@router.callback_query(F.data == "settings_quality")
async def handle_quality_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            download_prefs = user.download_preferences or {}
            current_mode = download_prefs.get("quality_mode", "auto")
            max_quality = bot_config.get_user_file_limit(user.current_user_type)
            
            quality_text = [
                "üé¨ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ",
                "",
                f"–í–∞—à —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {user.current_user_type}",
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {max_quality}",
                "",
                "–†–µ–∂–∏–º—ã –∫–∞—á–µ—Å—Ç–≤–∞:"
            ]
            
            keyboard_rows = [
                [InlineKeyboardButton(
                    text=f"{'‚úÖ' if current_mode == 'auto' else 'üîò'} –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                    callback_data="set_quality_auto"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ' if current_mode == 'max' else 'üîò'} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ",
                    callback_data="set_quality_max"
                )]
            ]
            
            # –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è Premium
            if user.current_user_type in ["premium", "admin"]:
                keyboard_rows.append([InlineKeyboardButton(
                    text=f"{'‚úÖ' if current_mode == 'manual' else 'üîò'} –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä",
                    callback_data="set_quality_manual"
                )])
            
            keyboard_rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
            
            await callback.message.edit_text("\n".join(quality_text), reply_markup=keyboard)
            await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in quality settings: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—á–µ—Å—Ç–≤–∞", show_alert=True)


@router.callback_query(F.data.startswith("set_quality_"))
async def handle_set_quality(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    user_id = callback.from_user.id
    quality_mode = callback.data.split("_")[-1]
    
    if quality_mode not in ["auto", "max", "manual"]:
        await callback.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–∂–∏–º", show_alert=True)
        return
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞
            if quality_mode == "manual" and user.current_user_type not in ["premium", "admin"]:
                await callback.answer("–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Premium", show_alert=True)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not user.download_preferences:
                user.download_preferences = {}
            
            user.download_preferences["quality_mode"] = quality_mode
            await session.commit()
            
            mode_names = {
                "auto": "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ",
                "max": "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ", 
                "manual": "—Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä"
            }
            
            await callback.answer(f"–ö–∞—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {mode_names[quality_mode]}", show_alert=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            await show_main_settings(callback.message, user, edit=True)
            
            logger.info(f"Quality mode changed", user_id=user_id, quality_mode=quality_mode)
    
    except Exception as e:
        logger.error(f"Error setting quality: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(F.data == "settings_notifications")
async def handle_notification_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            notification_prefs = user.notification_settings or {}
            
            notification_text = [
                "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "",
                "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–º, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:"
            ]
            
            # –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            enabled = notification_prefs.get("enabled", True)
            download_complete = notification_prefs.get("download_complete", True)
            premium_expiry = notification_prefs.get("premium_expiry", True)
            system_updates = notification_prefs.get("system_updates", True)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'üîî' if enabled else 'üîï'} –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    callback_data="toggle_notifications_enabled"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ' if download_complete else '‚ùå'} –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
                    callback_data="toggle_notifications_download"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ' if premium_expiry else '‚ùå'} –ò—Å—Ç–µ—á–µ–Ω–∏–µ Premium",
                    callback_data="toggle_notifications_premium"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ' if system_updates else '‚ùå'} –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    callback_data="toggle_notifications_system"
                )],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")]
            ])
            
            await callback.message.edit_text("\n".join(notification_text), reply_markup=keyboard)
            await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in notification settings: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", show_alert=True)


@router.callback_query(F.data.startswith("toggle_notifications_"))
async def handle_toggle_notification(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    setting_key = callback.data.replace("toggle_notifications_", "")
    
    key_mapping = {
        "enabled": "enabled",
        "download": "download_complete", 
        "premium": "premium_expiry",
        "system": "system_updates"
    }
    
    if setting_key not in key_mapping:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", show_alert=True)
        return
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            if not user.notification_settings:
                user.notification_settings = {}
            
            setting_name = key_mapping[setting_key]
            current_value = user.notification_settings.get(setting_name, True)
            user.notification_settings[setting_name] = not current_value
            
            await session.commit()
            
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if not current_value else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}", show_alert=False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await handle_notification_settings(callback)
            
            logger.info(f"Notification setting changed", user_id=user_id, setting=setting_name, value=not current_value)
    
    except Exception as e:
        logger.error(f"Error toggling notification: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(F.data == "settings_delivery")
async def handle_delivery_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            download_prefs = user.download_preferences or {}
            default_delivery = download_prefs.get("default_delivery", "individual")
            
            delivery_text = [
                "üì¶ –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤",
                "",
                "–ö–∞–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—É—á–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–∏ batch —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:",
                "",
                "üì± –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ - –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
                "üì¶ –ê—Ä—Ö–∏–≤–æ–º - –≤—Å–µ —Ñ–∞–π–ª—ã –≤ ZIP —á–µ—Ä–µ–∑ CDN",
                "ü§î –°–ø—Ä–∞—à–∏–≤–∞—Ç—å - –≤—ã–±–æ—Ä –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏"
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{'‚úÖ' if default_delivery == 'individual' else 'üîò'} –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ",
                    callback_data="set_delivery_individual"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ' if default_delivery == 'archive' else 'üîò'} –ê—Ä—Ö–∏–≤–æ–º",
                    callback_data="set_delivery_archive"
                )],
                [InlineKeyboardButton(
                    text=f"{'‚úÖ' if default_delivery == 'ask' else 'üîò'} –í—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å",
                    callback_data="set_delivery_ask"
                )],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")]
            ])
            
            await callback.message.edit_text("\n".join(delivery_text), reply_markup=keyboard)
            await callback.answer()
    
    except Exception as e:
        logger.error(f"Error in delivery settings: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("set_delivery_"))
async def handle_set_delivery(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    user_id = callback.from_user.id
    delivery_mode = callback.data.split("_")[-1]
    
    if delivery_mode not in ["individual", "archive", "ask"]:
        await callback.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–ø–æ—Å–æ–±", show_alert=True)
        return
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            if not user.download_preferences:
                user.download_preferences = {}
            
            user.download_preferences["default_delivery"] = delivery_mode
            await session.commit()
            
            mode_names = {
                "individual": "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ",
                "archive": "–∞—Ä—Ö–∏–≤–æ–º",
                "ask": "–≤—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å"
            }
            
            await callback.answer(f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {mode_names[delivery_mode]}", show_alert=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            await show_main_settings(callback.message, user, edit=True)
            
            logger.info(f"Delivery mode changed", user_id=user_id, delivery_mode=delivery_mode)
    
    except Exception as e:
        logger.error(f"Error setting delivery: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(F.data == "settings_privacy")
async def handle_privacy_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
    privacy_text = [
        "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏",
        "",
        "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:",
        "‚Ä¢ –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã",
        "‚Ä¢ –í–∞—à–∏ —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è",
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ",
        "",
        "üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:",
        "‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞",
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º",
        "",
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:",
        "‚Ä¢ –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É",
        "‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π",
        "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ CDN"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–π", callback_data="privacy_clear_history")],
        [InlineKeyboardButton(text="üìÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="privacy_policy")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="privacy_delete_account")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")]
    ])
    
    await callback.message.edit_text("\n".join(privacy_text), reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "settings_export")
async def handle_export_settings(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    
    export_text = [
        "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
        "",
        "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–π",
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π (–¥–ª—è Premium)",
        "",
        "üìß –≠–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: –¥–æ 5 –º–∏–Ω—É—Ç"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="export_all_data")],
        [InlineKeyboardButton(text="üìä –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="export_stats_only")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")]
    ])
    
    await callback.message.edit_text("\n".join(export_text), reply_markup=keyboard)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∏)
@router.callback_query(F.data == "export_all_data")
async def handle_export_all(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "privacy_clear_history")  
async def handle_clear_history(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "privacy_delete_account")
async def handle_delete_account(callback: CallbackQuery):
    await callback.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)