"""
VideoBot Pro - Admin Commands Handler
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""

import structlog
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command

from sqlalchemy import text, select

from shared.config.database import get_async_session, DatabaseHealthCheck
from shared.models import User, DownloadBatch, Payment, RequiredChannel, BroadcastMessage, EventType
from shared.models.analytics import track_user_event
from shared.config.settings import settings
from bot.config import bot_config, is_admin
from bot.utils.user_manager import get_or_create_user
from bot.middlewares.admin_only import admin_only

logger = structlog.get_logger(__name__)

router = Router(name="admin_commands")


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    waiting_broadcast_text = State()
    waiting_user_search = State()
    waiting_channel_add = State()
    editing_settings = State()


@router.message(Command("admin"))
@admin_only()
async def admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with get_async_session() as session:
            # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            total_users_result = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE is_deleted = false")
            )
            total_users = total_users_result.scalar()
            
            active_users_result = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE last_active_at > NOW() - INTERVAL '24 hours'")
            )
            active_users = active_users_result.scalar()
            
            premium_users_result = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE user_type = 'premium'")
            )
            premium_users = premium_users_result.scalar()
            
            # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            downloads_today_result = await session.execute(
                text("SELECT COUNT(*) FROM download_tasks WHERE DATE(created_at) = CURRENT_DATE")
            )
            downloads_today = downloads_today_result.scalar()
            
            revenue_today_result = await session.execute(
                text("SELECT COALESCE(SUM(amount), 0) FROM payments WHERE DATE(completed_at) = CURRENT_DATE AND status = 'completed'")
            )
            revenue_today = revenue_today_result.scalar()
        
        admin_text = [
            "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å VideoBot Pro",
            "",
            "üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_users}", 
            f"‚Ä¢ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {premium_users}",
            f"‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {downloads_today}",
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è: ${revenue_today:.2f}",
            "",
            f"ü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {settings.APP_VERSION}",
            f"‚öôÔ∏è –†–µ–∂–∏–º: {settings.ENVIRONMENT}"
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"), 
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ],
            [
                InlineKeyboardButton(text="üìã –ö–∞–Ω–∞–ª—ã", callback_data="admin_channels"),
                InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="admin_finance")
            ],
            [
                InlineKeyboardButton(text="üîß –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system"),
                InlineKeyboardButton(text="üìù –õ–æ–≥–∏", callback_data="admin_logs")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
        ])
        
        await message.answer("\n".join(admin_text), reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in admin panel: {e}", user_id=user_id)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")


@router.message(Command("stats"))
@admin_only()
async def admin_stats_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    await show_detailed_stats(message)


@router.callback_query(F.data == "admin_stats")
async def handle_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await show_detailed_stats(callback.message, edit=True)
    await callback.answer()


async def show_detailed_stats(message: Message, edit: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        async with get_async_session() as session:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            total_users_result = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE is_deleted = false")
            )
            total_users = total_users_result.scalar()
            
            active_24h_result = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE last_active_at > NOW() - INTERVAL '24 hours'")
            )
            active_24h = active_24h_result.scalar()
            
            active_7d_result = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE last_active_at > NOW() - INTERVAL '7 days'")
            )
            active_7d = active_7d_result.scalar()
            
            new_today_result = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE DATE(created_at) = CURRENT_DATE")
            )
            new_today = new_today_result.scalar()
            
            # Premium –∏ Trial
            premium_active_result = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE user_type = 'premium' AND premium_expires_at > NOW()")
            )
            premium_active = premium_active_result.scalar()
            
            trial_active_result = await session.execute(
                text("SELECT COUNT(*) FROM users WHERE user_type = 'trial' AND trial_expires_at > NOW()")
            )
            trial_active = trial_active_result.scalar()
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏—è
            downloads_today_result = await session.execute(
                text("SELECT COUNT(*) FROM download_tasks WHERE DATE(created_at) = CURRENT_DATE")
            )
            downloads_today = downloads_today_result.scalar()
            
            downloads_week_result = await session.execute(
                text("SELECT COUNT(*) FROM download_tasks WHERE created_at > NOW() - INTERVAL '7 days'")
            )
            downloads_week = downloads_week_result.scalar()
            
            success_rate_result = await session.execute(
                text("""SELECT ROUND(
                    COUNT(CASE WHEN status = 'completed' THEN 1 END) * 100.0 / COUNT(*), 2
                ) FROM download_tasks WHERE created_at > NOW() - INTERVAL '24 hours'""")
            )
            success_rate = success_rate_result.scalar()
            
            # –ü–ª–∞—Ç–µ–∂–∏
            revenue_today_result = await session.execute(
                text("SELECT COALESCE(SUM(amount), 0) FROM payments WHERE DATE(completed_at) = CURRENT_DATE AND status = 'completed'")
            )
            revenue_today = revenue_today_result.scalar()
            
            revenue_week_result = await session.execute(
                text("SELECT COALESCE(SUM(amount), 0) FROM payments WHERE completed_at > NOW() - INTERVAL '7 days' AND status = 'completed'")
            )
            revenue_week = revenue_week_result.scalar()
            
            payments_today_result = await session.execute(
                text("SELECT COUNT(*) FROM payments WHERE DATE(created_at) = CURRENT_DATE")
            )
            payments_today = payments_today_result.scalar()
            
            # –°–∏—Å—Ç–µ–º–∞
            db_health = await DatabaseHealthCheck.check_connection()
            
        stats_text = [
            "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
            "",
            "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users:,}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_24h:,}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_7d:,}",
            f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today:,}",
            f"‚Ä¢ Premium: {premium_active:,}",
            f"‚Ä¢ Trial –∞–∫—Ç–∏–≤–Ω—ã—Ö: {trial_active:,}",
            "",
            "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏—è:",
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {downloads_today:,}",
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {downloads_week:,}",
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate or 0}%",
            "",
            "üí∞ –§–∏–Ω–∞–Ω—Å—ã:",
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è: ${revenue_today:.2f}",
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: ${revenue_week:.2f}",
            f"‚Ä¢ –ü–ª–∞—Ç–µ–∂–µ–π —Å–µ–≥–æ–¥–Ω—è: {payments_today:,}",
            "",
            "üîß –°–∏—Å—Ç–µ–º–∞:",
            f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_health['status']}",
            f"‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ë–î: {db_health.get('response_time_ms', 0):.1f}ms"
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="admin_charts"),
                InlineKeyboardButton(text="üìã –û—Ç—á–µ—Ç—ã", callback_data="admin_reports")
            ],
            [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        
        if edit:
            await message.edit_text("\n".join(stats_text), reply_markup=keyboard)
        else:
            await message.answer("\n".join(stats_text), reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error showing admin stats: {e}")
        error_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        if edit:
            await message.edit_text(error_text)
        else:
            await message.answer(error_text)


@router.callback_query(F.data == "admin_users")
async def handle_admin_users(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    users_text = [
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        "",
        "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        "‚Ä¢ –ü–æ Telegram ID",
        "‚Ä¢ –ü–æ username",
        "‚Ä¢ –ü–æ –∏–º–µ–Ω–∏",
        "",
        "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ @username –¥–ª—è –ø–æ–∏—Å–∫–∞"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_top_users"),
            InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ", callback_data="admin_new_users")
        ],
        [
            InlineKeyboardButton(text="üíé Premium", callback_data="admin_premium_users"),
            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_banned_users")
        ],
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text("\n".join(users_text), reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_user_search)
    await callback.answer()


@router.message(AdminStates.waiting_user_search)
@admin_only()
async def handle_user_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    search_query = message.text.strip()
    
    try:
        async with get_async_session() as session:
            user = None
            
            # –ü–æ–∏—Å–∫ –ø–æ Telegram ID
            if search_query.isdigit():
                telegram_id = int(search_query)
                result = await session.execute(
                    select(User).where(User.telegram_id == telegram_id)
                )
                user = result.scalar_one_or_none()
            
            # –ü–æ–∏—Å–∫ –ø–æ username
            elif search_query.startswith("@"):
                username = search_query[1:]
                result = await session.execute(
                    select(User).where(User.username == username)
                )
                user = result.scalar_one_or_none()
            
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
            else:
                result = await session.execute(
                    select(User).where(User.first_name.ilike(f"%{search_query}%"))
                )
                user = result.scalar_one_or_none()
            
            if not user:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            await show_user_details(message, user)
            await state.clear()
    
    except Exception as e:
        logger.error(f"Error in user search: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await state.clear()


async def show_user_details(message: Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    async with get_async_session() as session:
        downloads_count_result = await session.execute(
            text("SELECT COUNT(*) FROM download_tasks WHERE user_id = :user_id"),
            {"user_id": user.id}
        )
        downloads_count = downloads_count_result.scalar()
        
        payments_sum_result = await session.execute(
            text("SELECT COALESCE(SUM(amount), 0) FROM payments WHERE user_id = :user_id AND status = 'completed'"),
            {"user_id": user.id}
        )
        payments_sum = payments_sum_result.scalar()
    
    status_emoji = {
        "free": "üÜì",
        "trial": "üî•", 
        "premium": "üíé",
        "admin": "üëë"
    }.get(user.current_user_type, "‚ùì")
    
    user_text = [
        f"üë§ {user.display_name}",
        "",
        f"üÜî ID: {user.telegram_id}",
        f"üë§ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
        f"üîñ –¢–∏–ø: {status_emoji} {user.current_user_type}",
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}",
        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_active_at.strftime('%d.%m.%Y %H:%M') if user.last_active_at else '–Ω–∏–∫–æ–≥–¥–∞'}",
        "",
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
        f"‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π –≤—Å–µ–≥–æ: {downloads_count:,}",
        f"‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {user.downloads_today}",
        f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${payments_sum:.2f}",
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {getattr(user, 'referrals_count', 0)}",
        "",
        f"üö´ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user.is_banned else '–ê–∫—Ç–∏–≤–µ–Ω'}",
        f"üéÅ Trial: {'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if user.trial_used else '–î–æ—Å—Ç—É–ø–µ–Ω'}"
    ]
    
    if user.is_premium_active:
        user_text.append(f"üíé Premium –¥–æ: {user.premium_expires_at.strftime('%d.%m.%Y')}")
    
    if user.is_trial_active:
        remaining = user.trial_expires_at - datetime.utcnow()
        hours = int(remaining.total_seconds() // 3600)
        user_text.append(f"üî• Trial: –æ—Å—Ç–∞–ª–æ—Å—å {hours}—á")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíé –í—ã–¥–∞—Ç—å Premium", callback_data=f"admin_grant_premium_{user.id}"),
            InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Trial", callback_data=f"admin_grant_trial_{user.id}")
        ],
        [
            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if not user.is_banned else "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", 
                               callback_data=f"admin_ban_{user.id}" if not user.is_banned else f"admin_unban_{user.id}"),
            InlineKeyboardButton(text="üìß –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"admin_message_{user.id}")
        ],
        [
            InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_user_stats_{user.id}"),
            InlineKeyboardButton(text="üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data=f"admin_user_payments_{user.id}")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
    ])
    
    await message.answer("\n".join(user_text), reply_markup=keyboard)


@router.callback_query(F.data.startswith("admin_grant_premium_"))
async def handle_grant_premium(callback: CallbackQuery):
    """–í—ã–¥–∞—á–∞ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[-1])
    
    try:
        async with get_async_session() as session:
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –í—ã–¥–∞–µ–º Premium –Ω–∞ 30 –¥–Ω–µ–π
            user.activate_premium(duration_days=30)
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await callback.bot.send_message(
                    user.telegram_id,
                    "üéâ –í–∞–º –≤—ã–¥–∞–Ω Premium –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π!\n\n"
                    "üíé –í—Å–µ Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã."
                )
            except Exception:
                pass
            
            await callback.answer("Premium –≤—ã–¥–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π", show_alert=True)
            await show_user_details(callback.message, user)
            
            logger.info(
                f"Premium granted by admin",
                admin_id=callback.from_user.id,
                target_user_id=user.telegram_id,
                duration_days=30
            )
    
    except Exception as e:
        logger.error(f"Error granting premium: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ Premium", show_alert=True)


@router.callback_query(F.data.startswith("admin_ban_"))
async def handle_ban_user(callback: CallbackQuery):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[-1])
    
    try:
        async with get_async_session() as session:
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            user.ban_user("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            await session.commit()
            
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            await show_user_details(callback.message, user)
            
            logger.info(
                f"User banned by admin",
                admin_id=callback.from_user.id,
                target_user_id=user.telegram_id
            )
    
    except Exception as e:
        logger.error(f"Error banning user: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ", show_alert=True)


@router.callback_query(F.data == "admin_panel")
async def handle_admin_panel_callback(callback: CallbackQuery):
    """Callback –≤–µ—Ä—Å–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    mock_message = type('MockMessage', (), {
        'from_user': callback.from_user,
        'answer': callback.message.edit_text
    })()

    try:
        await admin_panel(mock_message)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in admin panel callback: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", show_alert=True)