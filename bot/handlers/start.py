"""
VideoBot Pro - Start Command Handler
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
"""

import structlog
from datetime import datetime, timedelta, timezone
from typing import Optional

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from shared.config.database import get_async_session
from shared.models import User, RequiredChannel, EventType
from shared.models.analytics import track_user_event
from bot.config import bot_config, get_message, MessageType, settings
from bot.utils.user_manager import get_or_create_user, update_user_activity
from bot.utils.subscription_checker import check_required_subscriptions
from bot.keyboards.inline import create_main_menu_keyboard, create_trial_keyboard
from bot.middlewares.rate_limit import rate_limit

logger = structlog.get_logger(__name__)

router = Router(name="start_handler")


@router.message(CommandStart())
@rate_limit(requests_per_minute=5)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
async def start_command(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    user_id = message.from_user.id
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with get_async_session() as session:
            user = await get_or_create_user(
                session,
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                language_code=message.from_user.language_code
            )
            
            is_new_user = user.session_count == 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await update_user_activity(session, user, message.message_id)
            await session.commit()
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            event_type = EventType.USER_REGISTERED if is_new_user else EventType.USER_ACTIVATED
            await track_user_event(
                event_type=event_type,
                user_id=user.id,
                telegram_user_id=user_id,
                user_type=user.current_user_type,
                source="bot"
            )
            
            logger.info(
                f"Start command processed",
                user_id=user_id,
                username=message.from_user.username,
                is_new_user=is_new_user,
                user_type=user.current_user_type
            )
    
    except Exception as e:
        logger.error(f"Error in start command: {e}", user_id=user_id)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if is_new_user:
        await handle_new_user(message, user)
    else:
        await handle_returning_user(message, user)


async def handle_new_user(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if bot_config.trial_enabled and not user.trial_used:
        await show_trial_offer(message, user)
    else:
        await show_welcome_message(message, user, show_subscription_info=True)


async def handle_returning_user(message: Message, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–Ω—É–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if user.is_trial_active:
        await show_trial_active_message(message, user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Premium
    elif user.is_premium_expired and user.is_premium:
        await show_premium_expired_message(message, user)
    
    # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    else:
        await show_returning_user_message(message, user)


async def show_trial_offer(message: Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    
    trial_info = get_message(
        MessageType.WELCOME,
        "trial_available",
        trial_duration=bot_config.limits.max_batch_size
    )
    
    keyboard = create_trial_keyboard()
    
    await message.answer(
        trial_info,
        reply_markup=keyboard,
        disable_web_page_preview=True
    )


async def show_trial_active_message(message: Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ"""
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    if user.trial_expires_at:
        remaining = user.trial_expires_at - datetime.now(timezone.utc)
        hours = int(remaining.total_seconds() // 3600)
        minutes = int((remaining.total_seconds() % 3600) // 60)
        time_left = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
    else:
        time_left = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    trial_message = get_message(
        MessageType.WELCOME,
        "trial_active",
        time_left=time_left
    )
    
    keyboard = create_main_menu_keyboard(user.current_user_type, is_admin=bot_config.is_admin(user.telegram_id))
    
    await message.answer(
        trial_message,
        reply_markup=keyboard,
        disable_web_page_preview=True
    )


async def show_premium_expired_message(message: Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ Premium"""
    
    expired_message = """‚è∞ <b>–í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>

–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É:
‚Ä¢ 10 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 720p –∫–∞—á–µ—Å—Ç–≤–æ
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã

üíé –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å Premium?"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé –ü—Ä–æ–¥–ª–∏—Ç—å Premium", callback_data="renew_premium")],
        [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await message.answer(
        expired_message,
        reply_markup=keyboard,
        disable_web_page_preview=True
    )


async def show_welcome_message(message: Message, user: User, show_subscription_info: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
    trial_info = ""
    if bot_config.trial_enabled and not user.trial_used:
        trial_info = f"""
üéÅ <b>–î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!</b>
‚è∞ {settings.TRIAL_DURATION_MINUTES} –º–∏–Ω—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ Premium –¥–æ—Å—Ç—É–ø–∞
"""
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    subscription_info = ""
    if show_subscription_info and bot_config.required_subs_enabled:
        if user.current_user_type in ["free", "trial"]:
            subscription_info = "\nüîí <i>–î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã</i>"
    
    welcome_text = get_message(
        MessageType.WELCOME,
        "new_user",
        trial_info=trial_info,
        subscription_info=subscription_info
    )
    
    keyboard = create_main_menu_keyboard(
        user.current_user_type, 
        is_admin=bot_config.is_admin(user.telegram_id)
    )
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard,
        disable_web_page_preview=True
    )


async def show_returning_user_message(message: Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä–Ω—É–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    daily_limit = bot_config.get_user_daily_limit(user.current_user_type)
    daily_limit_text = str(daily_limit) if daily_limit < 999 else "‚àû"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_type_display = {
        "free": "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
        "trial": "üî• –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", 
        "premium": "üíé Premium",
        "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    }.get(user.current_user_type, user.current_user_type)
    
    welcome_text = get_message(
        MessageType.WELCOME,
        "returning_user",
        downloads_today=user.downloads_today,
        daily_limit=daily_limit_text,
        total_downloads=user.downloads_total,
        user_type=user_type_display
    )
    
    keyboard = create_main_menu_keyboard(
        user.current_user_type,
        is_admin=bot_config.is_admin(user.telegram_id)
    )
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard,
        disable_web_page_preview=True
    )


@router.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    
    help_text = get_message(MessageType.HELP, "main")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –§–æ—Ä–º–∞—Ç—ã", callback_data="help_formats")],
        [InlineKeyboardButton(text="üíé Premium", callback_data="premium_benefits")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])
    
    await message.answer(
        help_text,
        reply_markup=keyboard,
        disable_web_page_preview=True
    )


@router.message(Command("status"))
async def status_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    user_id = message.from_user.id
    
    try:
        async with get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.get(User, user_id)
            
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await update_user_activity(session, user, message.message_id)
            await session.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
            status_text = await format_user_status(user)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
            ])
            
            await message.answer(
                status_text,
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
    
    except Exception as e:
        logger.error(f"Error in status command: {e}", user_id=user_id)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")


async def format_user_status(user: User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    user_type_display = {
        "free": "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
        "trial": "üî• –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
        "premium": "üíé Premium", 
        "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    }.get(user.current_user_type, user.current_user_type)
    
    # –õ–∏–º–∏—Ç—ã
    daily_limit = bot_config.get_user_daily_limit(user.current_user_type)
    file_limit = bot_config.get_user_file_limit(user.current_user_type)
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    status_parts = [
        f"üë§ <b>{user.display_name}</b>",
        f"üîñ –¢–∏–ø: {user_type_display}",
        "",
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
        f"‚Ä¢ –°–∫–∞—á–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {user.downloads_today}/{daily_limit if daily_limit < 999 else '‚àû'}",
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ: {user.downloads_total}",
        f"‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: –¥–æ {file_limit}MB",
        "",
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}",
    ]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∞–∫–∫–∞—É–Ω—Ç–∞
    if user.current_user_type == "trial" and user.trial_expires_at:
        remaining = user.trial_expires_at - (datetime.now(timezone.utc))
        if remaining.total_seconds() > 0:
            hours = int(remaining.total_seconds() // 3600)
            minutes = int((remaining.total_seconds() % 3600) // 60)
            time_left = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
            status_parts.append(f"‚è∞ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: –æ—Å—Ç–∞–ª–æ—Å—å {time_left}")
    
    elif user.current_user_type == "premium" and user.premium_expires_at:
        status_parts.append(f"üíé Premium –¥–æ: {user.premium_expires_at.strftime('%d.%m.%Y')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user.current_user_type == "free" and bot_config.required_subs_enabled:
        if user.subscription_check_passed:
            status_parts.append("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        else:
            status_parts.append("üîí –ü–æ–¥–ø–∏—Å–∫–∏: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
    
    return "\n".join(status_parts)


@router.message(Command("settings"))
async def settings_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    settings_text = """‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ/—Ä—É—á–Ω–æ–µ)
‚Ä¢ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤

üöÄ <b>–î–ª—è Premium:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ 4K
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé¨ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ", callback_data="settings_quality")],
        [InlineKeyboardButton(text="üåê –Ø–∑—ã–∫", callback_data="settings_language")],
        [InlineKeyboardButton(text="üìÆ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await message.answer(
        settings_text,
        reply_markup=keyboard,
        disable_web_page_preview=True
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ deep links
@router.message(CommandStart(deep_link=True))
async def start_with_params(message: Message, command: CommandStart, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (deep linking)"""
    
    params = command.args
    user_id = message.from_user.id
    
    logger.info(f"Start with params: {params}", user_id=user_id)
    
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π start
    await start_command(message, state)
    
    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if params:
        await handle_deep_link_params(message, params)


async def handle_deep_link_params(message: Message, params: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ deep link"""
    
    try:
        if params.startswith("ref_"):
            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
            referrer_id = int(params[4:])
            await handle_referral_link(message, referrer_id)
        
        elif params == "trial":
            # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            await message.answer("üéÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...")
            # TODO: Implement trial activation
        
        elif params == "premium":
            # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Premium
            await message.answer("üíé –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é Premium...")
            # TODO: Implement premium purchase
        
        else:
            logger.warning(f"Unknown deep link params: {params}")
    
    except Exception as e:
        logger.error(f"Error handling deep link params: {e}", params=params)


@router.message(F.text.regexp(r'https?://'))
async def handle_single_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ"""
    user_id = message.from_user.id

    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL
        from bot.utils.url_extractor import extract_video_urls, validate_url, detect_platform

        urls = extract_video_urls(message.text)

        if not urls:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫")
            return

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É
        url = urls[0]

        if not validate_url(url):
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞")
            return

        platform = detect_platform(url)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with get_async_session() as session:
            user = await get_or_create_user(
                session=session,
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name
            )
            await session.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not user.can_download_today():
            daily_limit = bot_config.get_user_daily_limit(user.current_user_type)
            await message.answer(
                f"‚è∞ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω ({daily_limit})\n"
                f"üíé Premium: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer(
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...\n"
            f"üîó –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.title()}\n"
            f"üì± –û—Ç–ø—Ä–∞–≤–ª—é —Ñ–∞–π–ª –≤ —á–∞—Ç"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º batch —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        from bot.services.batch_service import batch_service

        batch = await batch_service.create_batch_from_urls(
            user=user,
            urls=[url],
            delivery_method="individual"
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        celery_task_id = await batch_service.start_batch_processing(batch)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_msg.edit_text(
            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n"
            f"üîó –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.title()}\n"
            f"üìä ID: {batch.batch_id}\n"
            f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 1-3 –º–∏–Ω—É—Ç—ã"
        )

        logger.info(
            f"Single download started",
            user_id=user_id,
            platform=platform,
            batch_id=batch.id,
            celery_task_id=celery_task_id
        )

    except Exception as e:
        logger.error(f"Error processing single URL: {e}", user_id=user_id)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_referral_link(message: Message, referrer_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    
    user_id = message.from_user.id
    
    # –ù–µ–ª—å–∑—è –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if user_id == referrer_id:
        return
    
    try:
        async with get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = await session.get(User, user_id)
            if not new_user or new_user.referrer_id:
                return  # –£–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            referrer = await session.get(User, referrer_id)
            if not referrer:
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
            new_user.referrer_id = referrer.telegram_id
            referrer.referrals_count += 1
            
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(
                f"üéâ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç {referrer.display_name}!\n"
                "–ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
            )
            
            logger.info(
                f"Referral link processed", 
                new_user_id=user_id, 
                referrer_id=referrer_id
            )

    except Exception as e:
        logger.error(f"Error processing referral: {e}")