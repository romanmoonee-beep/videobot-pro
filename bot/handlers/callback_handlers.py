"""
VideoBot Pro - Callback Handlers
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""

import structlog
from typing import Dict, Any

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from shared.config.database import get_async_session
from shared.models import User
from bot.config import bot_config, get_message, MessageType
from bot.utils.user_manager import get_or_create_user, update_user_activity

logger = structlog.get_logger(__name__)

router = Router(name="callback_handlers")


@router.callback_query(F.data == "back_main")
async def handle_back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    user_id = callback.from_user.id
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        async with get_async_session() as session:
            user = await get_or_create_user(
                session=session,
                telegram_id=user_id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name
            )
            await update_user_activity(session, user)
            await session.commit()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(callback.message, user, edit=True)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in back to main: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é", show_alert=True)


@router.callback_query(F.data == "status")
async def handle_status_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await get_or_create_user(
                session=session,
                telegram_id=user_id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name
            )
            await update_user_activity(session, user)
            await session.commit()
            
            status_text = await format_user_status(user)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
            ])
            
            await callback.message.edit_text(
                status_text,
                reply_markup=keyboard
            )
            await callback.answer()
    
    except Exception as e:
        logger.error(f"Error showing status: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(F.data == "help")
async def handle_help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    help_text = get_message(MessageType.HELP, "main")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –§–æ—Ä–º–∞—Ç—ã", callback_data="help_formats")],
        [InlineKeyboardButton(text="üíé Premium", callback_data="premium_benefits")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(
        help_text,
        reply_markup=keyboard,
        disable_web_page_preview=True
    )
    await callback.answer()


@router.callback_query(F.data == "help_formats")
async def handle_help_formats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    formats_text = get_message(MessageType.HELP, "formats")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–º–æ—â–∏", callback_data="help")]
    ])
    
    await callback.message.edit_text(
        formats_text,
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "premium_benefits")
async def handle_premium_benefits(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium"""
    benefits_text = [
        "üíé –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏",
        "",
        "üöÄ –ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:",
        "‚Ä¢ ‚àû –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        "‚Ä¢ üé¨ 4K –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–¥–æ 2160p)",
        "‚Ä¢ üì¶ –§–∞–π–ª—ã –¥–æ 500MB",
        "‚Ä¢ ‚òÅÔ∏è –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ 30 –¥–Ω–µ–π",
        "‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å",
        "‚Ä¢ üîì –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
        "‚Ä¢ üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "‚Ä¢ üé® –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
        "",
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç $3.99/–º–µ—Å—è—Ü",
        "üéÅ –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü —Å–æ —Å–∫–∏–¥–∫–æ–π!",
        "",
        "üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º:",
        "Free: 10 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π/–¥–µ–Ω—å, 720p, 50MB",
        "Premium: ‚àû —Å–∫–∞—á–∏–≤–∞–Ω–∏–π, 4K, 500MB"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="buy_premium")],
        [InlineKeyboardButton(text="üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="trial")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="help")]
    ])
    
    await callback.message.edit_text(
        "\n".join(benefits_text),
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "detailed_stats")
async def handle_detailed_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await get_or_create_user(
                session=session,
                telegram_id=user_id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name
            )
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = user.stats or {}
            
            stats_text = [
                "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "",
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.display_name}",
                f"üÜî ID: {user.telegram_id}",
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}",
                f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_active_at.strftime('%d.%m.%Y %H:%M') if user.last_active_at else '–ù–∏–∫–æ–≥–¥–∞'}",
                "",
                "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π:",
                f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {user.downloads_today}",
                f"‚Ä¢ –í—Å–µ–≥–æ: {user.downloads_total}",
                f"‚Ä¢ –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: {stats.get('monthly_downloads', 0)}",
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {stats.get('avg_file_size_mb', 0):.1f} MB",
            ]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            if stats.get('platforms'):
                stats_text.append("")
                stats_text.append("üéØ –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:")
                for platform, count in stats['platforms'].items():
                    emoji = {"youtube": "üî¥", "tiktok": "üéµ", "instagram": "üì∏"}.get(platform, "üé¨")
                    stats_text.append(f"‚Ä¢ {emoji} {platform.title()}: {count}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
            if user.current_user_type == "premium":
                stats_text.extend([
                    "",
                    "üíé Premium –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω —Å: {user.premium_started_at.strftime('%d.%m.%Y') if user.premium_started_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                    f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.premium_expires_at.strftime('%d.%m.%Y')}",
                    f"‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if user.premium_auto_renew else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}"
                ])
            elif user.trial_used:
                stats_text.extend([
                    "",
                    "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:",
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {user.trial_started_at.strftime('%d.%m.%Y') if user.trial_started_at else '–î–∞'}",
                    f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats.get('trial_downloads', 0)} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π"
                ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_data")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç—É—Å—É", callback_data="status")]
            ])
            
            await callback.message.edit_text(
                "\n".join(stats_text),
                reply_markup=keyboard
            )
            await callback.answer()
    
    except Exception as e:
        logger.error(f"Error showing detailed stats: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "export_data")
async def handle_export_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data == "cancel")
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


# === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ù–ï–î–û–°–¢–ê–Æ–©–ò–• CALLBACK'–û–í ===

@router.callback_query(F.data == "download")
async def handle_download_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    download_text = [
        "üì• <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ</b>",
        "",
        "üé¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b>",
        "‚Ä¢ YouTube Shorts",
        "‚Ä¢ TikTok",
        "‚Ä¢ Instagram Reels",
        "",
        "üí° <b>–ö–∞–∫ —Å–∫–∞—á–∞—Ç—å:</b>",
        "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ",
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –º–Ω–µ –≤ —á–∞—Ç",
        "3. –ü–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª!",
        "",
        "üì¶ <b>Batch –∑–∞–≥—Ä—É–∑–∫–∞:</b>",
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ —Å—Ä–∞–∑—É –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(
        "\n".join(download_text),
        reply_markup=keyboard
    )
    await callback.answer()


# === –£–¢–ò–õ–ò–¢–´ ===

async def show_main_menu(message, user: User, edit: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    from bot.keyboards.inline import create_main_menu_keyboard
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —Ç–∏–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = create_main_menu_keyboard(
        user.current_user_type, 
        is_admin=bot_config.is_admin(user.telegram_id)
    )
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    daily_limit = bot_config.get_user_daily_limit(user.current_user_type)
    daily_limit_text = str(daily_limit) if daily_limit < 999 else "‚àû"
    
    user_type_display = {
        "free": "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
        "trial": "üî• –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", 
        "premium": "üíé Premium",
        "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    }.get(user.current_user_type, user.current_user_type)
    
    welcome_text = get_message(
        MessageType.WELCOME,
        "returning_user",
        downloads_today=user.downloads_today,
        daily_limit=daily_limit_text,
        total_downloads=user.downloads_total,
        user_type=user_type_display
    )
    
    if edit:
        await message.edit_text(welcome_text, reply_markup=keyboard)
    else:
        await message.answer(welcome_text, reply_markup=keyboard)


async def format_user_status(user: User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    user_type_display = {
        "free": "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
        "trial": "üî• –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
        "premium": "üíé Premium", 
        "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    }.get(user.current_user_type, user.current_user_type)
    
    # –õ–∏–º–∏—Ç—ã
    daily_limit = bot_config.get_user_daily_limit(user.current_user_type)
    file_limit = bot_config.get_user_file_limit(user.current_user_type)
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    status_parts = [
        f"üë§ <b>{user.display_name}</b>",
        f"üîñ –¢–∏–ø: {user_type_display}",
        "",
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>",
        f"‚Ä¢ –°–∫–∞—á–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {user.downloads_today}/{daily_limit if daily_limit < 999 else '‚àû'}",
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ: {user.downloads_total}",
        f"‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: –¥–æ {file_limit}MB",
        "",
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}",
    ]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∞–∫–∫–∞—É–Ω—Ç–∞
    if user.current_user_type == "trial" and user.trial_expires_at:
        from datetime import datetime, timezone
        remaining = user.trial_expires_at - datetime.now(timezone.utc)
        if remaining.total_seconds() > 0:
            hours = int(remaining.total_seconds() // 3600)
            minutes = int((remaining.total_seconds() % 3600) // 60)
            time_left = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
            status_parts.append(f"‚è∞ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: –æ—Å—Ç–∞–ª–æ—Å—å {time_left}")
    
    elif user.current_user_type == "premium" and user.premium_expires_at:
        status_parts.append(f"üíé Premium –¥–æ: {user.premium_expires_at.strftime('%d.%m.%Y')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è free –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user.current_user_type == "free" and bot_config.required_subs_enabled:
        if hasattr(user, 'subscription_check_passed') and user.subscription_check_passed:
            status_parts.append("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        else:
            status_parts.append("üîí –ü–æ–¥–ø–∏—Å–∫–∏: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
    
    return "\n".join(status_parts)


def create_back_button(callback_data: str = "back_main") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ])


def create_confirmation_keyboard(confirm_data: str, cancel_data: str = "cancel") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=confirm_data),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=cancel_data)
        ]
    ])