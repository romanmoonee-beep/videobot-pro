"""
VideoBot Pro - Worker Main
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ worker'–∞
"""

import os
import sys
import asyncio
import signal
from typing import Optional
import structlog

from .celery_app import celery_app, validate_celery_config
from .config import worker_config
from shared.config.database import init_database, close_database
from shared.config.redis import init_redis, close_redis

logger = structlog.get_logger(__name__)

class WorkerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º worker'–∞"""
    
    def __init__(self):
        self.worker = None
        self.is_running = False
        self.shutdown_event = asyncio.Event()
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è worker'–∞"""
        logger.info("Initializing VideoBot Worker...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await init_database()
            logger.info("Database connection established")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
            await init_redis()
            logger.info("Redis connection established")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Celery
            if not validate_celery_config():
                raise RuntimeError("Celery configuration validation failed")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            os.makedirs(worker_config.download_temp_dir, exist_ok=True)
            logger.info(f"Temp directory ready: {worker_config.download_temp_dir}")
            
            logger.info("Worker initialization completed successfully")
            return True
            
        except Exception as e:
            logger.error(f"Worker initialization failed: {e}")
            return False
    
    async def start_worker(self, worker_type: str = "worker"):
        """
        –ó–∞–ø—É—Å–∫ worker'–∞
        
        Args:
            worker_type: –¢–∏–ø worker'–∞ (worker, beat, flower)
        """
        if not await self.initialize():
            sys.exit(1)
        
        self.is_running = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        logger.info(f"Starting {worker_type}...")
        
        try:
            if worker_type == "worker":
                await self._start_celery_worker()
            elif worker_type == "beat":
                await self._start_celery_beat()
            elif worker_type == "flower":
                await self._start_flower()
            else:
                raise ValueError(f"Unknown worker type: {worker_type}")
                
        except KeyboardInterrupt:
            logger.info("Received interrupt signal")
        except Exception as e:
            logger.error(f"Worker error: {e}")
            raise
        finally:
            await self.shutdown()
    
    async def _start_celery_worker(self):
        """–ó–∞–ø—É—Å–∫ Celery worker'–∞"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from . import tasks
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ worker'–∞
        worker_args = [
            "--app=worker.celery_app:celery_app",
            f"--concurrency={worker_config.worker_concurrency}",
            f"--hostname=worker@%h",
            "--loglevel=INFO",
            "--without-gossip",
            "--without-mingle",
            "--without-heartbeat",
        ]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        queues = ["default", "downloads", "batches", "cleanup", "analytics", "notifications"]
        worker_args.append(f"--queues={','.join(queues)}")
        
        logger.info(f"Starting Celery worker with args: {worker_args}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º worker –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        from celery.bin import worker
        worker_instance = worker.worker(app=celery_app)
        worker_instance.run(**{
            'concurrency': worker_config.worker_concurrency,
            'loglevel': 'INFO',
            'queues': queues,
            'hostname': 'worker@%h',
        })
    
    async def _start_celery_beat(self):
        """–ó–∞–ø—É—Å–∫ Celery Beat (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)"""
        logger.info("Starting Celery Beat scheduler")
        
        from celery.bin import beat
        beat_instance = beat.beat(app=celery_app)
        beat_instance.run(
            loglevel='INFO',
            schedule_filename='celerybeat-schedule',
        )
    
    async def _start_flower(self):
        """–ó–∞–ø—É—Å–∫ Flower (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)"""
        logger.info("Starting Flower monitoring")
        
        try:
            import flower
            from flower.command import FlowerCommand
            
            flower_cmd = FlowerCommand()
            flower_cmd.execute_from_commandline([
                'flower',
                '--app=worker.celery_app:celery_app',
                '--port=5555',
                '--address=0.0.0.0',
            ])
        except ImportError:
            logger.error("Flower is not installed. Install with: pip install flower")
            raise
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"Received signal {signum}, initiating shutdown...")
        self.shutdown_event.set()
        self.is_running = False
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã worker'–∞"""
        logger.info("Shutting down worker...")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            await close_database()
            logger.info("Database connections closed")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis
            await close_redis()
            logger.info("Redis connections closed")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            await self._cleanup_temp_files()
            
            logger.info("Worker shutdown completed")
            
        except Exception as e:
            logger.error(f"Error during shutdown: {e}")
    
    async def _cleanup_temp_files(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            import shutil
            if os.path.exists(worker_config.download_temp_dir):
                for filename in os.listdir(worker_config.download_temp_dir):
                    file_path = os.path.join(worker_config.download_temp_dir, filename)
                    if os.path.isfile(file_path):
                        os.unlink(file_path)
                logger.info("Temporary files cleaned up")
        except Exception as e:
            logger.warning(f"Error cleaning temp files: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(description="VideoBot Pro Worker")
    parser.add_argument(
        "command",
        choices=["worker", "beat", "flower", "status"],
        help="Command to run"
    )
    parser.add_argument(
        "--concurrency",
        type=int,
        default=worker_config.worker_concurrency,
        help="Number of concurrent worker processes"
    )
    parser.add_argument(
        "--queues",
        default="default,downloads,batches",
        help="Comma-separated list of queues to process"
    )
    parser.add_argument(
        "--loglevel",
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR"],
        help="Logging level"
    )
    
    args = parser.parse_args()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if args.concurrency != worker_config.worker_concurrency:
        worker_config.worker_concurrency = args.concurrency
    
    manager = WorkerManager()
    
    if args.command == "status":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å worker'–∞
        show_worker_status()
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º worker
        asyncio.run(manager.start_worker(args.command))

def show_worker_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å worker'–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ worker'—ã
        inspect = celery_app.control.inspect()
        stats = inspect.stats()
        active = inspect.active()
        
        if not stats:
            print("‚ùå No active workers found")
            return
        
        print("üìä Worker Status:")
        print("=" * 50)
        
        for worker_name, worker_stats in stats.items():
            print(f"\nüîß Worker: {worker_name}")
            print(f"   Pool: {worker_stats.get('pool', {}).get('implementation', 'N/A')}")
            print(f"   Processes: {worker_stats.get('pool', {}).get('processes', 'N/A')}")
            print(f"   Active tasks: {len(active.get(worker_name, []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            active_tasks = active.get(worker_name, [])
            if active_tasks:
                print("   üìã Active tasks:")
                for task in active_tasks[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                    print(f"      - {task['name']} ({task['id'][:8]}...)")
                if len(active_tasks) > 3:
                    print(f"      ... and {len(active_tasks) - 3} more")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥–∏
        print("\nüì• Queue Status:")
        reserved = inspect.reserved()
        for worker_name, tasks in reserved.items():
            if tasks:
                print(f"   {worker_name}: {len(tasks)} reserved tasks")
        
    except Exception as e:
        print(f"‚ùå Error getting worker status: {e}")

if __name__ == "__main__":
    main()