"""
VideoBot Pro - Trial Manager
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
"""

import structlog
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from sqlalchemy.ext.asyncio import AsyncSession
from shared.models import User, UserType, EventType
from shared.models.analytics import track_user_event
from bot.config import bot_config

logger = structlog.get_logger(__name__)


async def activate_trial(
    session: AsyncSession,
    user: User
) -> Dict[str, Any]:
    """
    –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if not bot_config.trial_enabled:
        return {
            'success': False,
            'error': 'trial_disabled',
            'message': '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        }
    
    if user.trial_used:
        return {
            'success': False,
            'error': 'already_used',
            'message': '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
        }
    
    if user.is_premium_active:
        return {
            'success': False,
            'error': 'premium_active',
            'message': '–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω Premium'
        }
    
    try:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º trial
        duration_minutes = bot_config.trial_duration_minutes
        user.activate_trial(duration_minutes)
        
        await session.flush()
        
        # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        await track_user_event(
            event_type=EventType.TRIAL_ACTIVATED,
            user_id=user.id,
            telegram_user_id=user.telegram_id,
            user_type=UserType.TRIAL
        )
        
        logger.info(f"Trial activated", user_id=user.telegram_id, duration=duration_minutes)
        
        return {
            'success': True,
            'expires_at': user.trial_expires_at,
            'duration_minutes': duration_minutes,
            'message': f'–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç!'
        }
    
    except Exception as e:
        logger.error(f"Error activating trial: {e}", user_id=user.telegram_id)
        return {
            'success': False,
            'error': 'activation_failed',
            'message': '–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'
        }


async def check_trial_status(user: User) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
    """
    if not user.trial_used:
        return {
            'status': 'available',
            'can_activate': True,
            'message': '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏'
        }
    
    if user.is_trial_active:
        remaining = get_trial_time_remaining(user)
        return {
            'status': 'active',
            'expires_at': user.trial_expires_at,
            'remaining_seconds': int(remaining.total_seconds()) if remaining else 0,
            'remaining_formatted': format_time_remaining(remaining) if remaining else '–∏—Å—Ç–µ–∫–∞–µ—Ç',
            'message': f'–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω'
        }
    
    return {
        'status': 'expired',
        'expired_at': user.trial_expires_at,
        'message': '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'
    }


def get_trial_time_remaining(user: User) -> Optional[timedelta]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∏–ª–∏ None
    """
    if not user.is_trial_active or not user.trial_expires_at:
        return None
    
    remaining = user.trial_expires_at - datetime.utcnow()
    
    if remaining.total_seconds() <= 0:
        return None
    
    return remaining


async def expire_trial(
    session: AsyncSession,
    user: User
) -> bool:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    
    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
    """
    if not user.is_trial_active:
        return False
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–µ
        user.trial_expires_at = datetime.utcnow()
        user.user_type = UserType.FREE
        
        await session.flush()
        
        # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        await track_user_event(
            event_type=EventType.TRIAL_EXPIRED,
            user_id=user.id,
            telegram_user_id=user.telegram_id
        )
        
        logger.info(f"Trial expired", user_id=user.telegram_id)
        return True
    
    except Exception as e:
        logger.error(f"Error expiring trial: {e}", user_id=user.telegram_id)
        return False


async def check_and_expire_trials(session: AsyncSession) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø—Ä–æ–±–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    
    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    """
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º trial
        result = await session.execute(
            """
            UPDATE users 
            SET user_type = 'free'
            WHERE user_type = 'trial' 
            AND trial_expires_at < NOW()
            RETURNING id
            """
        )
        
        expired_ids = result.fetchall()
        count = len(expired_ids)
        
        if count > 0:
            await session.commit()
            
            # –¢—Ä–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
            for user_id in expired_ids:
                await track_user_event(
                    event_type=EventType.TRIAL_EXPIRED,
                    user_id=user_id[0],
                    telegram_user_id=None
                )
            
            logger.info(f"Expired {count} trial periods")
        
        return count
    
    except Exception as e:
        logger.error(f"Error checking trial expiry: {e}")
        return 0


def format_time_remaining(remaining: Optional[timedelta]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    
    Args:
        remaining: –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not remaining:
        return "–∏—Å—Ç–µ–∫–ª–æ"
    
    total_seconds = int(remaining.total_seconds())
    
    if total_seconds <= 0:
        return "–∏—Å—Ç–µ–∫–ª–æ"
    
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    seconds = total_seconds % 60
    
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    elif minutes > 0:
        return f"{minutes}–º {seconds}—Å"
    else:
        return f"{seconds}—Å"


async def send_trial_reminder(
    bot,
    user: User,
    minutes_remaining: int
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        minutes_remaining: –ú–∏–Ω—É—Ç –æ—Å—Ç–∞–ª–æ—Å—å
        
    Returns:
        True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    try:
        message = f"""
‚è∞ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!</b>

–û—Å—Ç–∞–ª–æ—Å—å: {minutes_remaining} –º–∏–Ω—É—Ç

üíé –£—Å–ø–µ–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å Premium —Å–æ —Å–∫–∏–¥–∫–æ–π 20%!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /premium
"""
        
        await bot.send_message(
            chat_id=user.telegram_id,
            text=message,
            parse_mode='HTML'
        )
        
        return True
    
    except Exception as e:
        logger.error(f"Error sending trial reminder: {e}", user_id=user.telegram_id)
        return False