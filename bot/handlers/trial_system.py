"""
VideoBot Pro - Trial System Handler
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
"""

import structlog
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from shared.config.database import get_async_session
from shared.models import User, EventType
from shared.models.analytics import track_user_event
from shared.config.settings import settings
from bot.config import bot_config, get_message, MessageType
from bot.utils.user_manager import get_or_create_user, update_user_activity

logger = structlog.get_logger(__name__)

router = Router(name="trial_system")


class TrialStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    confirming_activation = State()
    trial_active = State()


@router.message(F.text.in_(["/trial", "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "trial"]))
async def trial_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    user_id = message.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await get_or_create_user(
                session=session,
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name
            )
            
            await update_user_activity(session, user, message.message_id)
            await session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        await handle_trial_request(message, user, state)
        
    except Exception as e:
        logger.error(f"Error in trial command: {e}", user_id=user_id)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")


async def handle_trial_request(message: Message, user: User, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    if not bot_config.trial_enabled:
        await show_trial_disabled(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.current_user_type == "admin":
        await show_admin_trial_info(message)
        return
    
    if user.current_user_type == "premium":
        await show_premium_trial_info(message, user)
        return
    
    if user.is_trial_active:
        await show_active_trial_status(message, user)
        return
    
    if user.trial_used:
        await show_trial_already_used(message, user)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    await show_trial_activation_offer(message, user, state)


async def show_trial_disabled(message: Message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω"""
    disabled_text = [
        "‚è∞ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "",
        "üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
        "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É",
        "‚Ä¢ –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º",
        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé Premium", callback_data="premium_info")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await message.answer("\n".join(disabled_text), reply_markup=keyboard)


async def show_admin_trial_info(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    admin_text = [
        "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ",
        "",
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω' if bot_config.trial_enabled else '–û—Ç–∫–ª—é—á–µ–Ω'}",
        f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {settings.TRIAL_DURATION_MINUTES} –º–∏–Ω—É—Ç",
        "",
        "üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:",
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        "‚Ä¢ –í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        "‚Ä¢ HD –∫–∞—á–µ—Å—Ç–≤–æ (–¥–æ 1080p)",
        "‚Ä¢ –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
        "‚Ä¢ –§–∞–π–ª—ã –¥–æ 500MB",
        "",
        "üëë –ö–∞–∫ –∞–¥–º–∏–Ω, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤—Å–µ —ç—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞", callback_data="admin_trial_settings")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤", callback_data="admin_trial_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await message.answer("\n".join(admin_text), reply_markup=keyboard)


async def show_premium_trial_info(message: Message, user: User):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –¥–ª—è Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    days_left = (user.premium_expires_at - datetime.utcnow()).days if user.premium_expires_at else 0
    
    premium_text = [
        "üíé –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω Premium!",
        "",
        f"‚è∞ Premium –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {user.premium_expires_at.strftime('%d.%m.%Y')}",
        f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}",
        "",
        "üéÅ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:",
        "‚Ä¢ ‚àû –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        "‚Ä¢ üé¨ 4K –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ",
        "‚Ä¢ üì¶ –§–∞–π–ª—ã –¥–æ 500MB",
        "‚Ä¢ ‚òÅÔ∏è –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ 30 –¥–Ω–µ–π",
        "‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        "",
        "üí° –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å Premium", callback_data="premium_status")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await message.answer("\n".join(premium_text), reply_markup=keyboard)


async def show_active_trial_status(message: Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    if user.trial_expires_at:
        remaining = user.trial_expires_at - datetime.utcnow()
        if remaining.total_seconds() > 0:
            hours = int(remaining.total_seconds() // 3600)
            minutes = int((remaining.total_seconds() % 3600) // 60)
            time_left = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
        else:
            time_left = "–∏—Å—Ç–µ–∫"
    else:
        time_left = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    status_text = [
        "üî• –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω!",
        "",
        f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_left}",
        f"üìä –°–∫–∞—á–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {user.downloads_today}",
        "",
        "üéÅ –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:",
        "‚Ä¢ ‚àû –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        "‚Ä¢ üé¨ HD –∫–∞—á–µ—Å—Ç–≤–æ (–¥–æ 1080p)",
        "‚Ä¢ üì¶ –§–∞–π–ª—ã –¥–æ 500MB",
        "‚Ä¢ üöÄ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        "‚Ä¢ üîì –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
        "",
        "üí° –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="upgrade_to_premium")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="trial_stats")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await message.answer("\n".join(status_text), reply_markup=keyboard)


async def show_trial_already_used(message: Message, user: User):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"""
    used_text = [
        "‚è∞ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
        "",
        f"üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {user.trial_started_at.strftime('%d.%m.%Y %H:%M') if user.trial_started_at else '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}",
        "",
        "üí° –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑",
        "",
        "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:",
        "‚Ä¢ üíé Premium –ø–æ–¥–ø–∏—Å–∫–∞ - –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        "‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω - 10 –∑–∞–≥—Ä—É–∑–æ–∫ –≤ –¥–µ–Ω—å",
        "‚Ä¢ üéÅ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∞–∫—Ü–∏—è–º–∏"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="buy_premium")],
        [InlineKeyboardButton(text="üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await message.answer("\n".join(used_text), reply_markup=keyboard)


async def show_trial_activation_offer(message: Message, user: User, state: FSMContext):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    
    offer_text = [
        "üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?",
        "",
        f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {settings.TRIAL_DURATION_MINUTES} –º–∏–Ω—É—Ç",
        "",
        "üöÄ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:",
        "‚Ä¢ ‚àû –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        "‚Ä¢ üé¨ HD –∫–∞—á–µ—Å—Ç–≤–æ (–¥–æ 1080p)",
        "‚Ä¢ üì¶ –§–∞–π–ª—ã –¥–æ 500MB",
        "‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        "‚Ä¢ üîì –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
        "‚Ä¢ üì± –í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
        "",
        "‚ö° –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ä–∞–∑—É –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∏–≤–∞—Ç—å!",
        "",
        "üí° –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="activate_trial")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Premium", callback_data="premium_vs_trial")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_main")]
    ])
    
    await message.answer("\n".join(offer_text), reply_markup=keyboard)
    await state.set_state(TrialStates.confirming_activation)


@router.callback_query(F.data == "activate_trial")
async def handle_trial_activation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
            if user.trial_used:
                await callback.answer("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω", show_alert=True)
                return
            
            if user.is_trial_active:
                await callback.answer("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
                return
            
            if user.current_user_type in ["premium", "admin"]:
                await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", show_alert=True)
                return
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            user.start_trial(duration_minutes=settings.TRIAL_DURATION_MINUTES)
            
            await session.commit()
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            await track_user_event(
                event_type=EventType.USER_TRIAL_STARTED,
                user_id=user.id,
                telegram_user_id=user.telegram_id,
                user_type="trial",
                event_data={
                    "duration_minutes": settings.TRIAL_DURATION_MINUTES,
                    "trial_expires_at": user.trial_expires_at.isoformat()
                }
            )
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        success_text = [
            "üéâ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
            "",
            f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç: {settings.TRIAL_DURATION_MINUTES} –º–∏–Ω—É—Ç",
            f"üìÖ –î–æ: {user.trial_expires_at.strftime('%d.%m.%Y %H:%M')}",
            "",
            "üöÄ –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ:",
            "‚Ä¢ ‚àû –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
            "‚Ä¢ üé¨ HD –∫–∞—á–µ—Å—Ç–≤–æ (–¥–æ 1080p)",
            "‚Ä¢ üì¶ –§–∞–π–ª—ã –¥–æ 500MB",
            "‚Ä¢ üîì –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
            "",
            "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!"
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞", callback_data="trial_stats")],
            [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="upgrade_to_premium")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ])
        
        await callback.message.edit_text(
            "\n".join(success_text),
            reply_markup=keyboard
        )
        
        await state.set_state(TrialStates.trial_active)
        await callback.answer("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=False)
        
        logger.info(
            f"Trial activated",
            user_id=user_id,
            duration_minutes=settings.TRIAL_DURATION_MINUTES,
            expires_at=user.trial_expires_at.isoformat()
        )
    
    except Exception as e:
        logger.error(f"Error activating trial: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞", show_alert=True)


@router.callback_query(F.data == "trial_stats")
async def show_trial_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    user_id = callback.from_user.id
    
    try:
        async with get_async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            if not user.is_trial_active and not user.trial_used:
                await callback.answer("–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", show_alert=True)
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = user.stats or {}
            
            if user.is_trial_active:
                # –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                remaining = user.trial_expires_at - datetime.utcnow()
                elapsed = datetime.utcnow() - user.trial_started_at
                
                hours_remaining = int(remaining.total_seconds() // 3600)
                minutes_remaining = int((remaining.total_seconds() % 3600) // 60)
                
                hours_used = int(elapsed.total_seconds() // 3600)
                minutes_used = int((elapsed.total_seconds() % 3600) // 60)
                
                stats_text = [
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
                    "",
                    "‚è∞ –í—Ä–µ–º—è:",
                    f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {hours_remaining}—á {minutes_remaining}–º",
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {hours_used}—á {minutes_used}–º",
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {user.trial_started_at.strftime('%d.%m.%Y %H:%M')}",
                    "",
                    "üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:",
                    f"‚Ä¢ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {user.downloads_today}",
                    f"‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: {stats.get('trial_size_mb', 0):.1f} MB"
                ]
            else:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                duration = user.trial_expires_at - user.trial_started_at if user.trial_expires_at and user.trial_started_at else timedelta(0)
                
                stats_text = [
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
                    "",
                    "‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω",
                    "",
                    "‚è∞ –í—Ä–µ–º—è:",
                    f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {int(duration.total_seconds() // 60)} –º–∏–Ω—É—Ç",
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {user.trial_started_at.strftime('%d.%m.%Y %H:%M')}",
                    f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω: {user.trial_expires_at.strftime('%d.%m.%Y %H:%M')}",
                    "",
                    "üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:",
                    f"‚Ä¢ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats.get('trial_downloads', 0)}",
                    f"‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: {stats.get('trial_size_mb', 0):.1f} MB"
                ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
            if stats.get('platforms'):
                stats_text.append("")
                stats_text.append("üéØ –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:")
                for platform, count in stats['platforms'].items():
                    emoji = {"youtube": "üî¥", "tiktok": "üéµ", "instagram": "üì∏"}.get(platform, "üé¨")
                    stats_text.append(f"‚Ä¢ {emoji} {platform.title()}: {count}")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="upgrade_to_premium")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_trial")]
        ])
        
        await callback.message.edit_text(
            "\n".join(stats_text),
            reply_markup=keyboard
        )
    
    except Exception as e:
        logger.error(f"Error showing trial stats: {e}", user_id=user_id)
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "premium_vs_trial")
async def show_premium_vs_trial(callback: CallbackQuery):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ Premium –∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    
    comparison_text = [
        "üíé Premium vs üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
        "",
        "üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (60 –º–∏–Ω—É—Ç):</b>",
        "‚Ä¢ ‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        "‚Ä¢ ‚úÖ HD –∫–∞—á–µ—Å—Ç–≤–æ (–¥–æ 1080p)",
        "‚Ä¢ ‚úÖ –§–∞–π–ª—ã –¥–æ 500MB",
        "‚Ä¢ ‚úÖ –ë–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
        "‚Ä¢ ‚è∞ –¢–æ–ª—å–∫–æ 60 –º–∏–Ω—É—Ç",
        "‚Ä¢ ‚ùå –û–¥–∏–Ω —Ä–∞–∑ –≤ –∂–∏–∑–Ω–∏",
        "",
        "üíé <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞:</b>",
        "‚Ä¢ ‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        "‚Ä¢ ‚úÖ 4K –∫–∞—á–µ—Å—Ç–≤–æ (–¥–æ 2160p)",
        "‚Ä¢ ‚úÖ –§–∞–π–ª—ã –¥–æ 500MB",
        "‚Ä¢ ‚úÖ –•—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ 30 –¥–Ω–µ–π",
        "‚Ä¢ ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        "‚Ä¢ ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "‚Ä¢ ‚è∞ –û—Ç 30 –¥–Ω–µ–π –¥–æ –≥–æ–¥–∞",
        "‚Ä¢ üí∞ –û—Ç $3.99/–º–µ—Å—è—Ü"
    ]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="activate_trial")],
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å Premium", callback_data="buy_premium")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await callback.message.edit_text(
        "\n".join(comparison_text),
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "upgrade_to_premium")
async def handle_upgrade_to_premium(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ Premium"""
    await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É Premium –ø–ª–∞–Ω–∞...")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ trial
    await state.clear()
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Premium
    from bot.handlers.premium import show_premium_plans
    
    user_id = callback.from_user.id
    async with get_async_session() as session:
        user = await get_or_create_user(
            session=session,
            telegram_id=user_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name
        )
        await session.commit()
    
    await show_premium_plans(callback.message, user, state)


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º

async def check_trial_expiry():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)"""
    try:
        async with get_async_session() as session:
            expired_trials = await session.query(User).filter(
                User.trial_expires_at < datetime.utcnow(),
                User.user_type == "trial"
            ).all()
            
            for user in expired_trials:
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∏–ø
                user.user_type = "free"
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    from aiogram import Bot
                    bot = Bot.get_current()
                    await bot.send_message(
                        user.telegram_id,
                        "‚è∞ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                        "–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω:\n"
                        "‚Ä¢ 10 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å\n"
                        "‚Ä¢ HD –∫–∞—á–µ—Å—Ç–≤–æ (720p)\n"
                        "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã\n\n"
                        "üíé –ö—É–ø–∏—Ç—å Premium: /premium"
                    )
                    
                    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                    await track_user_event(
                        event_type=EventType.USER_PREMIUM_EXPIRED,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ trial expired
                        user_id=user.id,
                        telegram_user_id=user.telegram_id,
                        user_type="free"
                    )
                    
                except Exception:
                    pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            
            await session.commit()
            
            if expired_trials:
                logger.info(f"Expired {len(expired_trials)} trial periods")
    
    except Exception as e:
        logger.error(f"Error checking trial expiry: {e}")


def get_trial_time_remaining(user: User) -> Optional[timedelta]:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    if not user.is_trial_active or not user.trial_expires_at:
        return None
    
    remaining = user.trial_expires_at - datetime.utcnow()
    return remaining if remaining.total_seconds() > 0 else timedelta(0)


def format_trial_time(time_delta: timedelta) -> str:
    """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    if time_delta.total_seconds() <= 0:
        return "–∏—Å—Ç–µ–∫"
    
    hours = int(time_delta.total_seconds() // 3600)
    minutes = int((time_delta.total_seconds() % 3600) // 60)
    
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    else:
        return f"{minutes}–º"